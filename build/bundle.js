var CrowdSimulator;CrowdSimulator=(()=>{"use strict";var t={354:(t,i,e)=>{e.r(i),e.d(i,{init:()=>P,playPause:()=>b,reconfigure:()=>I,step:()=>w});var n=function(){function t(t,i){this._renderer=t,this._agents=i}return t.prototype.init=function(t){this._agents.init(t.agents)},t.prototype.update=function(t){var i=this;this._agents.forEach((function(e){e.update(t,i._agents.getNeighboursInRangeRectilinear(e,300))})),this._agents.init(this._agents.getAll())},t.prototype.draw=function(){var t=this;this._renderer.clear(),this._agents.forEach((function(i){t._renderer.drawAgent(i)}))},t}(),o=function(){function t(t){this._context=t.getContext("2d")}return t.prototype.clear=function(){this._context.fillStyle="white",this._context.fillRect(0,0,this._context.canvas.width,this._context.canvas.height)},t.prototype.drawAgent=function(t){var i=t.getPosition(),e=t.getDirection();this._context.beginPath(),t.getIsDone()?this._context.strokeStyle="#00FF00":t.getIsStuck()?this._context.strokeStyle="#FF0000":this._context.strokeStyle="#000000",this._context.arc(i.x,i.y,t.Radius,0,2*Math.PI);var n=e.magnitude();if(0!==n){this._context.moveTo(i.x,i.y);var o=i.add(e.divide(n).multiply(t.Radius));this._context.lineTo(o.x,o.y)}this._context.stroke()},t}(),r=function(){function t(t,i){this.x=t,this.y=i}return t.prototype.copy=function(i){return new t(i.x,i.y)},t.prototype.add=function(i){return new t(this.x+i.x,this.y+i.y)},t.prototype.subtract=function(i){return new t(this.x-i.x,this.y-i.y)},t.prototype.multiply=function(i){return new t(this.x*i,this.y*i)},t.prototype.divide=function(i){return new t(this.x/i,this.y/i)},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.magnitudeSqrd=function(){return Math.pow(this.x,2)+Math.pow(this.y,2)},t.prototype.magnitude=function(){return Math.sqrt(this.magnitudeSqrd())},t.prototype.normalise=function(){var i=this.magnitude();return 0==i?new t(0,0):this.divide(i)},t.prototype.sample=function(i){var e=Math.sqrt(Math.random())*i,n=2*Math.PI*Math.random();return new t(this.x+e*Math.cos(n),this.y+e*Math.sin(n))},t}(),s=function(){function t(t,i,e,n){this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new r(0,0),this._isDone=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return!1},t.prototype.update=function(t,i){if(!this._isDone){var e=this._goalPosition.subtract(this._position);e.magnitude()>60*t/1e3?(this._direction=e.normalise(),this._position=this._position.add(this._direction.multiply(60*t/1e3))):(this._position=this._goalPosition,this._isDone=!0)}},t}(),a=function(){function t(t,i,e,n){this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new r(0,0),this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){var e=this;if(!this._isDone){var n=this._goalPosition.subtract(this._position);if(n.magnitude()>60*t/1e3){this._direction=n.normalise();var o=this._position.add(this._direction.multiply(20));this._isStuck=!1,i.forEach((function(t){t.Id!=e.Id&&e.collides(t,o)&&(e._isStuck=!0)})),this._isStuck||(this._position=this._position.add(this._direction.multiply(60*t/1e3)))}else this._position=this._goalPosition,this._isDone=!0}},t.prototype.collides=function(t,i){return t.getPosition().subtract(i).magnitude()<t.Radius+this.Radius},t}(),c=function(){function t(){}return t.RandomToRandom=function(t,i,e,n){for(var o=[],r=this.poissonDiskSample(i,e,t,50),s=this.poissonDiskSample(i,e,t,50),a=0;a<t;a++){var c=n(a,r[a],s[a],20);o.push(c)}return{agents:o}},t.RandomToLine=function(t,i,e,n){for(var o=[],s=this.poissonDiskSample(i,e,t,50),a=0;a<t;a++){var c=n(a,s[a],new r((a+1)/(t+1)*i,e/2),20);o.push(c)}return{agents:o}},t.CircleToCircle=function(t,i,e,n){for(var o=[],s=i/2,a=e/2,c=e/2-25,u=0;u<t;u++){var h=2*Math.PI*u/t,d=n(u,new r(s+c*Math.cos(h),a+c*Math.sin(h)),new r(s+c*Math.cos(h+Math.PI),a+c*Math.sin(h+Math.PI)),20);o.push(d)}return{agents:o}},t.GridToGrid=function(t,i,e,n){for(var o=[],s=Math.ceil(t/8),a=i-50-90*(s-1),c=e/2-135,u=0,h=0;h<s;h++){for(var d=0;d<4;d++){var p=new r(50+90*h,c+90*d),g=new r(a+90*h,c+90*d);if(o.push(n(u,p,g,20)),++u>=t)break;if(o.push(n(u,g,p,20)),++u>=t)break}if(u>=t)break}return{agents:o}},t.poissonDiskSample=function(t,i,e,n){for(var o=[],s=function(){for(var e,s=!0;s;)s=!1,e=new r(t*Math.random(),i*Math.random()),o.forEach((function(t){e.subtract(t).magnitudeSqrd()<Math.pow(n,2)&&(s=!0)}));o.push(e)},a=0;a<e;a++)s();return o},t}(),u=function(){function t(){}return t.prototype.init=function(t){this._agents=t,this._root=this.constructTree(this._agents,!0)},t.prototype.getAll=function(){return this._agents},t.prototype.getNeighboursInRangeRectilinear=function(t,i){var e=t.getPosition().x-i,n=t.getPosition().y-i,o=t.getPosition().x+i,r=t.getPosition().y+i;return this.rangeSearch(this._root,e,n,o,r,!0).filter((function(i){return i.Id!==t.Id}))},t.prototype.getNeighboursInRangeEuclidean=function(t,i){return this.getNeighboursInRangeRectilinear(t,i).filter((function(e){return t.getPosition().subtract(e.getPosition()).magnitudeSqrd()<=Math.pow(i,2)}))},t.prototype.forEach=function(t){this._agents.forEach(t)},t.prototype.constructTree=function(t,i){if(0===t.length)return null;var e=Math.floor(t.length/2),n=i?t.sort((function(t,i){return t.getPosition().x-i.getPosition().x})):t.sort((function(t,i){return t.getPosition().y-i.getPosition().y})),o=this.constructTree(n.slice(0,e),!i),r=this.constructTree(n.slice(e+1,t.length),!i);return{agent:t[e],left:o,right:r}},t.prototype.rangeSearch=function(t,i,e,n,o,r){if(null==t)return[];var s=[];return r?(t.agent.getPosition().x<=n&&(s=s.concat(this.rangeSearch(t.right,i,e,n,o,!r))),t.agent.getPosition().x>=i&&(s=s.concat(this.rangeSearch(t.left,i,e,n,o,!r)))):(t.agent.getPosition().y<=o&&(s=s.concat(this.rangeSearch(t.right,i,e,n,o,!r))),t.agent.getPosition().y>=e&&(s=s.concat(this.rangeSearch(t.left,i,e,n,o,!r)))),t.agent.getPosition().x>=i&&t.agent.getPosition().y>=e&&t.agent.getPosition().x<=n&&t.agent.getPosition().y<=o&&s.push(t.agent),s},t}(),h=function(){function t(t,i,e,n){this.MAX_VELOCITY=1,this.MAX_ACCELERATION=.5,this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new r(0,0),this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){if(!this._isDone){this._isStuck=!1;for(var e,n,o=.5,s=this.getPreferredVelocity(o),a=!0,c=0;c<i.length;c++)if(null!=(y=this.getVelocityObstacle(i[c]))&&this.isInside(s,y)){a=!1,e=y,n=c;break}if(a)return this._direction=s,this._position=this._position.add(s),void this.checkIfDone();if(null!=e){var u=this.getClosestPointOnLine(e.vertex,e.tangent1,s);if(u.magnitude()<=o){for(a=!0,c=0;c<i.length;c++)if(c!=n&&null!=(y=this.getVelocityObstacle(i[c]))&&this.isInside(u,y)){a=!1;break}if(a)return this._direction=u,this._position=this._position.add(u),void this.checkIfDone()}var h=this.getClosestPointOnLine(e.vertex,e.tangent2,s);if(u.magnitude()<=o){for(a=!0,c=0;c<i.length;c++)if(c!=n&&null!=(y=this.getVelocityObstacle(i[c]))&&this.isInside(h,y)){a=!1;break}if(a)return this._direction=h,this._position=this._position.add(h),void this.checkIfDone()}}var d=1/0,p=new r(0,0);for(c=0;c<100;c++){for(var g=new r(0,0).sample(o),f=1/0,l=0;l<i.length;l++){var y,_=i[l];if(null==(y=this.getVelocityObstacle(_))||this.isInside(g,y)){var v=this.getFirstRayCircleIntersection(_.getPosition().add(_.getDirection()),this.Radius+_.Radius,this._position,g.subtract(_.getDirection()));if(v<f&&0==(f=v))return void this.checkIfDone()}}var x=100/f+s.subtract(g).magnitude();x<d&&(d=x,p=g)}0==p.magnitude()&&(this._isStuck=!0),this._direction=p,this._position=this._position.add(p),this.checkIfDone()}},t.prototype.getPreferredVelocity=function(t){var i=this._goalPosition.subtract(this._position),e=i.magnitude();return e>t?i.divide(e/t):i},t.prototype.getVelocityObstacle=function(t){var i=t.getDirection(),e=t.getPosition().subtract(this._position).add(i),n=t.Radius+this.Radius,o=i.subtract(e),s=o.magnitude();if(s<n)return null;var a=Math.acos(n/s),c=Math.atan2(o.y,o.x),u=c+a,h=c-a;return{vertex:i,tangent1:new r(e.x+n*Math.cos(u),e.y+n*Math.sin(u)),tangent2:new r(e.x+n*Math.cos(h),e.y+n*Math.sin(h))}},t.prototype.isInside=function(t,i){var e=(i.tangent1.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent1.y-i.vertex.y)*(t.x-i.vertex.x),n=(i.tangent2.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent2.y-i.vertex.y)*(t.x-i.vertex.x);return e>0&&n<0},t.prototype.getClosestPointOnLine=function(t,i,e){var n=i.normalise(),o=e.subtract(t).dot(n);return t.add(n.multiply(o))},t.prototype.getFirstRayCircleIntersection=function(t,i,e,n){var o=e.subtract(t),r=n.dot(n),s=2*n.dot(o),a=o.dot(o)-Math.pow(i,2),c=Math.pow(s,2)-4*r*a;if(c<0)return 1/0;var u=(-s-Math.sqrt(c))/2*r;return u<0?1/0:u},t.prototype.checkIfDone=function(){this._position.subtract(this._goalPosition).magnitudeSqrd()<1&&(this._isDone=!0,this._position=this._goalPosition,this._direction=new r(0,0))},t}(),d=function(){function t(t,i,e,n){this.MAX_VELOCITY=1,this.MAX_ACCELERATION=.5,this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new r(0,0),this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){if(!this._isDone){this._isStuck=!1;for(var e,n,o=.5,s=this.getPreferredVelocity(o),a=!0,c=0;c<i.length;c++)if(null!=(y=this.getReciprocalVelocityObstacle(i[c]))&&this.isInside(s,y)){a=!1,e=y,n=c;break}if(a)return this._direction=s,this._position=this._position.add(s),void this.checkIfDone();if(null!=e){var u=this.getClosestPointOnLine(e.vertex,e.tangent1,s);if(u.magnitude()<=o){for(a=!0,c=0;c<i.length;c++)if(c!=n&&null!=(y=this.getReciprocalVelocityObstacle(i[c]))&&this.isInside(u,y)){a=!1;break}if(a)return this._direction=u,this._position=this._position.add(u),void this.checkIfDone()}var h=this.getClosestPointOnLine(e.vertex,e.tangent2,s);if(u.magnitude()<=o){for(a=!0,c=0;c<i.length;c++)if(c!=n&&null!=(y=this.getReciprocalVelocityObstacle(i[c]))&&this.isInside(h,y)){a=!1;break}if(a)return this._direction=h,this._position=this._position.add(h),void this.checkIfDone()}}var d=1/0,p=new r(0,0);for(c=0;c<100;c++){for(var g=new r(0,0).sample(o),f=1/0,l=0;l<i.length;l++){var y,_=i[l];if(null!=(y=this.getReciprocalVelocityObstacle(_))&&this.isInside(g,y)){var v=this.getFirstRayCircleIntersection(_.getPosition().add(_.getDirection()),this.Radius+_.Radius,this._position,g.multiply(2).subtract(this.getDirection()).subtract(_.getDirection()));if(v<f&&0==(f=v))return void this.checkIfDone()}}var x=100/f+s.subtract(g).magnitude();x<d&&(d=x,p=g)}0==p.magnitude()&&(this._isStuck=!0),this._direction=p,this._position=this._position.add(p),this.checkIfDone()}},t.prototype.getPreferredVelocity=function(t){var i=this._goalPosition.subtract(this._position),e=i.magnitude();return e>t?i.divide(e/t):i},t.prototype.getReciprocalVelocityObstacle=function(t){var i=this.getDirection(),e=t.getDirection(),n=i.add(e).divide(2),o=t.getPosition().subtract(this._position).add(e),s=t.Radius+this.Radius,a=e.subtract(o),c=a.magnitude();if(c<s)return null;var u=Math.acos(s/c),h=Math.atan2(a.y,a.x),d=h+u,p=h-u;return{vertex:n,tangent1:new r(o.x+s*Math.cos(d),o.y+s*Math.sin(d)),tangent2:new r(o.x+s*Math.cos(p),o.y+s*Math.sin(p))}},t.prototype.isInside=function(t,i){var e=(i.tangent1.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent1.y-i.vertex.y)*(t.x-i.vertex.x),n=(i.tangent2.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent2.y-i.vertex.y)*(t.x-i.vertex.x);return e>0&&n<0},t.prototype.getClosestPointOnLine=function(t,i,e){var n=i.normalise(),o=e.subtract(t).dot(n);return t.add(n.multiply(o))},t.prototype.getFirstRayCircleIntersection=function(t,i,e,n){var o=e.subtract(t),r=n.dot(n),s=2*n.dot(o),a=o.dot(o)-Math.pow(i,2),c=Math.pow(s,2)-4*r*a;if(c<0)return 1/0;var u=(-s-Math.sqrt(c))/2*r;return u<0?1/0:u},t.prototype.checkIfDone=function(){this._position.subtract(this._goalPosition).magnitudeSqrd()<1&&(this._isDone=!0,this._position=this._goalPosition,this._direction=new r(0,0))},t}(),p=document.getElementById("config"),g=document.getElementById("agentType"),f=document.getElementById("numberOfAgents"),l=document.getElementById("canvas"),y=document.getElementById("framerate"),_=document.getElementById("playButton"),v=document.getElementById("stepButton"),x=new n(new o(l),new u),m=!1;function P(){this.reconfigure();var t=0,i=0,e=0;window.requestAnimationFrame((function n(o){var r=o-t;t=o,m&&x.update(r),x.draw(),e++,o-i>=250&&(y.textContent="FPS: "+(1e3*e/(o-i)).toFixed(1),e=0,i=o),window.requestAnimationFrame(n)}))}function b(){(m=!m)?(_.textContent="Pause",v.disabled=!0):(_.textContent="Play",v.disabled=!1)}function w(){x.update(1e3/60)}function I(){var t;m&&this.playPause();var i,e=p.value,n=g.value,o=null!==(t=parseInt(f.value))&&void 0!==t?t:0;switch(n){case"BasicAgent":i=function(t,i,e,n){return new s(t,i,e,n)};break;case"StopAgent":i=function(t,i,e,n){return new a(t,i,e,n)};break;case"VOAgent":i=function(t,i,e,n){return new h(t,i,e,n)};break;case"RVOAgent":i=function(t,i,e,n){return new d(t,i,e,n)};break;default:throw new Error("Agent not implemented")}switch(e){case"RandomToRandom":x.init(c.RandomToRandom(o,l.width,l.height,i));break;case"RandomToLine":x.init(c.RandomToLine(o,l.width,l.height,i));break;case"CircleToCircle":x.init(c.CircleToCircle(o,l.width,l.height,i));break;case"GridToGrid":x.init(c.GridToGrid(o,l.width,l.height,i));break;default:throw new Error("Configuration not implemented")}}}},i={};function e(n){if(i[n])return i[n].exports;var o=i[n]={exports:{}};return t[n](o,o.exports,e),o.exports}return e.d=(t,i)=>{for(var n in i)e.o(i,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:i[n]})},e.o=(t,i)=>Object.prototype.hasOwnProperty.call(t,i),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e(354)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,