var CrowdSimulator;CrowdSimulator=(()=>{"use strict";var t={389:(t,i,o)=>{o.r(i),o.d(i,{init:()=>x,playPause:()=>m,reconfigure:()=>v,step:()=>w});var n=function(){function t(t,i){this._renderer=t,this._agents=i}return t.prototype.init=function(t){this._agents.init(t.agents)},t.prototype.update=function(t){var i=this;this._agents.forEach((function(o){o.update(t,i._agents.getAll())})),this._agents.init(this._agents.getAll())},t.prototype.draw=function(){var t=this;this._renderer.clear(),this._agents.forEach((function(i){t._renderer.drawAgent(i)}))},t}(),e=function(){function t(t){this._context=t.getContext("2d")}return t.prototype.clear=function(){this._context.fillStyle="white",this._context.fillRect(0,0,this._context.canvas.width,this._context.canvas.height)},t.prototype.drawAgent=function(t){var i=t.getPosition(),o=t.getDirection();if(this._context.beginPath(),t.getIsDone()?this._context.strokeStyle="#00FF00":t.getIsStuck()?this._context.strokeStyle="#FF0000":this._context.strokeStyle="#000000",this._context.arc(i.x,i.y,t.Radius,0,2*Math.PI),0!==o.dx||0!==o.dy){var n=Math.sqrt(Math.pow(o.dx,2)+Math.pow(o.dy,2));this._context.moveTo(i.x,i.y),this._context.lineTo(i.x+t.Radius*o.dx/n,i.y+t.Radius*o.dy/n)}this._context.stroke()},t}(),r=function(){function t(t,i,o,n){this.Id=t,this._position=i,this._goalPosition=o,this.Radius=n,this._direction={dx:0,dy:0},this._isDone=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return!1},t.prototype.update=function(t,i){if(!this._isDone){var o={x:this._goalPosition.x-this._position.x,y:this._goalPosition.y-this._position.y},n=Math.sqrt(Math.pow(o.x,2)+Math.pow(o.y,2));n>60*t/1e3?(this._direction.dx=o.x/n,this._direction.dy=o.y/n,this._position.x+=60*t/1e3*this._direction.dx,this._position.y+=60*t/1e3*this._direction.dy):(this._position.x=this._goalPosition.x,this._position.y=this._goalPosition.y,this._isDone=!0)}},t}(),s=function(){function t(t,i,o,n){this.Id=t,this._position=i,this._goalPosition=o,this.Radius=n,this._direction={dx:0,dy:0},this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){var o=this;if(!this._isDone){var n={x:this._goalPosition.x-this._position.x,y:this._goalPosition.y-this._position.y},e=Math.sqrt(Math.pow(n.x,2)+Math.pow(n.y,2));if(e>60*t/1e3){this._direction.dx=n.x/e,this._direction.dy=n.y/e;var r=this._position.x+20*this._direction.dx,s=this._position.y+20*this._direction.dy;this._isStuck=!1,i.forEach((function(t){t.Id!=o.Id&&o.collides(t,{x:r,y:s})&&(o._isStuck=!0)})),this._isStuck||(this._position.x+=60*t/1e3*this._direction.dx,this._position.y+=60*t/1e3*this._direction.dy)}else this._position.x=this._goalPosition.x,this._position.y=this._goalPosition.y,this._isDone=!0}},t.prototype.collides=function(t,i){var o=i.x,n=i.y,e=this.Radius,r=t.getPosition().x,s=t.getPosition().y,a=t.Radius;return Math.sqrt(Math.pow(o-r,2)+Math.pow(n-s,2))<e+a},t}(),a=function(){function t(){}return t.RandomToRandom=function(t,i,o,n){for(var e=[],r=0;r<t;r++){var s=n(r,{x:i*Math.random(),y:o*Math.random()},{x:i*Math.random(),y:o*Math.random()},20);e.push(s)}return{agents:e}},t.RandomToLine=function(t,i,o,n){for(var e=[],r=0;r<t;r++){var s=n(r,{x:i*Math.random(),y:o*Math.random()},{x:(r+1)/(t+1)*i,y:o/2},20);e.push(s)}return{agents:e}},t.CircleToCircle=function(t,i,o,n){for(var e=[],r=i/2,s=o/2,a=o/2-25,h=0;h<t;h++){var u=2*Math.PI*h/t,c=n(h,{x:r+a*Math.cos(u),y:s+a*Math.sin(u)},{x:r+a*Math.cos(u+Math.PI),y:s+a*Math.sin(u+Math.PI)},20);e.push(c)}return{agents:e}},t}(),h=function(){function t(){}return t.prototype.init=function(t){var i=this;this._root=null,t.forEach((function(t){i._root=i.insert(t,i._root,!0)}))},t.prototype.getAll=function(){return this.get(this._root)},t.prototype.getNeighboursInRangeRectilinear=function(t,i){throw new Error("Method not implemented.")},t.prototype.getNeighboursInRangeEuclidean=function(t,i){throw new Error("Method not implemented.")},t.prototype.forEach=function(t){this.apply(this._root,t)},t.prototype.insert=function(t,i,o){return null==i?{agent:t,left:null,right:null}:(o?t.getPosition().x<i.agent.getPosition().x?i.left=this.insert(t,i.left,!o):i.right=this.insert(t,i.right,!o):t.getPosition().y<i.agent.getPosition().y?i.left=this.insert(t,i.left,!o):i.right=this.insert(t,i.right,!o),i)},t.prototype.get=function(t){return null==t?[]:this.get(t.left).concat(this.get(t.right)).concat(t.agent)},t.prototype.apply=function(t,i){null!=t&&(i(t.agent),this.apply(t.left,i),this.apply(t.right,i))},t}(),u=document.getElementById("config"),c=document.getElementById("agentType"),d=document.getElementById("numberOfAgents"),p=document.getElementById("canvas"),l=document.getElementById("framerate"),y=document.getElementById("playButton"),g=document.getElementById("stepButton"),f=new n(new e(p),new h),_=!1;function x(){this.reconfigure();var t=0,i=0,o=0;window.requestAnimationFrame((function n(e){var r=e-t;t=e,_&&f.update(r),f.draw(),o++,e-i>=250&&(l.textContent="FPS: "+(1e3*o/(e-i)).toFixed(1),o=0,i=e),window.requestAnimationFrame(n)}))}function m(){(_=!_)?(y.textContent="Pause",g.disabled=!0):(y.textContent="Play",g.disabled=!1)}function w(){f.update(1e3/60)}function v(){var t;_&&this.playPause();var i,o=u.value,n=c.value,e=null!==(t=parseInt(d.value))&&void 0!==t?t:0;switch(n){case"BasicAgent":i=function(t,i,o,n){return new r(t,i,o,n)};break;case"StopAgent":i=function(t,i,o,n){return new s(t,i,o,n)};break;default:throw new Error("Agent not implemented")}switch(o){case"RandomToRandom":f.init(a.RandomToRandom(e,p.width,p.height,i));break;case"RandomToLine":f.init(a.RandomToLine(e,p.width,p.height,i));break;case"CircleToCircle":f.init(a.CircleToCircle(e,p.width,p.height,i));break;default:throw new Error("Configuration not implemented")}}}},i={};function o(n){if(i[n])return i[n].exports;var e=i[n]={exports:{}};return t[n](e,e.exports,o),e.exports}return o.d=(t,i)=>{for(var n in i)o.o(i,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:i[n]})},o.o=(t,i)=>Object.prototype.hasOwnProperty.call(t,i),o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o(389)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,