var CrowdSimulator;CrowdSimulator=(()=>{"use strict";var t={775:(t,i,n)=>{n.r(i),n.d(i,{init:()=>v,playPause:()=>P,reconfigure:()=>b,step:()=>w});var e=function(){function t(t,i){this._renderer=t,this._agents=i}return t.prototype.init=function(t){this._agents.init(t.agents)},t.prototype.update=function(t){var i=this;this._agents.forEach((function(n){n.update(t,i._agents.getNeighboursInRangeRectilinear(n,400))})),this._agents.forEach((function(t){t.finalize()})),this._agents.init(this._agents.getAll())},t.prototype.draw=function(){var t=this;this._renderer.clear(),this._agents.forEach((function(i){t._renderer.drawAgent(i)}))},t}(),o=function(){function t(t){this._context=t.getContext("2d")}return t.prototype.clear=function(){this._context.fillStyle="white",this._context.fillRect(0,0,this._context.canvas.width,this._context.canvas.height)},t.prototype.drawAgent=function(t){var i=t.getPosition(),n=t.getDirection();this._context.beginPath(),t.getIsDone()?this._context.strokeStyle="#00FF00":t.getIsStuck()?this._context.strokeStyle="#FF0000":this._context.strokeStyle="#000000",this._context.arc(i.x,i.y,t.Radius,0,2*Math.PI);var e=n.magnitude();if(0!==e){this._context.moveTo(i.x,i.y);var o=i.add(n.divide(e).multiply(t.Radius));this._context.lineTo(o.x,o.y)}this._context.stroke()},t}(),r=function(){function t(t,i){this.x=t,this.y=i}return t.prototype.copy=function(i){return new t(i.x,i.y)},t.prototype.add=function(i){return new t(this.x+i.x,this.y+i.y)},t.prototype.subtract=function(i){return new t(this.x-i.x,this.y-i.y)},t.prototype.multiply=function(i){return new t(this.x*i,this.y*i)},t.prototype.divide=function(i){return new t(this.x/i,this.y/i)},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.magnitudeSqrd=function(){return Math.pow(this.x,2)+Math.pow(this.y,2)},t.prototype.magnitude=function(){return Math.sqrt(this.magnitudeSqrd())},t.prototype.normalise=function(){var i=this.magnitude();return 0==i?new t(0,0):this.divide(i)},t.prototype.sample=function(i){var n=Math.sqrt(Math.random())*i,e=2*Math.PI*Math.random();return new t(this.x+n*Math.cos(e),this.y+n*Math.sin(e))},t}(),s=function(){function t(t,i,n,e){this.Id=t,this._position=i,this._goalPosition=n,this.Radius=e,this._direction=new r(0,0),this._nextPosition=this._position,this._nextDirection=new r(0,0),this._isDone=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return!1},t.prototype.update=function(t,i){if(!this._isDone){var n=this._goalPosition.subtract(this._position);n.magnitude()>60*t/1e3?(this._nextDirection=n.normalise(),this._nextPosition=this._position.add(this._nextDirection.multiply(60*t/1e3))):(this._nextPosition=this._goalPosition,this._isDone=!0)}},t.prototype.finalize=function(){this._direction=this._nextDirection,this._position=this._nextPosition},t}(),a=function(){function t(t,i,n,e){this.Id=t,this._position=i,this._goalPosition=n,this.Radius=e,this._direction=new r(0,0),this._nextPosition=this._position,this._nextDirection=new r(0,0),this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){var n=this;if(!this._isDone){var e=this._goalPosition.subtract(this._position);if(e.magnitude()>60*t/1e3){this._nextDirection=e.normalise();var o=this._position.add(this._nextDirection.multiply(20));this._isStuck=!1,i.forEach((function(t){t.Id!=n.Id&&n.collides(t,o)&&(n._isStuck=!0)})),this._isStuck||(this._nextPosition=this._position.add(this._nextDirection.multiply(60*t/1e3)))}else this._nextPosition=this._goalPosition,this._isDone=!0}},t.prototype.finalize=function(){this._direction=this._nextDirection,this._position=this._nextPosition},t.prototype.collides=function(t,i){return t.getPosition().subtract(i).magnitude()<t.Radius+this.Radius},t}(),u=function(){function t(){}return t.RandomToRandom=function(t,i,n,e){for(var o=[],s=0;s<t;s++){var a=e(s,new r(i*Math.random(),n*Math.random()),new r(i*Math.random(),n*Math.random()),20);o.push(a)}return{agents:o}},t.RandomToLine=function(t,i,n,e){for(var o=[],s=0;s<t;s++){var a=e(s,new r(i*Math.random(),n*Math.random()),new r((s+1)/(t+1)*i,n/2),20);o.push(a)}return{agents:o}},t.CircleToCircle=function(t,i,n,e){for(var o=[],s=i/2,a=n/2,u=n/2-25,h=0;h<t;h++){var c=2*Math.PI*h/t,g=e(h,new r(s+u*Math.cos(c),a+u*Math.sin(c)),new r(s+u*Math.cos(c+Math.PI),a+u*Math.sin(c+Math.PI)),20);o.push(g)}return{agents:o}},t}(),h=function(){function t(){}return t.prototype.init=function(t){this._agents=t,this._root=this.constructTree(this._agents,!0)},t.prototype.getAll=function(){return this._agents},t.prototype.getNeighboursInRangeRectilinear=function(t,i){var n=t.getPosition().x-i,e=t.getPosition().y-i,o=t.getPosition().x+i,r=t.getPosition().y+i;return this.rangeSearch(this._root,n,e,o,r,!0).filter((function(i){return i.Id!==t.Id}))},t.prototype.getNeighboursInRangeEuclidean=function(t,i){return this.getNeighboursInRangeRectilinear(t,i).filter((function(n){return t.getPosition().subtract(n.getPosition()).magnitudeSqrd()<=Math.pow(i,2)}))},t.prototype.forEach=function(t){this._agents.forEach(t)},t.prototype.constructTree=function(t,i){if(0===t.length)return null;var n=Math.floor(t.length/2),e=i?t.sort((function(t,i){return t.getPosition().x-i.getPosition().x})):t.sort((function(t,i){return t.getPosition().y-i.getPosition().y})),o=this.constructTree(e.slice(0,n),!i),r=this.constructTree(e.slice(n+1,t.length),!i);return{agent:t[n],left:o,right:r}},t.prototype.rangeSearch=function(t,i,n,e,o,r){if(null==t)return[];var s=[];return r?(t.agent.getPosition().x<=e&&(s=s.concat(this.rangeSearch(t.right,i,n,e,o,!r))),t.agent.getPosition().x>=i&&(s=s.concat(this.rangeSearch(t.left,i,n,e,o,!r)))):(t.agent.getPosition().y<=o&&(s=s.concat(this.rangeSearch(t.right,i,n,e,o,!r))),t.agent.getPosition().y>=n&&(s=s.concat(this.rangeSearch(t.left,i,n,e,o,!r)))),t.agent.getPosition().x>=i&&t.agent.getPosition().y>=n&&t.agent.getPosition().x<=e&&t.agent.getPosition().y<=o&&s.push(t.agent),s},t}(),c=function(){function t(t,i,n,e){this.MAX_VELOCITY=1,this.MAX_ACCELERATION=.5,this.Id=t,this._position=i,this._goalPosition=n,this.Radius=e,this._direction=new r(0,0),this._nextPosition=this._position,this._nextDirection=new r(0,0),this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){if(!this._isDone){this._isStuck=!1;for(var n,e,o=.5,s=this.getPreferredVelocity(o),a=!0,u=0;u<i.length;u++)if(null==(y=this.getVelocityObstacle(i[u]))||this.isInside(s,y)){a=!1,n=y,e=u;break}if(a)return this._nextDirection=s,this._nextPosition=this._position.add(s),void(this._nextPosition.subtract(this._goalPosition).magnitudeSqrd()<.1&&(this._isDone=!0,this._nextPosition=this._goalPosition,this._nextDirection=new r(0,0)));if(null!=n){var h=this.getClosestPointOnLine(n.vertex,n.tangent1,s);if(h.magnitude()<=o){for(a=!0,u=0;u<i.length;u++)if(u!=e&&(null==(g=this.getVelocityObstacle(i[u]))||this.isInside(h,g))){a=!1;break}if(a)return this._nextDirection=h,void(this._nextPosition=this._position.add(h))}var c=this.getClosestPointOnLine(n.vertex,n.tangent2,s);if(h.magnitude()<=o){for(a=!0,u=0;u<i.length;u++){var g;if(u!=e&&(null==(g=this.getVelocityObstacle(i[u]))||this.isInside(c,g))){a=!1;break}}if(a)return this._nextDirection=c,void(this._nextPosition=this._position.add(c))}}var d=1/0,p=new r(0,0);for(u=0;u<150;u++){for(var f=new r(0,0).sample(o),l=1/0,_=0;_<i.length;_++){var y,x=i[_];if(null==(y=this.getVelocityObstacle(x))||this.isInside(f,y)){var m=this.getFirstRayCircleIntersection(x.getPosition(),this.Radius+x.Radius,this._position,f);if(m<l&&0==(l=m))return}}var v=100/l+s.subtract(f).magnitude();v<d&&(d=v,p=f)}0==p.magnitude()&&(this._isStuck=!0),this._nextDirection=p,this._nextPosition=this._position.add(p)}},t.prototype.finalize=function(){this._direction=this._nextDirection,this._position=this._nextPosition},t.prototype.getPreferredVelocity=function(t){var i=this._goalPosition.subtract(this._position),n=i.magnitude();return n>t?i.divide(n/t):i},t.prototype.getVelocityObstacle=function(t){var i=t.getDirection(),n=t.getPosition().subtract(this._position).add(i),e=t.Radius+this.Radius,o=i.subtract(n),s=o.magnitude();if(s<e)return null;var a=Math.acos(e/s),u=Math.atan2(o.y,o.x),h=u+a,c=u-a;return{vertex:i,tangent1:new r(n.x+e*Math.cos(h),n.y+e*Math.sin(h)),tangent2:new r(n.x+e*Math.cos(c),n.y+e*Math.sin(c))}},t.prototype.isInside=function(t,i){var n=(i.tangent1.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent1.y-i.vertex.y)*(t.x-i.vertex.x),e=(i.tangent2.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent2.y-i.vertex.y)*(t.x-i.vertex.x);return n>0&&e<0},t.prototype.getClosestPointOnLine=function(t,i,n){var e=i.normalise(),o=n.subtract(t).dot(e);return t.add(e.multiply(o))},t.prototype.getFirstRayCircleIntersection=function(t,i,n,e){var o=n.subtract(t),r=e.dot(e),s=2*e.dot(o),a=o.dot(o)-Math.pow(i,2),u=Math.pow(s,2)-4*r*a;if(u<0)return 1/0;var h=(-s-Math.sqrt(u))/2*r;return h<0?1/0:h},t}(),g=document.getElementById("config"),d=document.getElementById("agentType"),p=document.getElementById("numberOfAgents"),f=document.getElementById("canvas"),l=document.getElementById("framerate"),_=document.getElementById("playButton"),y=document.getElementById("stepButton"),x=new e(new o(f),new h),m=!1;function v(){this.reconfigure();var t=0,i=0,n=0;window.requestAnimationFrame((function e(o){var r=o-t;t=o,m&&x.update(r),x.draw(),n++,o-i>=250&&(l.textContent="FPS: "+(1e3*n/(o-i)).toFixed(1),n=0,i=o),window.requestAnimationFrame(e)}))}function P(){(m=!m)?(_.textContent="Pause",y.disabled=!0):(_.textContent="Play",y.disabled=!1)}function w(){x.update(1e3/60)}function b(){var t;m&&this.playPause();var i,n=g.value,e=d.value,o=null!==(t=parseInt(p.value))&&void 0!==t?t:0;switch(e){case"BasicAgent":i=function(t,i,n,e){return new s(t,i,n,e)};break;case"StopAgent":i=function(t,i,n,e){return new a(t,i,n,e)};break;case"VOAgent":i=function(t,i,n,e){return new c(t,i,n,e)};break;default:throw new Error("Agent not implemented")}switch(n){case"RandomToRandom":x.init(u.RandomToRandom(o,f.width,f.height,i));break;case"RandomToLine":x.init(u.RandomToLine(o,f.width,f.height,i));break;case"CircleToCircle":x.init(u.CircleToCircle(o,f.width,f.height,i));break;default:throw new Error("Configuration not implemented")}}}},i={};function n(e){if(i[e])return i[e].exports;var o=i[e]={exports:{}};return t[e](o,o.exports,n),o.exports}return n.d=(t,i)=>{for(var e in i)n.o(i,e)&&!n.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:i[e]})},n.o=(t,i)=>Object.prototype.hasOwnProperty.call(t,i),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(775)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,