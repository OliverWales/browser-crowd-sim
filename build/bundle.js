var CrowdSimulator;CrowdSimulator=(()=>{"use strict";var t={240:(t,n,e)=>{e.r(n),e.d(n,{init:()=>f,playPause:()=>y,reconfigure:()=>l,step:()=>x});var o=function(){function t(t){this._renderer=t,this._agents=[]}return t.prototype.init=function(t){this._agents=t.agents},t.prototype.update=function(t){this._agents.forEach((function(n){n.update(t)}))},t.prototype.draw=function(){var t=this;this._renderer.clear(),this._agents.forEach((function(n){t._renderer.drawAgent(n)}))},t}(),i=function(){function t(t){this._context=t.getContext("2d")}return t.prototype.clear=function(){this._context.fillStyle="white",this._context.fillRect(0,0,this._context.canvas.width,this._context.canvas.height)},t.prototype.drawAgent=function(t){var n=t.getPosition(),e=t.getDirection();if(this._context.beginPath(),this._context.arc(n.x,n.y,t.Radius,0,2*Math.PI),0!==e.dx||0!==e.dy){var o=Math.sqrt(Math.pow(e.dx,2)+Math.pow(e.dy,2));this._context.moveTo(n.x,n.y),this._context.lineTo(n.x+t.Radius*e.dx/o,n.y+t.Radius*e.dy/o)}this._context.stroke()},t}(),r=function(){function t(t,n,e){this._position=t,this._goalPosition=n,this.Radius=e,this._direction={dx:0,dy:0}}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.update=function(t){var n={x:this._goalPosition.x-this._position.x,y:this._goalPosition.y-this._position.y},e=Math.sqrt(Math.pow(n.x,2)+Math.pow(n.y,2));e>t/16?(this._direction.dx=n.x/e,this._direction.dy=n.y/e,this._position.x+=t/16*this._direction.dx,this._position.y+=t/16*this._direction.dy):(this._position.x=this._goalPosition.x,this._position.y=this._goalPosition.y)},t}(),a=function(){function t(){}return t.RandomToRandom=function(t,n,e,o){for(var i=[],r=0;r<t;r++){var a=o({x:n*Math.random(),y:e*Math.random()},{x:n*Math.random(),y:e*Math.random()},20);i.push(a)}return{agents:i}},t.RandomToLine=function(t,n,e,o){for(var i=[],r=0;r<t;r++){var a=o({x:n*Math.random(),y:e*Math.random()},{x:(r+1)/(t+1)*n,y:e/2},20);i.push(a)}return{agents:i}},t.CircleToCircle=function(t,n,e,o){for(var i=[],r=n/2,a=e/2,s=e/2-25,h=0;h<t;h++){var u=2*Math.PI*h/t,c=o({x:r+s*Math.cos(u),y:a+s*Math.sin(u)},{x:r+s*Math.cos(u+Math.PI),y:a+s*Math.sin(u+Math.PI)},20);i.push(c)}return{agents:i}},t}(),s=document.getElementById("canvas"),h=document.getElementById("framerate"),u=document.getElementById("playButton"),c=document.getElementById("stepButton"),d=new o(new i(s)),p=!1;function f(){this.reconfigure(0);var t=0,n=0,e=0;window.requestAnimationFrame((function o(i){var r=i-t;t=i,p&&d.update(r),d.draw(),e++,i-n>=250&&(h.textContent="FPS: "+(1e3*e/(i-n)).toFixed(1),e=0,n=i),window.requestAnimationFrame(o)}))}function y(){(p=!p)?(u.textContent="Pause",c.disabled=!0):(u.textContent="Play",c.disabled=!1)}function x(){d.update(1e3/60)}function l(t){switch(p&&this.playPause(),t){case 0:d.init(a.RandomToRandom(25,s.width,s.height,(function(t,n,e){return new r(t,n,e)})));break;case 1:d.init(a.RandomToLine(25,s.width,s.height,(function(t,n,e){return new r(t,n,e)})));break;case 2:d.init(a.CircleToCircle(25,s.width,s.height,(function(t,n,e){return new r(t,n,e)})));break;default:throw new Error("Configuration not implemented")}}}},n={};function e(o){if(n[o])return n[o].exports;var i=n[o]={exports:{}};return t[o](i,i.exports,e),i.exports}return e.d=(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e(240)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,