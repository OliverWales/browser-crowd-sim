var CrowdSimulator;CrowdSimulator=(()=>{"use strict";var t={389:(t,i,n)=>{n.r(i),n.d(i,{init:()=>x,playPause:()=>P,reconfigure:()=>w,step:()=>m});var o=function(){function t(t,i){this._renderer=t,this._agents=i}return t.prototype.init=function(t){this._agents.init(t.agents)},t.prototype.update=function(t){var i=this;this._agents.forEach((function(n){n.update(t,i._agents.getNeighboursInRangeRectilinear(n,200))})),this._agents.init(this._agents.getAll())},t.prototype.draw=function(){var t=this;this._renderer.clear(),this._agents.forEach((function(i){t._renderer.drawAgent(i)}))},t}(),e=function(){function t(t){this._context=t.getContext("2d")}return t.prototype.clear=function(){this._context.fillStyle="white",this._context.fillRect(0,0,this._context.canvas.width,this._context.canvas.height)},t.prototype.drawAgent=function(t){var i=t.getPosition(),n=t.getDirection();if(this._context.beginPath(),t.getIsDone()?this._context.strokeStyle="#00FF00":t.getIsStuck()?this._context.strokeStyle="#FF0000":this._context.strokeStyle="#000000",this._context.arc(i.x,i.y,t.Radius,0,2*Math.PI),0!==n.dx||0!==n.dy){var o=Math.sqrt(Math.pow(n.dx,2)+Math.pow(n.dy,2));this._context.moveTo(i.x,i.y),this._context.lineTo(i.x+t.Radius*n.dx/o,i.y+t.Radius*n.dy/o)}this._context.stroke()},t}(),r=function(){function t(t,i,n,o){this.Id=t,this._position=i,this._goalPosition=n,this.Radius=o,this._direction={dx:0,dy:0},this._isDone=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return!1},t.prototype.update=function(t,i){if(!this._isDone){var n={x:this._goalPosition.x-this._position.x,y:this._goalPosition.y-this._position.y},o=Math.sqrt(Math.pow(n.x,2)+Math.pow(n.y,2));o>60*t/1e3?(this._direction.dx=n.x/o,this._direction.dy=n.y/o,this._position.x+=60*t/1e3*this._direction.dx,this._position.y+=60*t/1e3*this._direction.dy):(this._position.x=this._goalPosition.x,this._position.y=this._goalPosition.y,this._isDone=!0)}},t}(),s=function(){function t(t,i,n,o){this.Id=t,this._position=i,this._goalPosition=n,this.Radius=o,this._direction={dx:0,dy:0},this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){var n=this;if(!this._isDone){var o={x:this._goalPosition.x-this._position.x,y:this._goalPosition.y-this._position.y},e=Math.sqrt(Math.pow(o.x,2)+Math.pow(o.y,2));if(e>60*t/1e3){this._direction.dx=o.x/e,this._direction.dy=o.y/e;var r=this._position.x+20*this._direction.dx,s=this._position.y+20*this._direction.dy;this._isStuck=!1,i.forEach((function(t){t.Id!=n.Id&&n.collides(t,{x:r,y:s})&&(n._isStuck=!0)})),this._isStuck||(this._position.x+=60*t/1e3*this._direction.dx,this._position.y+=60*t/1e3*this._direction.dy)}else this._position.x=this._goalPosition.x,this._position.y=this._goalPosition.y,this._isDone=!0}},t.prototype.collides=function(t,i){var n=i.x,o=i.y,e=this.Radius,r=t.getPosition().x,s=t.getPosition().y,a=t.Radius;return Math.sqrt(Math.pow(n-r,2)+Math.pow(o-s,2))<e+a},t}(),a=function(){function t(){}return t.RandomToRandom=function(t,i,n,o){for(var e=[],r=0;r<t;r++){var s=o(r,{x:i*Math.random(),y:n*Math.random()},{x:i*Math.random(),y:n*Math.random()},20);e.push(s)}return{agents:e}},t.RandomToLine=function(t,i,n,o){for(var e=[],r=0;r<t;r++){var s=o(r,{x:i*Math.random(),y:n*Math.random()},{x:(r+1)/(t+1)*i,y:n/2},20);e.push(s)}return{agents:e}},t.CircleToCircle=function(t,i,n,o){for(var e=[],r=i/2,s=n/2,a=n/2-25,h=0;h<t;h++){var c=2*Math.PI*h/t,u=o(h,{x:r+a*Math.cos(c),y:s+a*Math.sin(c)},{x:r+a*Math.cos(c+Math.PI),y:s+a*Math.sin(c+Math.PI)},20);e.push(u)}return{agents:e}},t}(),h=function(){function t(){}return t.prototype.init=function(t){this._root=this.construct(t,!0)},t.prototype.getAll=function(){return this.get(this._root)},t.prototype.getNeighboursInRangeRectilinear=function(t,i){var n=t.getPosition().x-i,o=t.getPosition().y-i,e=t.getPosition().x+i,r=t.getPosition().y+i;return this.rectilinear(this._root,n,o,e,r,!0).filter((function(i){return i.Id!==t.Id}))},t.prototype.getNeighboursInRangeEuclidean=function(t,i){return this.getNeighboursInRangeRectilinear(t,i).filter((function(n){return Math.pow(t.getPosition().x-n.getPosition().x,2)+Math.pow(t.getPosition().y-n.getPosition().y,2)<=Math.pow(i,2)}))},t.prototype.forEach=function(t){this.apply(this._root,t)},t.prototype.construct=function(t,i){if(0===t.length)return null;var n=Math.floor(t.length/2),o=i?t.sort((function(t,i){return t.getPosition().x-i.getPosition().x})):t.sort((function(t,i){return t.getPosition().y-i.getPosition().y})),e=this.construct(o.slice(0,n),!i),r=this.construct(o.slice(n+1,t.length),!i);return{agent:t[n],left:e,right:r}},t.prototype.insert=function(t,i,n){return null==i?{agent:t,left:null,right:null}:(n?t.getPosition().x<i.agent.getPosition().x?i.left=this.insert(t,i.left,!n):i.right=this.insert(t,i.right,!n):t.getPosition().y<i.agent.getPosition().y?i.left=this.insert(t,i.left,!n):i.right=this.insert(t,i.right,!n),i)},t.prototype.get=function(t){return null==t?[]:this.get(t.left).concat(this.get(t.right)).concat(t.agent)},t.prototype.rectilinear=function(t,i,n,o,e,r){if(null==t)return[];var s=[];return r?(t.agent.getPosition().x<=o&&(s=s.concat(this.rectilinear(t.right,i,n,o,e,!r))),t.agent.getPosition().x>=i&&(s=s.concat(this.rectilinear(t.left,i,n,o,e,!r)))):(t.agent.getPosition().y<=e&&(s=s.concat(this.rectilinear(t.right,i,n,o,e,!r))),t.agent.getPosition().y>=n&&(s=s.concat(this.rectilinear(t.left,i,n,o,e,!r)))),t.agent.getPosition().x>=i&&t.agent.getPosition().y>=n&&t.agent.getPosition().x<=o&&t.agent.getPosition().y<=e&&(s=s.concat(t.agent)),s},t.prototype.apply=function(t,i){null!=t&&(i(t.agent),this.apply(t.left,i),this.apply(t.right,i))},t}(),c=document.getElementById("config"),u=document.getElementById("agentType"),g=document.getElementById("numberOfAgents"),d=document.getElementById("canvas"),p=document.getElementById("framerate"),l=document.getElementById("playButton"),y=document.getElementById("stepButton"),f=new o(new e(d),new h),_=!1;function x(){this.reconfigure();var t=0,i=0,n=0;window.requestAnimationFrame((function o(e){var r=e-t;t=e,_&&f.update(r),f.draw(),n++,e-i>=250&&(p.textContent="FPS: "+(1e3*n/(e-i)).toFixed(1),n=0,i=e),window.requestAnimationFrame(o)}))}function P(){(_=!_)?(l.textContent="Pause",y.disabled=!0):(l.textContent="Play",y.disabled=!1)}function m(){f.update(1e3/60)}function w(){var t;_&&this.playPause();var i,n=c.value,o=u.value,e=null!==(t=parseInt(g.value))&&void 0!==t?t:0;switch(o){case"BasicAgent":i=function(t,i,n,o){return new r(t,i,n,o)};break;case"StopAgent":i=function(t,i,n,o){return new s(t,i,n,o)};break;default:throw new Error("Agent not implemented")}switch(n){case"RandomToRandom":f.init(a.RandomToRandom(e,d.width,d.height,i));break;case"RandomToLine":f.init(a.RandomToLine(e,d.width,d.height,i));break;case"CircleToCircle":f.init(a.CircleToCircle(e,d.width,d.height,i));break;default:throw new Error("Configuration not implemented")}}}},i={};function n(o){if(i[o])return i[o].exports;var e=i[o]={exports:{}};return t[o](e,e.exports,n),e.exports}return n.d=(t,i)=>{for(var o in i)n.o(i,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:i[o]})},n.o=(t,i)=>Object.prototype.hasOwnProperty.call(t,i),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(389)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,