var CrowdSimulator;CrowdSimulator=(()=>{"use strict";var t={775:(t,i,n)=>{n.r(i),n.d(i,{init:()=>P,playPause:()=>v,reconfigure:()=>b,step:()=>w});var e=function(){function t(t,i){this._renderer=t,this._agents=i}return t.prototype.init=function(t){this._agents.init(t.agents)},t.prototype.update=function(t){var i=this;this._agents.forEach((function(n){n.update(t,i._agents.getNeighboursInRangeRectilinear(n,400))})),this._agents.forEach((function(t){t.finalize()})),this._agents.init(this._agents.getAll())},t.prototype.draw=function(){var t=this;this._renderer.clear(),this._agents.forEach((function(i){t._renderer.drawAgent(i)}))},t}(),o=function(){function t(t){this._context=t.getContext("2d")}return t.prototype.clear=function(){this._context.fillStyle="white",this._context.fillRect(0,0,this._context.canvas.width,this._context.canvas.height)},t.prototype.drawAgent=function(t){var i=t.getPosition(),n=t.getDirection();this._context.beginPath(),t.getIsDone()?this._context.strokeStyle="#00FF00":t.getIsStuck()?this._context.strokeStyle="#FF0000":this._context.strokeStyle="#000000",this._context.arc(i.x,i.y,t.Radius,0,2*Math.PI);var e=n.magnitude();if(0!==e){this._context.moveTo(i.x,i.y);var o=i.add(n.divide(e).multiply(t.Radius));this._context.lineTo(o.x,o.y)}this._context.stroke()},t}(),r=function(){function t(t,i){this.x=t,this.y=i}return t.prototype.copy=function(i){return new t(i.x,i.y)},t.prototype.add=function(i){return new t(this.x+i.x,this.y+i.y)},t.prototype.subtract=function(i){return new t(this.x-i.x,this.y-i.y)},t.prototype.multiply=function(i){return new t(this.x*i,this.y*i)},t.prototype.divide=function(i){return new t(this.x/i,this.y/i)},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.magnitudeSqrd=function(){return Math.pow(this.x,2)+Math.pow(this.y,2)},t.prototype.magnitude=function(){return Math.sqrt(this.magnitudeSqrd())},t.prototype.normalise=function(){var i=this.magnitude();return 0==i?new t(0,0):this.divide(i)},t.prototype.sample=function(i){var n=Math.sqrt(Math.random())*i,e=2*Math.PI*Math.random();return new t(this.x+n*Math.cos(e),this.y+n*Math.sin(e))},t}(),s=function(){function t(t,i,n,e){this.Id=t,this._position=i,this._goalPosition=n,this.Radius=e,this._direction=new r(0,0),this._nextPosition=this._position,this._nextDirection=new r(0,0),this._isDone=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return!1},t.prototype.update=function(t,i){if(!this._isDone){var n=this._goalPosition.subtract(this._position);n.magnitude()>60*t/1e3?(this._nextDirection=n.normalise(),this._nextPosition=this._position.add(this._nextDirection.multiply(60*t/1e3))):(this._nextPosition=this._goalPosition,this._isDone=!0)}},t.prototype.finalize=function(){this._direction=this._nextDirection,this._position=this._nextPosition},t}(),a=function(){function t(t,i,n,e){this.Id=t,this._position=i,this._goalPosition=n,this.Radius=e,this._direction=new r(0,0),this._nextPosition=this._position,this._nextDirection=new r(0,0),this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){var n=this;if(!this._isDone){var e=this._goalPosition.subtract(this._position);if(e.magnitude()>60*t/1e3){this._nextDirection=e.normalise();var o=this._position.add(this._nextDirection.multiply(20));this._isStuck=!1,i.forEach((function(t){t.Id!=n.Id&&n.collides(t,o)&&(n._isStuck=!0)})),this._isStuck||(this._nextPosition=this._position.add(this._nextDirection.multiply(60*t/1e3)))}else this._nextPosition=this._goalPosition,this._isDone=!0}},t.prototype.finalize=function(){this._direction=this._nextDirection,this._position=this._nextPosition},t.prototype.collides=function(t,i){return t.getPosition().subtract(i).magnitude()<t.Radius+this.Radius},t}(),h=function(){function t(){}return t.RandomToRandom=function(t,i,n,e){for(var o=[],s=0;s<t;s++){var a=e(s,new r(i*Math.random(),n*Math.random()),new r(i*Math.random(),n*Math.random()),20);o.push(a)}return{agents:o}},t.RandomToLine=function(t,i,n,e){for(var o=[],s=0;s<t;s++){var a=e(s,new r(i*Math.random(),n*Math.random()),new r((s+1)/(t+1)*i,n/2),20);o.push(a)}return{agents:o}},t.CircleToCircle=function(t,i,n,e){for(var o=[],s=i/2,a=n/2,h=n/2-25,u=0;u<t;u++){var c=2*Math.PI*u/t,d=e(u,new r(s+h*Math.cos(c),a+h*Math.sin(c)),new r(s+h*Math.cos(c+Math.PI),a+h*Math.sin(c+Math.PI)),20);o.push(d)}return{agents:o}},t}(),u=function(){function t(){}return t.prototype.init=function(t){this._agents=t,this._root=this.constructTree(this._agents,!0)},t.prototype.getAll=function(){return this._agents},t.prototype.getNeighboursInRangeRectilinear=function(t,i){var n=t.getPosition().x-i,e=t.getPosition().y-i,o=t.getPosition().x+i,r=t.getPosition().y+i;return this.rangeSearch(this._root,n,e,o,r,!0).filter((function(i){return i.Id!==t.Id}))},t.prototype.getNeighboursInRangeEuclidean=function(t,i){return this.getNeighboursInRangeRectilinear(t,i).filter((function(n){return t.getPosition().subtract(n.getPosition()).magnitudeSqrd()<=Math.pow(i,2)}))},t.prototype.forEach=function(t){this._agents.forEach(t)},t.prototype.constructTree=function(t,i){if(0===t.length)return null;var n=Math.floor(t.length/2),e=i?t.sort((function(t,i){return t.getPosition().x-i.getPosition().x})):t.sort((function(t,i){return t.getPosition().y-i.getPosition().y})),o=this.constructTree(e.slice(0,n),!i),r=this.constructTree(e.slice(n+1,t.length),!i);return{agent:t[n],left:o,right:r}},t.prototype.rangeSearch=function(t,i,n,e,o,r){if(null==t)return[];var s=[];return r?(t.agent.getPosition().x<=e&&(s=s.concat(this.rangeSearch(t.right,i,n,e,o,!r))),t.agent.getPosition().x>=i&&(s=s.concat(this.rangeSearch(t.left,i,n,e,o,!r)))):(t.agent.getPosition().y<=o&&(s=s.concat(this.rangeSearch(t.right,i,n,e,o,!r))),t.agent.getPosition().y>=n&&(s=s.concat(this.rangeSearch(t.left,i,n,e,o,!r)))),t.agent.getPosition().x>=i&&t.agent.getPosition().y>=n&&t.agent.getPosition().x<=e&&t.agent.getPosition().y<=o&&s.push(t.agent),s},t}(),c=function(){function t(t,i,n,e){this.MAX_VELOCITY=1,this.MAX_ACCELERATION=.5,this.Id=t,this._position=i,this._goalPosition=n,this.Radius=e,this._direction=new r(0,0),this._nextPosition=this._position,this._nextDirection=new r(0,0),this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){if(this._isStuck=!1,!this._isDone){for(var n,e,o=this.getPreferredVelocity().multiply(.5),s=!0,a=0;a<i.length;a++)if(null==(c=this.getVelocityObstacle(i[a]))||this.isInside(o,c)){s=!1,n=c,e=a;break}if(s)return this._nextDirection=o,this._nextPosition=this._position.add(o),void(this._nextPosition.subtract(this._goalPosition).magnitudeSqrd()<.1&&(this._isDone=!0,this._nextPosition=this._goalPosition,this._nextDirection=new r(0,0)));if(null!=n){var h=this.getClosestPointOnLine(n.vertex,n.t1,o);for(s=!0,a=0;a<i.length;a++)if(a!=e&&(null==(c=this.getVelocityObstacle(i[a]))||this.isInside(h,c))){s=!1;break}if(s)return this._nextDirection=h,void(this._nextPosition=this._position.add(h));var u=this.getClosestPointOnLine(n.vertex,n.t2,o);for(s=!0,a=0;a<i.length;a++){var c;if(a!=e&&(null==(c=this.getVelocityObstacle(i[a]))||this.isInside(u,c))){s=!1;break}}if(s)return this._nextDirection=u,void(this._nextPosition=this._position.add(u))}this._nextDirection=new r(0,0),this._isStuck=!0}},t.prototype.finalize=function(){this._direction=this._nextDirection,this._position=this._nextPosition},t.prototype.getPreferredVelocity=function(){var t=this._goalPosition.subtract(this._position),i=t.magnitude();return i>1?t.divide(i):t},t.prototype.getVelocityObstacle=function(t){var i=t.getDirection(),n=t.Radius+this.Radius,e=t.getPosition().subtract(this.getPosition()).add(i),o=i.subtract(e),s=o.magnitude();if(s<n)return null;var a=Math.acos(n/s),h=Math.atan2(o.y,o.x),u=h+a,c=h-a;return{vertex:i,t1:new r(e.x+n*Math.cos(u),e.y+n*Math.sin(u)),t2:new r(e.x+n*Math.cos(c),e.y+n*Math.sin(c))}},t.prototype.isInside=function(t,i){var n=(i.t1.x-i.vertex.x)*(t.y-i.vertex.y)-(i.t1.y-i.vertex.y)*(t.x-i.vertex.x),e=(i.t2.x-i.vertex.x)*(t.y-i.vertex.y)-(i.t2.y-i.vertex.y)*(t.x-i.vertex.x);return n>0&&e<0},t.prototype.getClosestPointOnLine=function(t,i,n){var e=i.normalise(),o=n.subtract(t).dot(e);return t.add(e.multiply(o))},t}(),d=document.getElementById("config"),p=document.getElementById("agentType"),g=document.getElementById("numberOfAgents"),l=document.getElementById("canvas"),f=document.getElementById("framerate"),_=document.getElementById("playButton"),y=document.getElementById("stepButton"),x=new e(new o(l),new u),m=!1;function P(){this.reconfigure();var t=0,i=0,n=0;window.requestAnimationFrame((function e(o){var r=o-t;t=o,m&&x.update(r),x.draw(),n++,o-i>=250&&(f.textContent="FPS: "+(1e3*n/(o-i)).toFixed(1),n=0,i=o),window.requestAnimationFrame(e)}))}function v(){(m=!m)?(_.textContent="Pause",y.disabled=!0):(_.textContent="Play",y.disabled=!1)}function w(){x.update(1e3/60)}function b(){var t;m&&this.playPause();var i,n=d.value,e=p.value,o=null!==(t=parseInt(g.value))&&void 0!==t?t:0;switch(e){case"BasicAgent":i=function(t,i,n,e){return new s(t,i,n,e)};break;case"StopAgent":i=function(t,i,n,e){return new a(t,i,n,e)};break;case"VOAgent":i=function(t,i,n,e){return new c(t,i,n,e)};break;default:throw new Error("Agent not implemented")}switch(n){case"RandomToRandom":x.init(h.RandomToRandom(o,l.width,l.height,i));break;case"RandomToLine":x.init(h.RandomToLine(o,l.width,l.height,i));break;case"CircleToCircle":x.init(h.CircleToCircle(o,l.width,l.height,i));break;default:throw new Error("Configuration not implemented")}}}},i={};function n(e){if(i[e])return i[e].exports;var o=i[e]={exports:{}};return t[e](o,o.exports,n),o.exports}return n.d=(t,i)=>{for(var e in i)n.o(i,e)&&!n.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:i[e]})},n.o=(t,i)=>Object.prototype.hasOwnProperty.call(t,i),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(775)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,