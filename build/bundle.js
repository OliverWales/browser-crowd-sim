var CrowdSimulator;CrowdSimulator=(()=>{"use strict";var t={999:(t,e,n)=>{n.r(e),n.d(e,{init:()=>h,playPause:()=>f,step:()=>l});var o=function(){function t(t){this._renderer=t,this._agents=[]}return t.prototype.addAgent=function(t){this._agents.push(t)},t.prototype.update=function(t){this._agents.forEach((function(e){e.update(t)}))},t.prototype.draw=function(){var t=this;this._renderer.clear(),this._agents.forEach((function(e){t._renderer.drawAgent(e)}))},t}(),i=function(){function t(t){this._context=t.getContext("2d")}return t.prototype.clear=function(){this._context.fillStyle="white",this._context.fillRect(0,0,this._context.canvas.width,this._context.canvas.height)},t.prototype.drawAgent=function(t){var e=t.getPosition();this._context.beginPath(),this._context.arc(e.x,e.y,50,0,2*Math.PI),this._context.stroke()},t}(),r=function(){function t(t){this._position=t}return t.prototype.getPosition=function(){return this._position},t.prototype.update=function(t){this._position.x+=t/10,this._position.x>500&&(this._position.x=0)},t}(),a=document.getElementById("canvas"),s=document.getElementById("framerate"),u=document.getElementById("playButton"),c=document.getElementById("stepButton"),d=new o(new i(a)),p=!1;function h(){var t=new r({x:a.width/2,y:a.height/2});d.addAgent(t);var e=0,n=0,o=0;window.requestAnimationFrame((function t(i){var r=i-e;e=i,p&&d.update(r),d.draw(),o++,i-n>=250&&(s.textContent="FPS: "+(1e3*o/(i-n)).toFixed(1),o=0,n=i),window.requestAnimationFrame(t)}))}function f(){(p=!p)?(u.textContent="Pause",c.disabled=!0):(u.textContent="Play",c.disabled=!1)}function l(){d.update(1e3/60)}}},e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={exports:{}};return t[o](i,i.exports,n),i.exports}return n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(999)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,