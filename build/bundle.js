var CrowdSimulator;CrowdSimulator=(()=>{"use strict";var t={389:(t,i,n)=>{n.r(i),n.d(i,{init:()=>x,playPause:()=>P,reconfigure:()=>w,step:()=>m});var e=function(){function t(t,i){this._renderer=t,this._agents=i}return t.prototype.init=function(t){this._agents.init(t.agents)},t.prototype.update=function(t){var i=this;this._agents.forEach((function(n){n.update(t,i._agents.getNeighboursInRangeRectilinear(n,200))})),this._agents.init(this._agents.getAll())},t.prototype.draw=function(){var t=this;this._renderer.clear(),this._agents.forEach((function(i){t._renderer.drawAgent(i)}))},t}(),o=function(){function t(t){this._context=t.getContext("2d")}return t.prototype.clear=function(){this._context.fillStyle="white",this._context.fillRect(0,0,this._context.canvas.width,this._context.canvas.height)},t.prototype.drawAgent=function(t){var i=t.getPosition(),n=t.getDirection();if(this._context.beginPath(),t.getIsDone()?this._context.strokeStyle="#00FF00":t.getIsStuck()?this._context.strokeStyle="#FF0000":this._context.strokeStyle="#000000",this._context.arc(i.x,i.y,t.Radius,0,2*Math.PI),0!==n.dx||0!==n.dy){var e=Math.sqrt(Math.pow(n.dx,2)+Math.pow(n.dy,2));this._context.moveTo(i.x,i.y),this._context.lineTo(i.x+t.Radius*n.dx/e,i.y+t.Radius*n.dy/e)}this._context.stroke()},t}(),r=function(){function t(t,i,n,e){this.Id=t,this._position=i,this._goalPosition=n,this.Radius=e,this._direction={dx:0,dy:0},this._isDone=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return!1},t.prototype.update=function(t,i){if(!this._isDone){var n={x:this._goalPosition.x-this._position.x,y:this._goalPosition.y-this._position.y},e=Math.sqrt(Math.pow(n.x,2)+Math.pow(n.y,2));e>60*t/1e3?(this._direction.dx=n.x/e,this._direction.dy=n.y/e,this._position.x+=60*t/1e3*this._direction.dx,this._position.y+=60*t/1e3*this._direction.dy):(this._position.x=this._goalPosition.x,this._position.y=this._goalPosition.y,this._isDone=!0)}},t}(),s=function(){function t(t,i,n,e){this.Id=t,this._position=i,this._goalPosition=n,this.Radius=e,this._direction={dx:0,dy:0},this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){var n=this;if(!this._isDone){var e={x:this._goalPosition.x-this._position.x,y:this._goalPosition.y-this._position.y},o=Math.sqrt(Math.pow(e.x,2)+Math.pow(e.y,2));if(o>60*t/1e3){this._direction.dx=e.x/o,this._direction.dy=e.y/o;var r=this._position.x+20*this._direction.dx,s=this._position.y+20*this._direction.dy;this._isStuck=!1,i.forEach((function(t){t.Id!=n.Id&&n.collides(t,{x:r,y:s})&&(n._isStuck=!0)})),this._isStuck||(this._position.x+=60*t/1e3*this._direction.dx,this._position.y+=60*t/1e3*this._direction.dy)}else this._position.x=this._goalPosition.x,this._position.y=this._goalPosition.y,this._isDone=!0}},t.prototype.collides=function(t,i){var n=i.x,e=i.y,o=this.Radius,r=t.getPosition().x,s=t.getPosition().y,a=t.Radius;return Math.sqrt(Math.pow(n-r,2)+Math.pow(e-s,2))<o+a},t}(),a=function(){function t(){}return t.RandomToRandom=function(t,i,n,e){for(var o=[],r=0;r<t;r++){var s=e(r,{x:i*Math.random(),y:n*Math.random()},{x:i*Math.random(),y:n*Math.random()},20);o.push(s)}return{agents:o}},t.RandomToLine=function(t,i,n,e){for(var o=[],r=0;r<t;r++){var s=e(r,{x:i*Math.random(),y:n*Math.random()},{x:(r+1)/(t+1)*i,y:n/2},20);o.push(s)}return{agents:o}},t.CircleToCircle=function(t,i,n,e){for(var o=[],r=i/2,s=n/2,a=n/2-25,h=0;h<t;h++){var c=2*Math.PI*h/t,u=e(h,{x:r+a*Math.cos(c),y:s+a*Math.sin(c)},{x:r+a*Math.cos(c+Math.PI),y:s+a*Math.sin(c+Math.PI)},20);o.push(u)}return{agents:o}},t}(),h=function(){function t(){}return t.prototype.init=function(t){this._agents=t,this._root=this.constructTree(this._agents,!0)},t.prototype.getAll=function(){return this._agents},t.prototype.getNeighboursInRangeRectilinear=function(t,i){var n=t.getPosition().x-i,e=t.getPosition().y-i,o=t.getPosition().x+i,r=t.getPosition().y+i;return this.rangeSearch(this._root,n,e,o,r,!0).filter((function(i){return i.Id!==t.Id}))},t.prototype.getNeighboursInRangeEuclidean=function(t,i){return this.getNeighboursInRangeRectilinear(t,i).filter((function(n){return Math.pow(t.getPosition().x-n.getPosition().x,2)+Math.pow(t.getPosition().y-n.getPosition().y,2)<=Math.pow(i,2)}))},t.prototype.forEach=function(t){this._agents.forEach(t)},t.prototype.constructTree=function(t,i){if(0===t.length)return null;var n=Math.floor(t.length/2),e=i?t.sort((function(t,i){return t.getPosition().x-i.getPosition().x})):t.sort((function(t,i){return t.getPosition().y-i.getPosition().y})),o=this.constructTree(e.slice(0,n),!i),r=this.constructTree(e.slice(n+1,t.length),!i);return{agent:t[n],left:o,right:r}},t.prototype.rangeSearch=function(t,i,n,e,o,r){if(null==t)return[];var s=[];return r?(t.agent.getPosition().x<=e&&(s=s.concat(this.rangeSearch(t.right,i,n,e,o,!r))),t.agent.getPosition().x>=i&&(s=s.concat(this.rangeSearch(t.left,i,n,e,o,!r)))):(t.agent.getPosition().y<=o&&(s=s.concat(this.rangeSearch(t.right,i,n,e,o,!r))),t.agent.getPosition().y>=n&&(s=s.concat(this.rangeSearch(t.left,i,n,e,o,!r)))),t.agent.getPosition().x>=i&&t.agent.getPosition().y>=n&&t.agent.getPosition().x<=e&&t.agent.getPosition().y<=o&&s.push(t.agent),s},t}(),c=document.getElementById("config"),u=document.getElementById("agentType"),g=document.getElementById("numberOfAgents"),d=document.getElementById("canvas"),p=document.getElementById("framerate"),y=document.getElementById("playButton"),f=document.getElementById("stepButton"),l=new e(new o(d),new h),_=!1;function x(){this.reconfigure();var t=0,i=0,n=0;window.requestAnimationFrame((function e(o){var r=o-t;t=o,_&&l.update(r),l.draw(),n++,o-i>=250&&(p.textContent="FPS: "+(1e3*n/(o-i)).toFixed(1),n=0,i=o),window.requestAnimationFrame(e)}))}function P(){(_=!_)?(y.textContent="Pause",f.disabled=!0):(y.textContent="Play",f.disabled=!1)}function m(){l.update(1e3/60)}function w(){var t;_&&this.playPause();var i,n=c.value,e=u.value,o=null!==(t=parseInt(g.value))&&void 0!==t?t:0;switch(e){case"BasicAgent":i=function(t,i,n,e){return new r(t,i,n,e)};break;case"StopAgent":i=function(t,i,n,e){return new s(t,i,n,e)};break;default:throw new Error("Agent not implemented")}switch(n){case"RandomToRandom":l.init(a.RandomToRandom(o,d.width,d.height,i));break;case"RandomToLine":l.init(a.RandomToLine(o,d.width,d.height,i));break;case"CircleToCircle":l.init(a.CircleToCircle(o,d.width,d.height,i));break;default:throw new Error("Configuration not implemented")}}}},i={};function n(e){if(i[e])return i[e].exports;var o=i[e]={exports:{}};return t[e](o,o.exports,n),o.exports}return n.d=(t,i)=>{for(var e in i)n.o(i,e)&&!n.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:i[e]})},n.o=(t,i)=>Object.prototype.hasOwnProperty.call(t,i),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(389)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,