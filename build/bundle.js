var CrowdSimulator;CrowdSimulator=(()=>{"use strict";var t={775:(t,i,e)=>{e.r(i),e.d(i,{init:()=>x,playPause:()=>w,reconfigure:()=>b,step:()=>P});var n=function(){function t(t,i){this._renderer=t,this._agents=i}return t.prototype.init=function(t){this._agents.init(t.agents)},t.prototype.update=function(t){var i=this;this._agents.forEach((function(e){e.update(t,i._agents.getNeighboursInRangeRectilinear(e,300))})),this._agents.init(this._agents.getAll())},t.prototype.draw=function(){var t=this;this._renderer.clear(),this._agents.forEach((function(i){t._renderer.drawAgent(i)}))},t}(),o=function(){function t(t){this._context=t.getContext("2d")}return t.prototype.clear=function(){this._context.fillStyle="white",this._context.fillRect(0,0,this._context.canvas.width,this._context.canvas.height)},t.prototype.drawAgent=function(t){var i=t.getPosition(),e=t.getDirection();this._context.beginPath(),t.getIsDone()?this._context.strokeStyle="#00FF00":t.getIsStuck()?this._context.strokeStyle="#FF0000":this._context.strokeStyle="#000000",this._context.arc(i.x,i.y,t.Radius,0,2*Math.PI);var n=e.magnitude();if(0!==n){this._context.moveTo(i.x,i.y);var o=i.add(e.divide(n).multiply(t.Radius));this._context.lineTo(o.x,o.y)}this._context.stroke()},t}(),r=function(){function t(t,i){this.x=t,this.y=i}return t.prototype.copy=function(i){return new t(i.x,i.y)},t.prototype.add=function(i){return new t(this.x+i.x,this.y+i.y)},t.prototype.subtract=function(i){return new t(this.x-i.x,this.y-i.y)},t.prototype.multiply=function(i){return new t(this.x*i,this.y*i)},t.prototype.divide=function(i){return new t(this.x/i,this.y/i)},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.magnitudeSqrd=function(){return Math.pow(this.x,2)+Math.pow(this.y,2)},t.prototype.magnitude=function(){return Math.sqrt(this.magnitudeSqrd())},t.prototype.normalise=function(){var i=this.magnitude();return 0==i?new t(0,0):this.divide(i)},t.prototype.sample=function(i){var e=Math.sqrt(Math.random())*i,n=2*Math.PI*Math.random();return new t(this.x+e*Math.cos(n),this.y+e*Math.sin(n))},t}(),s=function(){function t(t,i,e,n){this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new r(0,0),this._isDone=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return!1},t.prototype.update=function(t,i){if(!this._isDone){var e=this._goalPosition.subtract(this._position);e.magnitude()>60*t/1e3?(this._direction=e.normalise(),this._position=this._position.add(this._direction.multiply(60*t/1e3))):(this._position=this._goalPosition,this._isDone=!0)}},t}(),a=function(){function t(t,i,e,n){this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new r(0,0),this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){var e=this;if(!this._isDone){var n=this._goalPosition.subtract(this._position);if(n.magnitude()>60*t/1e3){this._direction=n.normalise();var o=this._position.add(this._direction.multiply(20));this._isStuck=!1,i.forEach((function(t){t.Id!=e.Id&&e.collides(t,o)&&(e._isStuck=!0)})),this._isStuck||(this._position=this._position.add(this._direction.multiply(60*t/1e3)))}else this._position=this._goalPosition,this._isDone=!0}},t.prototype.collides=function(t,i){return t.getPosition().subtract(i).magnitude()<t.Radius+this.Radius},t}(),u=function(){function t(){}return t.RandomToRandom=function(t,i,e,n){for(var o=[],r=this.poissonDiskSample(i,e,t,50),s=this.poissonDiskSample(i,e,t,50),a=0;a<t;a++){var u=n(a,r[a],s[a],20);o.push(u)}return{agents:o}},t.RandomToLine=function(t,i,e,n){for(var o=[],s=this.poissonDiskSample(i,e,t,50),a=0;a<t;a++){var u=n(a,s[a],new r((a+1)/(t+1)*i,e/2),20);o.push(u)}return{agents:o}},t.CircleToCircle=function(t,i,e,n){for(var o=[],s=i/2,a=e/2,u=e/2-25,h=0;h<t;h++){var c=2*Math.PI*h/t,d=n(h,new r(s+u*Math.cos(c),a+u*Math.sin(c)),new r(s+u*Math.cos(c+Math.PI),a+u*Math.sin(c+Math.PI)),20);o.push(d)}return{agents:o}},t.GridToGrid=function(t,i,e,n){for(var o=[],s=Math.ceil(t/8),a=i-50-80*(s-1),u=e/2-120,h=0,c=0;c<s;c++){for(var d=0;d<4;d++){var g=new r(50+80*c,u+80*d),p=new r(a+80*c,u+80*d);if(o.push(n(h,g,p,20)),++h>=t)break;if(o.push(n(h,p,g,20)),++h>=t)break}if(h>=t)break}return{agents:o}},t.poissonDiskSample=function(t,i,e,n){for(var o=[],s=function(){for(var e,s=!0;s;)s=!1,e=new r(t*Math.random(),i*Math.random()),o.forEach((function(t){e.subtract(t).magnitudeSqrd()<Math.pow(n,2)&&(s=!0)}));o.push(e)},a=0;a<e;a++)s();return o},t}(),h=function(){function t(){}return t.prototype.init=function(t){this._agents=t,this._root=this.constructTree(this._agents,!0)},t.prototype.getAll=function(){return this._agents},t.prototype.getNeighboursInRangeRectilinear=function(t,i){var e=t.getPosition().x-i,n=t.getPosition().y-i,o=t.getPosition().x+i,r=t.getPosition().y+i;return this.rangeSearch(this._root,e,n,o,r,!0).filter((function(i){return i.Id!==t.Id}))},t.prototype.getNeighboursInRangeEuclidean=function(t,i){return this.getNeighboursInRangeRectilinear(t,i).filter((function(e){return t.getPosition().subtract(e.getPosition()).magnitudeSqrd()<=Math.pow(i,2)}))},t.prototype.forEach=function(t){this._agents.forEach(t)},t.prototype.constructTree=function(t,i){if(0===t.length)return null;var e=Math.floor(t.length/2),n=i?t.sort((function(t,i){return t.getPosition().x-i.getPosition().x})):t.sort((function(t,i){return t.getPosition().y-i.getPosition().y})),o=this.constructTree(n.slice(0,e),!i),r=this.constructTree(n.slice(e+1,t.length),!i);return{agent:t[e],left:o,right:r}},t.prototype.rangeSearch=function(t,i,e,n,o,r){if(null==t)return[];var s=[];return r?(t.agent.getPosition().x<=n&&(s=s.concat(this.rangeSearch(t.right,i,e,n,o,!r))),t.agent.getPosition().x>=i&&(s=s.concat(this.rangeSearch(t.left,i,e,n,o,!r)))):(t.agent.getPosition().y<=o&&(s=s.concat(this.rangeSearch(t.right,i,e,n,o,!r))),t.agent.getPosition().y>=e&&(s=s.concat(this.rangeSearch(t.left,i,e,n,o,!r)))),t.agent.getPosition().x>=i&&t.agent.getPosition().y>=e&&t.agent.getPosition().x<=n&&t.agent.getPosition().y<=o&&s.push(t.agent),s},t}(),c=function(){function t(t,i,e,n){this.MAX_VELOCITY=1,this.MAX_ACCELERATION=.5,this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new r(0,0),this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){if(!this._isDone){this._isStuck=!1;for(var e,n,o=.5,s=this.getPreferredVelocity(o),a=!0,u=0;u<i.length;u++)if(null==(_=this.getVelocityObstacle(i[u]))||this.isInside(s,_)){a=!1,e=_,n=u;break}if(a)return this._direction=s,this._position=this._position.add(s),void(this._position.subtract(this._goalPosition).magnitudeSqrd()<.1&&(this._isDone=!0,this._position=this._goalPosition,this._direction=new r(0,0)));if(null!=e){var h=this.getClosestPointOnLine(e.vertex,e.tangent1,s);if(h.magnitude()<=o){for(a=!0,u=0;u<i.length;u++)if(u!=n&&(null==(d=this.getVelocityObstacle(i[u]))||this.isInside(h,d))){a=!1;break}if(a)return this._direction=h,void(this._position=this._position.add(h))}var c=this.getClosestPointOnLine(e.vertex,e.tangent2,s);if(h.magnitude()<=o){for(a=!0,u=0;u<i.length;u++){var d;if(u!=n&&(null==(d=this.getVelocityObstacle(i[u]))||this.isInside(c,d))){a=!1;break}}if(a)return this._direction=c,void(this._position=this._position.add(c))}}var g=1/0,p=new r(0,0);for(u=0;u<100;u++){for(var f=new r(0,0).sample(o),l=1/0,y=0;y<i.length;y++){var _,v=i[y];if(null==(_=this.getVelocityObstacle(v))||this.isInside(f,_)){var m=this.getFirstRayCircleIntersection(v.getPosition(),this.Radius+v.Radius,this._position,f);if(m<l&&0==(l=m))return}}var x=50/l+s.subtract(f).magnitude();x<g&&(g=x,p=f)}0==p.magnitude()&&(this._isStuck=!0),this._direction=p,this._position=this._position.add(p)}},t.prototype.getPreferredVelocity=function(t){var i=this._goalPosition.subtract(this._position),e=i.magnitude();return e>t?i.divide(e/t):i},t.prototype.getVelocityObstacle=function(t){var i=t.getDirection(),e=t.getPosition().subtract(this._position).add(i),n=t.Radius+this.Radius,o=i.subtract(e),s=o.magnitude();if(s<n)return null;var a=Math.acos(n/s),u=Math.atan2(o.y,o.x),h=u+a,c=u-a;return{vertex:i,tangent1:new r(e.x+n*Math.cos(h),e.y+n*Math.sin(h)),tangent2:new r(e.x+n*Math.cos(c),e.y+n*Math.sin(c))}},t.prototype.isInside=function(t,i){var e=(i.tangent1.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent1.y-i.vertex.y)*(t.x-i.vertex.x),n=(i.tangent2.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent2.y-i.vertex.y)*(t.x-i.vertex.x);return e>0&&n<0},t.prototype.getClosestPointOnLine=function(t,i,e){var n=i.normalise(),o=e.subtract(t).dot(n);return t.add(n.multiply(o))},t.prototype.getFirstRayCircleIntersection=function(t,i,e,n){var o=e.subtract(t),r=n.dot(n),s=2*n.dot(o),a=o.dot(o)-Math.pow(i,2),u=Math.pow(s,2)-4*r*a;if(u<0)return 1/0;var h=(-s-Math.sqrt(u))/2*r;return h<0?1/0:h},t}(),d=document.getElementById("config"),g=document.getElementById("agentType"),p=document.getElementById("numberOfAgents"),f=document.getElementById("canvas"),l=document.getElementById("framerate"),y=document.getElementById("playButton"),_=document.getElementById("stepButton"),v=new n(new o(f),new h),m=!1;function x(){this.reconfigure();var t=0,i=0,e=0;window.requestAnimationFrame((function n(o){var r=o-t;t=o,m&&v.update(r),v.draw(),e++,o-i>=250&&(l.textContent="FPS: "+(1e3*e/(o-i)).toFixed(1),e=0,i=o),window.requestAnimationFrame(n)}))}function w(){(m=!m)?(y.textContent="Pause",_.disabled=!0):(y.textContent="Play",_.disabled=!1)}function P(){v.update(1e3/60)}function b(){var t;m&&this.playPause();var i,e=d.value,n=g.value,o=null!==(t=parseInt(p.value))&&void 0!==t?t:0;switch(n){case"BasicAgent":i=function(t,i,e,n){return new s(t,i,e,n)};break;case"StopAgent":i=function(t,i,e,n){return new a(t,i,e,n)};break;case"VOAgent":i=function(t,i,e,n){return new c(t,i,e,n)};break;default:throw new Error("Agent not implemented")}switch(e){case"RandomToRandom":v.init(u.RandomToRandom(o,f.width,f.height,i));break;case"RandomToLine":v.init(u.RandomToLine(o,f.width,f.height,i));break;case"CircleToCircle":v.init(u.CircleToCircle(o,f.width,f.height,i));break;case"GridToGrid":v.init(u.GridToGrid(o,f.width,f.height,i));break;default:throw new Error("Configuration not implemented")}}}},i={};function e(n){if(i[n])return i[n].exports;var o=i[n]={exports:{}};return t[n](o,o.exports,e),o.exports}return e.d=(t,i)=>{for(var n in i)e.o(i,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:i[n]})},e.o=(t,i)=>Object.prototype.hasOwnProperty.call(t,i),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e(775)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,