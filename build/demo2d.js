var CrowdSimulator;CrowdSimulator=(()=>{"use strict";var t={725:(t,i,e)=>{e.r(i),e.d(i,{init:()=>D,playPause:()=>M,reconfigure:()=>I,step:()=>R});var n=function(){function t(t,i){this._renderer=t,this._agents=i}return t.prototype.init=function(t){this._agents.init(t.agents)},t.prototype.update=function(t){var i=this;this._agents.forEach((function(e){e.update(t,i._agents.getNeighboursInRangeEuclidean(e,300))})),this._agents.init(this._agents.getAll())},t.prototype.draw=function(){this._renderer.clear(),this._renderer.drawAgents(this._agents)},t}(),o=function(){function t(t){var i=this;this.cameraDist=800,this.mouseDown=function(t){i.drag=!0,i.oldX=t.pageX,i.oldY=t.pageY},this.mouseUp=function(t){i.drag=!1,t.preventDefault()},this.mouseMove=function(t){if(!i.drag)return!1;i.xPan+=t.pageX-i.oldX,i.yPan+=t.pageY-i.oldY,i.oldX=t.pageX,i.oldY=t.pageY},this.mouseScroll=function(t){i.cameraDist+=t.deltaY,i.cameraDist<0&&(i.cameraDist=0),t.preventDefault(),console.log("Scroll")},this.canvas=t,this.context=this.canvas.getContext("2d"),this.xPan=this.canvas.width/2,this.yPan=this.canvas.height/2,this.canvas.addEventListener("mousedown",this.mouseDown,!1),this.canvas.addEventListener("mouseup",this.mouseUp,!1),this.canvas.addEventListener("mouseout",this.mouseUp,!1),this.canvas.addEventListener("mousemove",this.mouseMove,!1),this.canvas.addEventListener("wheel",this.mouseScroll,!1)}return t.prototype.clear=function(){this.context.setTransform(1,0,0,1,0,0),this.context.fillStyle="rgb(135, 194, 250)",this.context.fillRect(0,0,this.context.canvas.width,this.context.canvas.height)},t.prototype.drawAgents=function(t){var i=this,e=800/this.cameraDist;this.context.setTransform(1,0,0,1,0,0),this.context.translate(this.xPan,this.yPan),this.context.scale(e,e),this.context.fillStyle="rgb(51, 51, 51)",this.context.fillRect(.55*-this.context.canvas.width,.55*-this.context.canvas.height,1.1*this.context.canvas.width,1.1*this.context.canvas.height),t.forEach((function(t){i.drawAgent(t)}))},t.prototype.drawAgent=function(t){var i=t.getPosition(),e=t.getDirection(),n=t.getColour();this.context.beginPath(),this.context.strokeStyle="rgb("+n.r+", "+n.g+", "+n.b+")",this.context.lineWidth=2,this.context.arc(i.x,i.y,t.Radius,0,2*Math.PI);var o=e.magnitude();if(0!==o){this.context.moveTo(i.x,i.y);var s=i.add(e.divide(o).multiply(t.Radius));this.context.lineTo(s.x,s.y)}this.context.stroke()},t}(),s=function(){function t(t,i){this.x=t,this.y=i}return t.prototype.copy=function(i){return new t(i.x,i.y)},t.prototype.add=function(i){return new t(this.x+i.x,this.y+i.y)},t.prototype.subtract=function(i){return new t(this.x-i.x,this.y-i.y)},t.prototype.multiply=function(i){return new t(this.x*i,this.y*i)},t.prototype.divide=function(i){return new t(this.x/i,this.y/i)},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.magnitudeSqrd=function(){return Math.pow(this.x,2)+Math.pow(this.y,2)},t.prototype.magnitude=function(){return Math.sqrt(this.magnitudeSqrd())},t.prototype.normalise=function(){var i=this.magnitude();return 0==i?new t(0,0):this.divide(i)},t.prototype.sample=function(i){var e=Math.sqrt(Math.random())*i,n=2*Math.PI*Math.random();return new t(this.x+e*Math.cos(n),this.y+e*Math.sin(n))},t}(),r=function(){function t(){}return t.RandomToRandom=function(t,i,e,n){for(var o=[],r=this.poissonDiskSample(i,e,t,50),a=this.poissonDiskSample(i,e,t,50),h=new s(i/2,e/2),c=0;c<t;c++){var u=n(c,r[c].subtract(h),a[c].subtract(h),20);o.push(u)}return{agents:o}},t.RandomToLine=function(t,i,e,n){for(var o=[],r=this.poissonDiskSample(i,e,t,50),a=new s(i/2,e/2),h=0;h<t;h++){var c=n(h,r[h].subtract(a),new s(((h+1)/(t+1)-.5)*i,0),20);o.push(c)}return{agents:o}},t.CircleToCircle=function(t,i,e,n){for(var o=[],r=e/2-25,a=0;a<t;a++){var h=2*Math.PI*a/t,c=n(a,new s(r*Math.cos(h),r*Math.sin(h)),new s(r*Math.cos(h+Math.PI),r*Math.sin(h+Math.PI)),20);o.push(c)}return{agents:o}},t.GridToGrid=function(t,i,e,n){for(var o=[],r=Math.ceil(Math.sqrt(t/2)),a=90,h=30-i/2,c=-(r-1)/2*a,u=0;u<t;u++){var d=Math.floor(u/2),l=Math.floor(d/r),g=d%r;if(u%2==0){var p=n(u,new s(h+(r-1-g)*a,c+l*a),new s(-h-g*a,c+l*a),20);o.push(p)}else p=n(u,new s(-h-(r-1-g)*a,c+l*a),new s(h+g*a,c+l*a),20),o.push(p)}return{agents:o}},t.poissonDiskSample=function(t,i,e,n){for(var o=[],r=function(){for(var e,r=!0;r;)r=!1,e=new s(t*Math.random(),i*Math.random()),o.forEach((function(t){e.subtract(t).magnitudeSqrd()<Math.pow(n,2)&&(r=!0)}));o.push(e)},a=0;a<e;a++)r();return o},t}(),a=function(){function t(){}return t.prototype.init=function(t){this._agents=t,this._root=this.constructTree(this._agents,!0)},t.prototype.getAll=function(){return this._agents},t.prototype.getNeighboursInRangeRectilinear=function(t,i){var e=t.getPosition().x-i,n=t.getPosition().y-i,o=t.getPosition().x+i,s=t.getPosition().y+i;return this.rangeSearch(this._root,e,n,o,s,!0).filter((function(i){return i.Id!==t.Id}))},t.prototype.getNeighboursInRangeEuclidean=function(t,i){return this.getNeighboursInRangeRectilinear(t,i).filter((function(e){return t.getPosition().subtract(e.getPosition()).magnitudeSqrd()<=Math.pow(i,2)}))},t.prototype.forEach=function(t){this._agents.forEach(t)},t.prototype.constructTree=function(t,i){if(0===t.length)return null;var e=Math.floor(t.length/2),n=i?t.sort((function(t,i){return t.getPosition().x-i.getPosition().x})):t.sort((function(t,i){return t.getPosition().y-i.getPosition().y})),o=this.constructTree(n.slice(0,e),!i),s=this.constructTree(n.slice(e+1,t.length),!i);return{agent:t[e],left:o,right:s}},t.prototype.rangeSearch=function(t,i,e,n,o,s){if(null==t)return[];var r=[];return s?(t.agent.getPosition().x<=n&&(r=r.concat(this.rangeSearch(t.right,i,e,n,o,!s))),t.agent.getPosition().x>=i&&(r=r.concat(this.rangeSearch(t.left,i,e,n,o,!s)))):(t.agent.getPosition().y<=o&&(r=r.concat(this.rangeSearch(t.right,i,e,n,o,!s))),t.agent.getPosition().y>=e&&(r=r.concat(this.rangeSearch(t.left,i,e,n,o,!s)))),t.agent.getPosition().x>=i&&t.agent.getPosition().y>=e&&t.agent.getPosition().x<=n&&t.agent.getPosition().y<=o&&r.push(t.agent),r},t}(),h=function(){function t(){}return t.FromHsv=function(t,i,e){var n=(t*=6)-Math.floor(t),o=e*(1-i),s=e*(1-i*n),r=e*(1-i*(1-n));return 0<=t&&t<1?{r:255*e,g:255*r,b:255*o}:1<=t&&t<2?{r:255*s,g:255*e,b:255*o}:2<=t&&t<3?{r:255*o,g:255*e,b:255*r}:3<=t&&t<4?{r:255*o,g:255*s,b:255*e}:4<=t&&t<5?{r:255*r,g:255*o,b:255*e}:5<=t&&t<6?{r:255*e,g:255*o,b:255*s}:{r:0,g:0,b:0}},t.White={r:255,g:255,b:255},t.Red={r:255,g:0,b:0},t.Green={r:0,g:255,b:0},t}(),c=function(){function t(t,i,e,n){this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new s(0,0),this._isDone=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getColour=function(){return this._isDone?h.White:h.Green},t.prototype.update=function(t,i){if(!this._isDone){var e=this._goalPosition.subtract(this._position);e.magnitude()>60*t/1e3?(this._direction=e.normalise(),this._position=this._position.add(this._direction.multiply(60*t/1e3))):(this._position=this._goalPosition,this._isDone=!0)}},t.prototype.isDone=function(){return this._isDone},t}(),u=function(){function t(t,i,e,n){this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new s(0,0),this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getColour=function(){return this._isDone?h.White:this._isStuck?h.Red:h.Green},t.prototype.update=function(t,i){var e=this;if(!this._isDone){var n=this._goalPosition.subtract(this._position);if(n.magnitude()>60*t/1e3){this._direction=n.normalise();var o=this._position.add(this._direction.multiply(20));this._isStuck=!1,i.forEach((function(t){t.Id!=e.Id&&e.collides(t,o)&&(e._isStuck=!0)})),this._isStuck||(this._position=this._position.add(this._direction.multiply(60*t/1e3)))}else this._position=this._goalPosition,this._isDone=!0}},t.prototype.isDone=function(){return this._isDone},t.prototype.collides=function(t,i){return t.getPosition().subtract(i).magnitude()<t.Radius+this.Radius},t}(),d=function(){function t(t,i,e){this.vertex=t,this.tangent1=i,this.tangent2=e}return t.prototype.contains=function(t){var i=(this.tangent1.x-this.vertex.x)*(t.y-this.vertex.y)-(this.tangent1.y-this.vertex.y)*(t.x-this.vertex.x),e=(this.tangent2.x-this.vertex.x)*(t.y-this.vertex.y)-(this.tangent2.y-this.vertex.y)*(t.x-this.vertex.x);return i>0&&e<0},t}(),l=function(){function t(t,i,e,n){this.MAX_VELOCITY=1,this.MAX_ACCELERATION=.5,this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new s(0,0),this._isDone=!1,this._colour=h.Green}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getColour=function(){return this._colour},t.prototype.update=function(t,i){if(!this._isDone){for(var e,n,o=.5,r=this.getPreferredVelocity(o),a=this._goalPosition.subtract(this.getPosition()).magnitudeSqrd(),c=!0,u=0;u<i.length;u++)if(!(i[u].getPosition().subtract(this.getPosition()).magnitudeSqrd()>a)&&null!=(m=this.getVelocityObstacle(i[u]))&&m.contains(r)){c=!1,e=m,n=u;break}if(c)return this._direction=r,this._position=this._position.add(r),this._colour=h.Green,void this.checkIfDone();if(null!=e){var d=this.getClosestPointOnLine(e.vertex,e.tangent1,r);if(d.magnitude()<=o){for(c=!0,u=0;u<i.length;u++)if(u!=n&&null!=(m=this.getVelocityObstacle(i[u]))&&m.contains(d)){c=!1;break}if(c)return this._direction=d,this._position=this._position.add(d),this.setColour(r),void this.checkIfDone()}var l=this.getClosestPointOnLine(e.vertex,e.tangent2,r);if(d.magnitude()<=o){for(c=!0,u=0;u<i.length;u++)if(u!=n&&null!=(m=this.getVelocityObstacle(i[u]))&&m.contains(l)){c=!1;break}if(c)return this._direction=l,this._position=this._position.add(l),this.setColour(r),void this.checkIfDone()}}var g=Math.sqrt(a),p=1/0,f=new s(0,0);for(u=0;u<100;u++){for(var y=new s(0,0).sample(o),_=1/0,v=0;v<i.length;v++){var m,b=i[v];if(null==(m=this.getVelocityObstacle(b))||m.contains(y)){var P=this.getFirstRayCircleIntersection(b.getPosition().add(b.getDirection()),this.Radius+b.Radius,this._position,y.subtract(b.getDirection()));if(P<_&&0==(_=P))return this.setColour(r),void this.checkIfDone()}}var x;(x=_<g?100/_+r.subtract(y).magnitude():r.subtract(y).magnitude())<p&&(p=x,f=y)}this._direction=f,this._position=this._position.add(f),this.setColour(r),this.checkIfDone()}},t.prototype.isDone=function(){return this._isDone},t.prototype.getPreferredVelocity=function(t){var i=this._goalPosition.subtract(this._position),e=i.magnitude();return e>t?i.divide(e/t):i},t.prototype.getVelocityObstacle=function(t){var i=t.getDirection(),e=t.getPosition().subtract(this._position).add(i),n=t.Radius+this.Radius,o=i.subtract(e),r=o.magnitude();if(r<n)return null;var a=Math.acos(n/r),h=Math.atan2(o.y,o.x),c=h+a,u=new s(e.x+n*Math.cos(c),e.y+n*Math.sin(c)),l=h-a,g=new s(e.x+n*Math.cos(l),e.y+n*Math.sin(l));return new d(i,u,g)},t.prototype.getClosestPointOnLine=function(t,i,e){var n=i.normalise(),o=e.subtract(t).dot(n);return t.add(n.multiply(o))},t.prototype.getFirstRayCircleIntersection=function(t,i,e,n){var o=e.subtract(t),s=n.dot(n),r=2*n.dot(o),a=o.dot(o)-Math.pow(i,2),h=Math.pow(r,2)-4*s*a;if(h<0)return 1/0;var c=(-r-Math.sqrt(h))/2*s;return c<0?1/0:c},t.prototype.setColour=function(t){var i=t.subtract(this._direction).magnitude();this._colour=h.FromHsv((1-i)/3,1,1)},t.prototype.checkIfDone=function(){this._position.subtract(this._goalPosition).magnitudeSqrd()<1&&(this._isDone=!0,this._position=this._goalPosition,this._direction=new s(0,0),this._colour=h.White)},t}(),g=function(){function t(t,i,e,n){this.MAX_VELOCITY=1,this.MAX_ACCELERATION=.5,this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new s(0,0),this._isDone=!1,this._colour=h.Green}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getColour=function(){return this._colour},t.prototype.update=function(t,i){if(!this._isDone){for(var e,n,o=.5,r=this.getPreferredVelocity(o),a=this._goalPosition.subtract(this.getPosition()).magnitudeSqrd(),c=!0,u=0;u<i.length;u++)if(!(i[u].getPosition().subtract(this.getPosition()).magnitudeSqrd()>a)&&null!=(m=this.getReciprocalVelocityObstacle(i[u]))&&m.contains(r)){c=!1,e=m,n=u;break}if(c)return this._direction=r,this._position=this._position.add(r),this._colour=h.Green,void this.checkIfDone();if(null!=e){var d=this.getClosestPointOnLine(e.vertex,e.tangent1,r);if(d.magnitude()<=o){for(c=!0,u=0;u<i.length;u++)if(u!=n&&null!=(m=this.getReciprocalVelocityObstacle(i[u]))&&m.contains(d)){c=!1;break}if(c)return this._direction=d,this._position=this._position.add(d),this.setColour(r),void this.checkIfDone()}var l=this.getClosestPointOnLine(e.vertex,e.tangent2,r);if(d.magnitude()<=o){for(c=!0,u=0;u<i.length;u++)if(u!=n&&null!=(m=this.getReciprocalVelocityObstacle(i[u]))&&m.contains(l)){c=!1;break}if(c)return this._direction=l,this._position=this._position.add(l),this.setColour(r),void this.checkIfDone()}}var g=Math.sqrt(a),p=1/0,f=new s(0,0);for(u=0;u<100;u++){for(var y=new s(0,0).sample(o),_=1/0,v=0;v<i.length;v++){var m,b=i[v];if(null!=(m=this.getReciprocalVelocityObstacle(b))&&m.contains(y)){var P=this.getFirstRayCircleIntersection(b.getPosition().add(b.getDirection()),this.Radius+b.Radius,this._position,y.multiply(2).subtract(this.getDirection()).subtract(b.getDirection()));if(P<_&&0==(_=P))return this.setColour(r),void this.checkIfDone()}}var x;(x=_<g?100/_+r.subtract(y).magnitude():r.subtract(y).magnitude())<p&&(p=x,f=y)}this._direction=f,this._position=this._position.add(f),this.setColour(r),this.checkIfDone()}},t.prototype.isDone=function(){return this._isDone},t.prototype.getPreferredVelocity=function(t){var i=this._goalPosition.subtract(this._position),e=i.magnitude();return e>t?i.divide(e/t):i},t.prototype.getReciprocalVelocityObstacle=function(t){var i=this.getDirection(),e=t.getDirection(),n=i.add(e).divide(2),o=t.getPosition().subtract(this._position).add(e),r=t.Radius+this.Radius,a=e.subtract(o),h=a.magnitude();if(h<r)return null;var c=Math.acos(r/h),u=Math.atan2(a.y,a.x),l=u+c,g=new s(o.x+r*Math.cos(l),o.y+r*Math.sin(l)),p=u-c,f=new s(o.x+r*Math.cos(p),o.y+r*Math.sin(p));return new d(n,g,f)},t.prototype.getClosestPointOnLine=function(t,i,e){var n=i.normalise(),o=e.subtract(t).dot(n);return t.add(n.multiply(o))},t.prototype.getFirstRayCircleIntersection=function(t,i,e,n){var o=e.subtract(t),s=n.dot(n),r=2*n.dot(o),a=o.dot(o)-Math.pow(i,2),h=Math.pow(r,2)-4*s*a;if(h<0)return 1/0;var c=(-r-Math.sqrt(h))/2*s;return c<0?1/0:c},t.prototype.setColour=function(t){var i=t.subtract(this._direction).magnitude();this._colour=h.FromHsv((1-i)/3,1,1)},t.prototype.checkIfDone=function(){this._position.subtract(this._goalPosition).magnitudeSqrd()<1&&(this._isDone=!0,this._position=this._goalPosition,this._direction=new s(0,0),this._colour=h.White)},t}(),p=function(){function t(t,i,e,n){this.MAX_VELOCITY=1,this.MAX_ACCELERATION=.5,this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new s(0,0),this._isDone=!1,this._colour=h.Green}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getColour=function(){return this._colour},t.prototype.update=function(t,i){if(!this._isDone){for(var e,n,o=.5,r=this.getPreferredVelocity(o),a=this._goalPosition.subtract(this.getPosition()).magnitudeSqrd(),c=!0,u=0;u<i.length;u++)if(!(i[u].getPosition().subtract(this.getPosition()).magnitudeSqrd()>a)&&null!=(m=this.getHybridReciprocalVelocityObstacle(i[u]))&&m.contains(r)){c=!1,e=m,n=u;break}if(c)return this._direction=r,this._position=this._position.add(r),this._colour=h.Green,void this.checkIfDone();if(null!=e){var d=this.getClosestPointOnLine(e.vertex,e.tangent1,r);if(d.magnitude()<=o){for(c=!0,u=0;u<i.length;u++)if(u!=n&&null!=(m=this.getHybridReciprocalVelocityObstacle(i[u]))&&m.contains(d)){c=!1;break}if(c)return this._direction=d,this._position=this._position.add(d),this.setColour(r),void this.checkIfDone()}var l=this.getClosestPointOnLine(e.vertex,e.tangent2,r);if(d.magnitude()<=o){for(c=!0,u=0;u<i.length;u++)if(u!=n&&null!=(m=this.getHybridReciprocalVelocityObstacle(i[u]))&&m.contains(l)){c=!1;break}if(c)return this._direction=l,this._position=this._position.add(l),this.setColour(r),void this.checkIfDone()}}var g=Math.sqrt(a),p=1/0,f=new s(0,0);for(u=0;u<100;u++){for(var y=new s(0,0).sample(o),_=1/0,v=0;v<i.length;v++){var m,b=i[v];if(null!=(m=this.getHybridReciprocalVelocityObstacle(b))&&m.contains(y)){var P=this.getFirstRayCircleIntersection(b.getPosition().add(b.getDirection()),this.Radius+b.Radius,this._position,y.multiply(2).subtract(this.getDirection()).subtract(b.getDirection()));if(P<_&&0==(_=P))return this.setColour(r),void this.checkIfDone()}}var x;(x=_<g?100/_+r.subtract(y).magnitude():r.subtract(y).magnitude())<p&&(p=x,f=y)}this._direction=f,this._position=this._position.add(f),this.setColour(r),this.checkIfDone()}},t.prototype.isDone=function(){return this._isDone},t.prototype.getPreferredVelocity=function(t){var i=this._goalPosition.subtract(this._position),e=i.magnitude();return e>t?i.divide(e/t):i},t.prototype.getHybridReciprocalVelocityObstacle=function(t){var i=this.getDirection(),e=t.getDirection(),n=e,o=i.add(e).divide(2),r=t.getPosition().subtract(this._position),a=r.add(e),h=t.Radius+this.Radius,c=e.subtract(a),u=c.magnitude();if(u<h)return null;var l,g=Math.acos(h/u),p=Math.atan2(c.y,c.x),f=p+g,y=new s(a.x+h*Math.cos(f),a.y+h*Math.sin(f)),_=p-g,v=new s(a.x+h*Math.cos(_),a.y+h*Math.sin(_));return l=(r.x-e.x)*(i.y-e.y)-(r.y-e.y)*(i.x-e.x)>0?this.getLineIntersection(n,y,o,v):this.getLineIntersection(n,v,o,y),new d(l,y,v)},t.prototype.getLineIntersection=function(t,i,e,n){var o=e.subtract(t),s=n.x*i.y-n.y*i.x,r=(o.y*n.x-o.y*n.y)/s;return t.add(i.multiply(r))},t.prototype.getClosestPointOnLine=function(t,i,e){var n=i.normalise(),o=e.subtract(t).dot(n);return t.add(n.multiply(o))},t.prototype.getFirstRayCircleIntersection=function(t,i,e,n){var o=e.subtract(t),s=n.dot(n),r=2*n.dot(o),a=o.dot(o)-Math.pow(i,2),h=Math.pow(r,2)-4*s*a;if(h<0)return 1/0;var c=(-r-Math.sqrt(h))/2*s;return c<0?1/0:c},t.prototype.setColour=function(t){var i=t.subtract(this._direction).magnitude();this._colour=h.FromHsv((1-i)/3,1,1)},t.prototype.checkIfDone=function(){this._position.subtract(this._goalPosition).magnitudeSqrd()<1&&(this._isDone=!0,this._position=this._goalPosition,this._direction=new s(0,0),this._colour=h.White)},t}(),f=document.getElementById("config"),y=document.getElementById("agentType"),_=document.getElementById("numberOfAgents"),v=document.getElementById("canvas"),m=document.getElementById("framerate"),b=document.getElementById("playButton"),P=document.getElementById("stepButton"),x=new n(new o(v),new a),w=!1;function D(){this.reconfigure();var t=0,i=0,e=0;window.requestAnimationFrame((function n(o){var s=o-t;t=o,w&&x.update(s),x.draw(),e++,o-i>=250&&(m.textContent="FPS: "+(1e3*e/(o-i)).toFixed(1),e=0,i=o),window.requestAnimationFrame(n)}))}function M(){(w=!w)?(b.textContent="Pause",P.disabled=!0):(b.textContent="Play",P.disabled=!1)}function R(){x.update(1e3/60)}function I(){var t;w&&this.playPause();var i,e=f.value,n=y.value,o=null!==(t=parseInt(_.value))&&void 0!==t?t:0;switch(n){case"BasicAgent":i=function(t,i,e,n){return new c(t,i,e,n)};break;case"StopAgent":i=function(t,i,e,n){return new u(t,i,e,n)};break;case"VOAgent":i=function(t,i,e,n){return new l(t,i,e,n)};break;case"RVOAgent":i=function(t,i,e,n){return new g(t,i,e,n)};break;case"HRVOAgent":i=function(t,i,e,n){return new p(t,i,e,n)};break;default:throw new Error("Agent not implemented")}switch(e){case"RandomToRandom":x.init(r.RandomToRandom(o,v.width,v.height,i));break;case"RandomToLine":x.init(r.RandomToLine(o,v.width,v.height,i));break;case"CircleToCircle":x.init(r.CircleToCircle(o,v.width,v.height,i));break;case"GridToGrid":x.init(r.GridToGrid(o,v.width,v.height,i));break;default:throw new Error("Configuration not implemented")}}}},i={};function e(n){if(i[n])return i[n].exports;var o=i[n]={exports:{}};return t[n](o,o.exports,e),o.exports}return e.d=(t,i)=>{for(var n in i)e.o(i,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:i[n]})},e.o=(t,i)=>Object.prototype.hasOwnProperty.call(t,i),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e(725)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Dcm93ZFNpbXVsYXRvci8uL3NyYy9TaW11bGF0aW9uLnRzIiwid2VicGFjazovL0Nyb3dkU2ltdWxhdG9yLy4vc3JjL1JlbmRlcmVyMkQudHMiLCJ3ZWJwYWNrOi8vQ3Jvd2RTaW11bGF0b3IvLi9zcmMvVmVjdG9yMmYudHMiLCJ3ZWJwYWNrOi8vQ3Jvd2RTaW11bGF0b3IvLi9zcmMvQ29uZmlndXJhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vQ3Jvd2RTaW11bGF0b3IvLi9zcmMvQWdlbnRUcmVlLnRzIiwid2VicGFjazovL0Nyb3dkU2ltdWxhdG9yLy4vc3JjL0NvbG91ci50cyIsIndlYnBhY2s6Ly9Dcm93ZFNpbXVsYXRvci8uL3NyYy9hZ2VudHMvQmFzaWNBZ2VudC50cyIsIndlYnBhY2s6Ly9Dcm93ZFNpbXVsYXRvci8uL3NyYy9hZ2VudHMvU3RvcEFnZW50LnRzIiwid2VicGFjazovL0Nyb3dkU2ltdWxhdG9yLy4vc3JjL1ZlbG9jaXR5T2JzdGFjbGUudHMiLCJ3ZWJwYWNrOi8vQ3Jvd2RTaW11bGF0b3IvLi9zcmMvYWdlbnRzL1ZPQWdlbnQudHMiLCJ3ZWJwYWNrOi8vQ3Jvd2RTaW11bGF0b3IvLi9zcmMvYWdlbnRzL1JWT0FnZW50LnRzIiwid2VicGFjazovL0Nyb3dkU2ltdWxhdG9yLy4vc3JjL2FnZW50cy9IUlZPQWdlbnQudHMiLCJ3ZWJwYWNrOi8vQ3Jvd2RTaW11bGF0b3IvLi9zcmMvZGVtbzJkLnRzIiwid2VicGFjazovL0Nyb3dkU2ltdWxhdG9yL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0Nyb3dkU2ltdWxhdG9yL3dlYnBhY2svc3RhcnR1cCIsIndlYnBhY2s6Ly9Dcm93ZFNpbXVsYXRvci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vQ3Jvd2RTaW11bGF0b3Ivd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9Dcm93ZFNpbXVsYXRvci93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Il0sIm5hbWVzIjpbInJlbmRlcmVyIiwiYWdlbnRzIiwidGhpcyIsIl9yZW5kZXJlciIsIl9hZ2VudHMiLCJpbml0IiwiY29uZmlnIiwidXBkYXRlIiwiZGVsdGFUIiwiZm9yRWFjaCIsImFnZW50IiwiZ2V0TmVpZ2hib3Vyc0luUmFuZ2VFdWNsaWRlYW4iLCJnZXRBbGwiLCJkcmF3IiwiY2xlYXIiLCJkcmF3QWdlbnRzIiwiY2FudmFzIiwiY2FtZXJhRGlzdCIsIm1vdXNlRG93biIsImV2ZW50IiwiZHJhZyIsIm9sZFgiLCJwYWdlWCIsIm9sZFkiLCJwYWdlWSIsIm1vdXNlVXAiLCJwcmV2ZW50RGVmYXVsdCIsIm1vdXNlTW92ZSIsInhQYW4iLCJ5UGFuIiwibW91c2VTY3JvbGwiLCJkZWx0YVkiLCJjb25zb2xlIiwibG9nIiwiY29udGV4dCIsImdldENvbnRleHQiLCJ3aWR0aCIsImhlaWdodCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXRUcmFuc2Zvcm0iLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsInNjYWxlRmFjdG9yIiwidHJhbnNsYXRlIiwic2NhbGUiLCJkcmF3QWdlbnQiLCJwb3NpdGlvbiIsImdldFBvc2l0aW9uIiwiZGlyZWN0aW9uIiwiZ2V0RGlyZWN0aW9uIiwiY29sb3VyIiwiZ2V0Q29sb3VyIiwiYmVnaW5QYXRoIiwic3Ryb2tlU3R5bGUiLCJyIiwiZyIsImIiLCJsaW5lV2lkdGgiLCJhcmMiLCJ4IiwieSIsIlJhZGl1cyIsIk1hdGgiLCJQSSIsIm1hZ25pdHVkZSIsIm1vdmVUbyIsIm5ld1BvcyIsImFkZCIsImRpdmlkZSIsIm11bHRpcGx5IiwibGluZVRvIiwic3Ryb2tlIiwiY29weSIsInYiLCJWZWN0b3IyZiIsInN1YnRyYWN0IiwicyIsImRvdCIsIm1hZ25pdHVkZVNxcmQiLCJzcXJ0Iiwibm9ybWFsaXNlIiwibSIsInNhbXBsZSIsIm1heFJhZGl1cyIsInJhZGl1cyIsInJhbmRvbSIsImFuZ2xlIiwiY29zIiwic2luIiwiUmFuZG9tVG9SYW5kb20iLCJuIiwiYWdlbnRDb25zdHJ1Y3RvciIsInN0YXJ0UG9zaXRpb25zIiwicG9pc3NvbkRpc2tTYW1wbGUiLCJnb2FsUG9zaXRpb25zIiwiY2VudHJlIiwiaSIsInB1c2giLCJSYW5kb21Ub0xpbmUiLCJDaXJjbGVUb0NpcmNsZSIsIkdyaWRUb0dyaWQiLCJncmlkU2l6ZSIsImNlaWwiLCJvZmZzZXQiLCJpZHgiLCJmbG9vciIsInJvdyIsImNvbCIsInhSYW5nZSIsInlSYW5nZSIsInRocmVzaG9sZCIsInNhbXBsZXMiLCJwb3MiLCJyZXNhbXBsZSIsIl9yb290IiwiY29uc3RydWN0VHJlZSIsImdldE5laWdoYm91cnNJblJhbmdlUmVjdGlsaW5lYXIiLCJyYW5nZSIsIm1pblgiLCJtaW5ZIiwibWF4WCIsIm1heFkiLCJyYW5nZVNlYXJjaCIsImZpbHRlciIsIm90aGVyIiwiSWQiLCJmdW4iLCJ4QXhpcyIsImxlbmd0aCIsIm1pZCIsInNvcnRlZCIsInNvcnQiLCJhIiwibGVmdCIsInNsaWNlIiwicmlnaHQiLCJyb290IiwicmVzIiwiY29uY2F0IiwiRnJvbUhzdiIsImgiLCJmcmFjdCIsIlAiLCJRIiwiVCIsIldoaXRlIiwiUmVkIiwiR3JlZW4iLCJpZCIsInN0YXJ0UG9zaXRpb24iLCJnb2FsUG9zaXRpb24iLCJfcG9zaXRpb24iLCJfZ29hbFBvc2l0aW9uIiwiX2RpcmVjdGlvbiIsIl9pc0RvbmUiLCJDb2xvdXIiLCJnb2FsRGlyZWN0aW9uIiwiaXNEb25lIiwiX2lzU3R1Y2siLCJjb2xsaWRlcyIsInZlcnRleCIsInRhbmdlbnQxIiwidGFuZ2VudDIiLCJjb250YWlucyIsInZlbG9jaXR5IiwiZGV0ZXJtaW5hbnQxIiwiZGV0ZXJtaW5hbnQyIiwiTUFYX1ZFTE9DSVRZIiwiTUFYX0FDQ0VMRVJBVElPTiIsIl9jb2xvdXIiLCJfZGVsdGFUIiwibmVpZ2hib3VycyIsImNvbGxpc2lvbiIsInNwZWVkIiwicHJlZmVycmVkVmVsb2NpdHkiLCJnZXRQcmVmZXJyZWRWZWxvY2l0eSIsImdvYWxEaXN0U3FyZCIsInNhZmUiLCJ2ZWxvY2l0eU9ic3RhY2xlIiwiZ2V0VmVsb2NpdHlPYnN0YWNsZSIsImNoZWNrSWZEb25lIiwiaGFsZlBsYW5lMSIsImdldENsb3Nlc3RQb2ludE9uTGluZSIsInNldENvbG91ciIsImhhbGZQbGFuZTIiLCJnb2FsRGlzdCIsIm1pblBlbmFsdHkiLCJJbmZpbml0eSIsImJlc3RWZWxvY2l0eSIsIm1pblRpbWVUb0NvbGxpc2lvbiIsImoiLCJ0aW1lVG9Db2xsaXNpb24iLCJnZXRGaXJzdFJheUNpcmNsZUludGVyc2VjdGlvbiIsInBlbmFsdHkiLCJtYXhTcGVlZCIsImdvYWxEaXN0YW5jZSIsInZlbG9jaXR5QiIsImRpZmYiLCJkaXN0IiwidGhldGEiLCJhY29zIiwicGhpIiwiYXRhbjIiLCJhbmdsZTEiLCJhbmdsZTIiLCJWZWxvY2l0eU9ic3RhY2xlIiwibGluZVBvaW50IiwibGluZURpcmVjdGlvbiIsInBvaW50IiwiZGlzdGFuY2UiLCJvcmlnaW4iLCJkZWx0YSIsImMiLCJkaXNjcmltIiwic3RyZXNzIiwiZ2V0UmVjaXByb2NhbFZlbG9jaXR5T2JzdGFjbGUiLCJ2ZWxvY2l0eUEiLCJnZXRIeWJyaWRSZWNpcHJvY2FsVmVsb2NpdHlPYnN0YWNsZSIsInZvVmVydGV4IiwicnZvVmVydGV4IiwicG9zaXRpb25CIiwiZ2V0TGluZUludGVyc2VjdGlvbiIsInBvaW50MSIsImRpcmVjdGlvbjEiLCJwb2ludDIiLCJkaXJlY3Rpb24yIiwiZGV0IiwidCIsImNvbmZpZ1NlbGVjdCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJhZ2VudFR5cGVTZWxlY3QiLCJudW1iZXJPZkFnZW50c0lucHV0IiwiZnJhbWVyYXRlIiwicGxheUJ1dHRvbiIsInN0ZXBCdXR0b24iLCJzaW11bGF0aW9uIiwiU2ltdWxhdGlvbiIsIlJlbmRlcmVyMkQiLCJBZ2VudFRyZWUiLCJwbGF5IiwicmVjb25maWd1cmUiLCJsYXN0UmVuZGVyIiwibGFzdEZQUyIsImZyYW1lcyIsIndpbmRvdyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImxvb3AiLCJ0aW1lc3RhbXAiLCJ0ZXh0Q29udGVudCIsInRvRml4ZWQiLCJwbGF5UGF1c2UiLCJkaXNhYmxlZCIsInN0ZXAiLCJ2YWx1ZSIsImFnZW50VHlwZSIsInBhcnNlSW50IiwiQmFzaWNBZ2VudCIsIlN0b3BBZ2VudCIsIlZPQWdlbnQiLCJSVk9BZ2VudCIsIkhSVk9BZ2VudCIsIkVycm9yIiwiQ29uZmlndXJhdGlvbnMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImQiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyJdLCJtYXBwaW5ncyI6ImtKQUlBLGlCQUlFLFdBQVlBLEVBQXFCQyxHQUMvQkMsS0FBS0MsVUFBWUgsRUFDakJFLEtBQUtFLFFBQVVILEVBdUJuQixPQXBCRSxZQUFBSSxLQUFBLFNBQUtDLEdBQ0hKLEtBQUtFLFFBQVFDLEtBQUtDLEVBQU9MLFNBRzNCLFlBQUFNLE9BQUEsU0FBT0MsR0FBUCxXQUVFTixLQUFLRSxRQUFRSyxTQUFRLFNBQUNDLEdBQ3BCQSxFQUFNSCxPQUNKQyxFQUNBLEVBQUtKLFFBQVFPLDhCQUE4QkQsRUFKbkMsU0FRWlIsS0FBS0UsUUFBUUMsS0FBS0gsS0FBS0UsUUFBUVEsV0FHakMsWUFBQUMsS0FBQSxXQUNFWCxLQUFLQyxVQUFVVyxRQUNmWixLQUFLQyxVQUFVWSxXQUFXYixLQUFLRSxVQUVuQyxFQTdCQSxHQ0FBLGFBWUUsV0FBWVksR0FBWixXQUZRLEtBQUFDLFdBQWEsSUEwRWIsS0FBQUMsVUFBWSxTQUFDQyxH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QyxHQUU1QixHQUFHRixFQUF5QkUsR0FDM0IsT0FBT0YsRUFBeUJFLEdBQVVDLFFBRzNDLElBQUlDLEVBQVNKLEVBQXlCRSxHQUFZLENBR2pEQyxRQUFTLElBT1YsT0FIQUUsRUFBb0JILEdBQVVFLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9DRyxFQUFPRCxRQ2pCZixPQ0ZBRixFQUFvQkssRUFBSSxDQUFDSCxFQUFTSSxLQUNqQyxJQUFJLElBQUlDLEtBQU9ELEVBQ1hOLEVBQW9CUSxFQUFFRixFQUFZQyxLQUFTUCxFQUFvQlEsRUFBRU4sRUFBU0ssSUFDNUVFLE9BQU9DLGVBQWVSLEVBQVNLLEVBQUssQ0FBRUksWUFBWSxFQUFNQyxJQUFLTixFQUFXQyxNQ0ozRVAsRUFBb0JRLEVBQUksQ0FBQ0ssRUFBS0MsSUFBU0wsT0FBT00sVUFBVUMsZUFBZUMsS0FBS0osRUFBS0MsR0NDakZkLEVBQW9Cbk4sRUFBS3FOLElBQ0gsb0JBQVhnQixRQUEwQkEsT0FBT0MsYUFDMUNWLE9BQU9DLGVBQWVSLEVBQVNnQixPQUFPQyxZQUFhLENBQUU5QixNQUFPLFdBRTdEb0IsT0FBT0MsZUFBZVIsRUFBUyxhQUFjLENBQUViLE9BQU8sS0hGaERXLEVBQW9CLE0iLCJmaWxlIjoiZGVtbzJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUFnZW50Q29sbGVjdGlvbiB9IGZyb20gXCIuL0lBZ2VudENvbGxlY3Rpb25cIjtcclxuaW1wb3J0IHsgSVJlbmRlcmVyIH0gZnJvbSBcIi4vSVJlbmRlcmVyXCI7XHJcbmltcG9ydCB7IElDb25maWd1cmF0aW9uIH0gZnJvbSBcIi4vQ29uZmlndXJhdGlvbnNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTaW11bGF0aW9uIHtcclxuICBfcmVuZGVyZXI6IElSZW5kZXJlcjtcclxuICBfYWdlbnRzOiBJQWdlbnRDb2xsZWN0aW9uO1xyXG5cclxuICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogSVJlbmRlcmVyLCBhZ2VudHM6IElBZ2VudENvbGxlY3Rpb24pIHtcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICB0aGlzLl9hZ2VudHMgPSBhZ2VudHM7XHJcbiAgfVxyXG5cclxuICBpbml0KGNvbmZpZzogSUNvbmZpZ3VyYXRpb24pIHtcclxuICAgIHRoaXMuX2FnZW50cy5pbml0KGNvbmZpZy5hZ2VudHMpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGRlbHRhVDogbnVtYmVyKSB7XHJcbiAgICBsZXQgcmFuZ2UgPSAzMDA7XHJcbiAgICB0aGlzLl9hZ2VudHMuZm9yRWFjaCgoYWdlbnQpID0+IHtcclxuICAgICAgYWdlbnQudXBkYXRlKFxyXG4gICAgICAgIGRlbHRhVCxcclxuICAgICAgICB0aGlzLl9hZ2VudHMuZ2V0TmVpZ2hib3Vyc0luUmFuZ2VFdWNsaWRlYW4oYWdlbnQsIHJhbmdlKVxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5fYWdlbnRzLmluaXQodGhpcy5fYWdlbnRzLmdldEFsbCgpKTtcclxuICB9XHJcblxyXG4gIGRyYXcoKSB7XHJcbiAgICB0aGlzLl9yZW5kZXJlci5jbGVhcigpO1xyXG4gICAgdGhpcy5fcmVuZGVyZXIuZHJhd0FnZW50cyh0aGlzLl9hZ2VudHMpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBJQWdlbnQgfSBmcm9tIFwiLi9JQWdlbnRcIjtcclxuaW1wb3J0IHsgSUFnZW50Q29sbGVjdGlvbiB9IGZyb20gXCIuL0lBZ2VudENvbGxlY3Rpb25cIjtcclxuaW1wb3J0IHsgSVJlbmRlcmVyIH0gZnJvbSBcIi4vSVJlbmRlcmVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUmVuZGVyZXIyRCBpbXBsZW1lbnRzIElSZW5kZXJlciB7XHJcbiAgcHJpdmF0ZSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xyXG4gIHByaXZhdGUgY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG5cclxuICAvLyBDYW1lcmEgY29udHJvbHNcclxuICBwcml2YXRlIGRyYWc6IGJvb2xlYW47XHJcbiAgcHJpdmF0ZSBvbGRYOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBvbGRZOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSB4UGFuOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSB5UGFuOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBjYW1lcmFEaXN0ID0gODAwOyAvLyBTdGFydCBjYW1lcmEgODAwICdweCcgYXdheVxyXG5cclxuICBjb25zdHJ1Y3RvcihjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50KSB7XHJcbiAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgIHRoaXMueFBhbiA9IHRoaXMuY2FudmFzLndpZHRoIC8gMjtcclxuICAgIHRoaXMueVBhbiA9IHRoaXMuY2FudmFzLmhlaWdodCAvIDI7XHJcblxyXG4gICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVyc1xyXG4gICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLm1vdXNlRG93biwgZmFsc2UpO1xyXG4gICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5tb3VzZVVwLCBmYWxzZSk7XHJcbiAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIiwgdGhpcy5tb3VzZVVwLCBmYWxzZSk7XHJcbiAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMubW91c2VNb3ZlLCBmYWxzZSk7XHJcbiAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgdGhpcy5tb3VzZVNjcm9sbCwgZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgY2xlYXIoKTogdm9pZCB7XHJcbiAgICAvLyBDbGVhciBiYWNrZ3JvdW5kXHJcbiAgICB0aGlzLmNvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xyXG4gICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwicmdiKDEzNSwgMTk0LCAyNTApXCI7XHJcbiAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3QoXHJcbiAgICAgIDAsXHJcbiAgICAgIDAsXHJcbiAgICAgIHRoaXMuY29udGV4dC5jYW52YXMud2lkdGgsXHJcbiAgICAgIHRoaXMuY29udGV4dC5jYW52YXMuaGVpZ2h0XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgZHJhd0FnZW50cyhhZ2VudHM6IElBZ2VudENvbGxlY3Rpb24pIHtcclxuICAgIGNvbnN0IHNjYWxlRmFjdG9yID0gODAwIC8gdGhpcy5jYW1lcmFEaXN0O1xyXG5cclxuICAgIC8vIFRPRE86IHJlcGxhY2Ugd2l0aCBzaW5nbGUgc2V0VHJhbnNmb3JtXHJcbiAgICB0aGlzLmNvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xyXG4gICAgdGhpcy5jb250ZXh0LnRyYW5zbGF0ZSh0aGlzLnhQYW4sIHRoaXMueVBhbik7XHJcbiAgICB0aGlzLmNvbnRleHQuc2NhbGUoc2NhbGVGYWN0b3IsIHNjYWxlRmFjdG9yKTtcclxuXHJcbiAgICAvLyBEcmF3IGZsb29yXHJcbiAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJyZ2IoNTEsIDUxLCA1MSlcIjtcclxuICAgIHRoaXMuY29udGV4dC5maWxsUmVjdChcclxuICAgICAgLXRoaXMuY29udGV4dC5jYW52YXMud2lkdGggKiAwLjU1LFxyXG4gICAgICAtdGhpcy5jb250ZXh0LmNhbnZhcy5oZWlnaHQgKiAwLjU1LFxyXG4gICAgICB0aGlzLmNvbnRleHQuY2FudmFzLndpZHRoICogMS4xLFxyXG4gICAgICB0aGlzLmNvbnRleHQuY2FudmFzLmhlaWdodCAqIDEuMVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBEcmF3IGFnZW50c1xyXG4gICAgYWdlbnRzLmZvckVhY2goKGFnZW50KSA9PiB7XHJcbiAgICAgIHRoaXMuZHJhd0FnZW50KGFnZW50KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkcmF3QWdlbnQoYWdlbnQ6IElBZ2VudCk6IHZvaWQge1xyXG4gICAgY29uc3QgcG9zaXRpb24gPSBhZ2VudC5nZXRQb3NpdGlvbigpO1xyXG4gICAgY29uc3QgZGlyZWN0aW9uID0gYWdlbnQuZ2V0RGlyZWN0aW9uKCk7XHJcbiAgICBjb25zdCBjb2xvdXIgPSBhZ2VudC5nZXRDb2xvdXIoKTtcclxuXHJcbiAgICB0aGlzLmNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICB0aGlzLmNvbnRleHQuc3Ryb2tlU3R5bGUgPSBgcmdiKCR7Y29sb3VyLnJ9LCAke2NvbG91ci5nfSwgJHtjb2xvdXIuYn0pYDtcclxuICAgIHRoaXMuY29udGV4dC5saW5lV2lkdGggPSAyO1xyXG5cclxuICAgIHRoaXMuY29udGV4dC5hcmMocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgYWdlbnQuUmFkaXVzLCAwLCAyICogTWF0aC5QSSk7XHJcblxyXG4gICAgbGV0IG1hZ25pdHVkZSA9IGRpcmVjdGlvbi5tYWduaXR1ZGUoKTtcclxuICAgIGlmIChtYWduaXR1ZGUgIT09IDApIHtcclxuICAgICAgdGhpcy5jb250ZXh0Lm1vdmVUbyhwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcclxuICAgICAgbGV0IG5ld1BvcyA9IHBvc2l0aW9uLmFkZChcclxuICAgICAgICBkaXJlY3Rpb24uZGl2aWRlKG1hZ25pdHVkZSkubXVsdGlwbHkoYWdlbnQuUmFkaXVzKVxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLmNvbnRleHQubGluZVRvKG5ld1Bvcy54LCBuZXdQb3MueSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jb250ZXh0LnN0cm9rZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBtb3VzZURvd24gPSAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgIHRoaXMuZHJhZyA9IHRydWU7XHJcbiAgICB0aGlzLm9sZFggPSBldmVudC5wYWdlWDtcclxuICAgIHRoaXMub2xkWSA9IGV2ZW50LnBhZ2VZO1xyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgbW91c2VVcCA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgdGhpcy5kcmFnID0gZmFsc2U7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgbW91c2VNb3ZlID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICBpZiAoIXRoaXMuZHJhZykgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIHRoaXMueFBhbiArPSBldmVudC5wYWdlWCAtIHRoaXMub2xkWDtcclxuICAgIHRoaXMueVBhbiArPSBldmVudC5wYWdlWSAtIHRoaXMub2xkWTtcclxuXHJcbiAgICB0aGlzLm9sZFggPSBldmVudC5wYWdlWDtcclxuICAgIHRoaXMub2xkWSA9IGV2ZW50LnBhZ2VZO1xyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgbW91c2VTY3JvbGwgPSAoZXZlbnQ6IFdoZWVsRXZlbnQpID0+IHtcclxuICAgIHRoaXMuY2FtZXJhRGlzdCArPSBldmVudC5kZWx0YVk7XHJcbiAgICBpZiAodGhpcy5jYW1lcmFEaXN0IDwgMCkge1xyXG4gICAgICB0aGlzLmNhbWVyYURpc3QgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBjb25zb2xlLmxvZyhcIlNjcm9sbFwiKTtcclxuICB9O1xyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBWZWN0b3IyZiB7XHJcbiAgeDogbnVtYmVyO1xyXG4gIHk6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgIHRoaXMueCA9IHg7XHJcbiAgICB0aGlzLnkgPSB5O1xyXG4gIH1cclxuXHJcbiAgY29weSh2OiBWZWN0b3IyZik6IFZlY3RvcjJmIHtcclxuICAgIHJldHVybiBuZXcgVmVjdG9yMmYodi54LCB2LnkpO1xyXG4gIH1cclxuXHJcbiAgYWRkKHY6IFZlY3RvcjJmKTogVmVjdG9yMmYge1xyXG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyZih0aGlzLnggKyB2LngsIHRoaXMueSArIHYueSk7XHJcbiAgfVxyXG5cclxuICBzdWJ0cmFjdCh2OiBWZWN0b3IyZik6IFZlY3RvcjJmIHtcclxuICAgIHJldHVybiBuZXcgVmVjdG9yMmYodGhpcy54IC0gdi54LCB0aGlzLnkgLSB2LnkpO1xyXG4gIH1cclxuXHJcbiAgbXVsdGlwbHkoczogbnVtYmVyKTogVmVjdG9yMmYge1xyXG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyZih0aGlzLnggKiBzLCB0aGlzLnkgKiBzKTtcclxuICB9XHJcblxyXG4gIGRpdmlkZShzOiBudW1iZXIpOiBWZWN0b3IyZiB7XHJcbiAgICByZXR1cm4gbmV3IFZlY3RvcjJmKHRoaXMueCAvIHMsIHRoaXMueSAvIHMpO1xyXG4gIH1cclxuXHJcbiAgZG90KHY6IFZlY3RvcjJmKSB7XHJcbiAgICByZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55O1xyXG4gIH1cclxuXHJcbiAgbWFnbml0dWRlU3FyZCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMueCAqKiAyICsgdGhpcy55ICoqIDI7XHJcbiAgfVxyXG5cclxuICBtYWduaXR1ZGUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy5tYWduaXR1ZGVTcXJkKCkpO1xyXG4gIH1cclxuXHJcbiAgbm9ybWFsaXNlKCk6IFZlY3RvcjJmIHtcclxuICAgIGxldCBtID0gdGhpcy5tYWduaXR1ZGUoKTtcclxuICAgIHJldHVybiBtID09IDAgPyBuZXcgVmVjdG9yMmYoMCwgMCkgOiB0aGlzLmRpdmlkZShtKTtcclxuICB9XHJcblxyXG4gIHNhbXBsZShtYXhSYWRpdXM6IG51bWJlcikge1xyXG4gICAgLy8gVW5pZm9ybWx5IHNhbXBsZSB0aGUgY2lyY2xlIGNlbnRyZWQgYXQgdGhpcyBwb2ludCB3aXRoIHJhZGl1cyBtYXhSYWRpdXNcclxuICAgIGxldCByYWRpdXMgPSBNYXRoLnNxcnQoTWF0aC5yYW5kb20oKSkgKiBtYXhSYWRpdXM7XHJcbiAgICBsZXQgYW5nbGUgPSAyICogTWF0aC5QSSAqIE1hdGgucmFuZG9tKCk7XHJcbiAgICByZXR1cm4gbmV3IFZlY3RvcjJmKFxyXG4gICAgICB0aGlzLnggKyByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSksXHJcbiAgICAgIHRoaXMueSArIHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgb2ZmIH0gZnJvbSBcInByb2Nlc3NcIjtcclxuaW1wb3J0IHsgSUFnZW50IH0gZnJvbSBcIi4vSUFnZW50XCI7XHJcbmltcG9ydCB7IFZlY3RvcjJmIH0gZnJvbSBcIi4vVmVjdG9yMmZcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUNvbmZpZ3VyYXRpb24ge1xyXG4gIGFnZW50czogSUFnZW50W107XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb25maWd1cmF0aW9ucyB7XHJcbiAgc3RhdGljIFJhbmRvbVRvUmFuZG9tKFxyXG4gICAgbjogbnVtYmVyLFxyXG4gICAgd2lkdGg6IG51bWJlcixcclxuICAgIGhlaWdodDogbnVtYmVyLFxyXG4gICAgYWdlbnRDb25zdHJ1Y3RvcjogKFxyXG4gICAgICBpZDogbnVtYmVyLFxyXG4gICAgICBzdGFydFBvc2l0aW9uOiBWZWN0b3IyZixcclxuICAgICAgZ29hbFBvc2l0aW9uOiBWZWN0b3IyZixcclxuICAgICAgcmFkaXVzOiBudW1iZXJcclxuICAgICkgPT4gSUFnZW50XHJcbiAgKSB7XHJcbiAgICAvLyBSYW5kb20gc3RhcnQgcG9zaXRpb24gdG8gcmFuZG9tIGdvYWwgcG9zaXRpb25cclxuICAgIGxldCBhZ2VudHM6IElBZ2VudFtdID0gW107XHJcbiAgICBjb25zdCBzdGFydFBvc2l0aW9ucyA9IHRoaXMucG9pc3NvbkRpc2tTYW1wbGUod2lkdGgsIGhlaWdodCwgbiwgNTApO1xyXG4gICAgY29uc3QgZ29hbFBvc2l0aW9ucyA9IHRoaXMucG9pc3NvbkRpc2tTYW1wbGUod2lkdGgsIGhlaWdodCwgbiwgNTApO1xyXG4gICAgY29uc3QgY2VudHJlID0gbmV3IFZlY3RvcjJmKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcclxuICAgICAgY29uc3QgYWdlbnQgPSBhZ2VudENvbnN0cnVjdG9yKFxyXG4gICAgICAgIGksXHJcbiAgICAgICAgc3RhcnRQb3NpdGlvbnNbaV0uc3VidHJhY3QoY2VudHJlKSxcclxuICAgICAgICBnb2FsUG9zaXRpb25zW2ldLnN1YnRyYWN0KGNlbnRyZSksXHJcbiAgICAgICAgMjBcclxuICAgICAgKTtcclxuICAgICAgYWdlbnRzLnB1c2goYWdlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7IGFnZW50czogYWdlbnRzIH0gYXMgSUNvbmZpZ3VyYXRpb247XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgUmFuZG9tVG9MaW5lKFxyXG4gICAgbjogbnVtYmVyLFxyXG4gICAgd2lkdGg6IG51bWJlcixcclxuICAgIGhlaWdodDogbnVtYmVyLFxyXG4gICAgYWdlbnRDb25zdHJ1Y3RvcjogKFxyXG4gICAgICBpZDogbnVtYmVyLFxyXG4gICAgICBzdGFydFBvc2l0aW9uOiBWZWN0b3IyZixcclxuICAgICAgZ29hbFBvc2l0aW9uOiBWZWN0b3IyZixcclxuICAgICAgcmFkaXVzOiBudW1iZXJcclxuICAgICkgPT4gSUFnZW50XHJcbiAgKSB7XHJcbiAgICAvLyBSYW5kb20gc3RhcnQgcG9zaXRpb24gdG8gZml4ZWQgcG9zaXRpb24gb24gbGluZVxyXG4gICAgbGV0IGFnZW50czogSUFnZW50W10gPSBbXTtcclxuICAgIGxldCBzdGFydFBvc2l0aW9ucyA9IHRoaXMucG9pc3NvbkRpc2tTYW1wbGUod2lkdGgsIGhlaWdodCwgbiwgNTApO1xyXG4gICAgY29uc3QgY2VudHJlID0gbmV3IFZlY3RvcjJmKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcclxuICAgICAgY29uc3QgYWdlbnQgPSBhZ2VudENvbnN0cnVjdG9yKFxyXG4gICAgICAgIGksXHJcbiAgICAgICAgc3RhcnRQb3NpdGlvbnNbaV0uc3VidHJhY3QoY2VudHJlKSxcclxuICAgICAgICBuZXcgVmVjdG9yMmYoKChpICsgMSkgLyAobiArIDEpIC0gMSAvIDIpICogd2lkdGgsIDApLFxyXG4gICAgICAgIDIwXHJcbiAgICAgICk7XHJcbiAgICAgIGFnZW50cy5wdXNoKGFnZW50KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyBhZ2VudHM6IGFnZW50cyB9IGFzIElDb25maWd1cmF0aW9uO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIENpcmNsZVRvQ2lyY2xlKFxyXG4gICAgbjogbnVtYmVyLFxyXG4gICAgd2lkdGg6IG51bWJlcixcclxuICAgIGhlaWdodDogbnVtYmVyLFxyXG4gICAgYWdlbnRDb25zdHJ1Y3RvcjogKFxyXG4gICAgICBpZDogbnVtYmVyLFxyXG4gICAgICBzdGFydFBvc2l0aW9uOiBWZWN0b3IyZixcclxuICAgICAgZ29hbFBvc2l0aW9uOiBWZWN0b3IyZixcclxuICAgICAgcmFkaXVzOiBudW1iZXJcclxuICAgICkgPT4gSUFnZW50XHJcbiAgKSB7XHJcbiAgICAvLyBQb3NpdGlvbiBvbiByYWRpdXMgb2YgY2lyY2xlIHRvIG9wcG9zaXRlIHBvaW50XHJcbiAgICBsZXQgYWdlbnRzOiBJQWdlbnRbXSA9IFtdO1xyXG4gICAgY29uc3QgcmFkaXVzID0gaGVpZ2h0IC8gMiAtIDI1O1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGFuZ2xlID0gKDIgKiBNYXRoLlBJICogaSkgLyBuO1xyXG4gICAgICBjb25zdCBhZ2VudCA9IGFnZW50Q29uc3RydWN0b3IoXHJcbiAgICAgICAgaSxcclxuICAgICAgICBuZXcgVmVjdG9yMmYocmFkaXVzICogTWF0aC5jb3MoYW5nbGUpLCByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSkpLFxyXG4gICAgICAgIG5ldyBWZWN0b3IyZihcclxuICAgICAgICAgIHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlICsgTWF0aC5QSSksXHJcbiAgICAgICAgICByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSArIE1hdGguUEkpXHJcbiAgICAgICAgKSxcclxuICAgICAgICAyMFxyXG4gICAgICApO1xyXG4gICAgICBhZ2VudHMucHVzaChhZ2VudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHsgYWdlbnRzOiBhZ2VudHMgfSBhcyBJQ29uZmlndXJhdGlvbjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBHcmlkVG9HcmlkKFxyXG4gICAgbjogbnVtYmVyLFxyXG4gICAgd2lkdGg6IG51bWJlcixcclxuICAgIGhlaWdodDogbnVtYmVyLFxyXG4gICAgYWdlbnRDb25zdHJ1Y3RvcjogKFxyXG4gICAgICBpZDogbnVtYmVyLFxyXG4gICAgICBzdGFydFBvc2l0aW9uOiBWZWN0b3IyZixcclxuICAgICAgZ29hbFBvc2l0aW9uOiBWZWN0b3IyZixcclxuICAgICAgcmFkaXVzOiBudW1iZXJcclxuICAgICkgPT4gSUFnZW50XHJcbiAgKSB7XHJcbiAgICAvLyBUd28gb3Bwb3NpbmcgZ3JpZHMgb2YgYWdlbnRzIHBhc3NpbmcgdGhyb3VnaCBlYWNob3RoZXJcclxuICAgIGxldCBhZ2VudHM6IElBZ2VudFtdID0gW107XHJcbiAgICBjb25zdCBncmlkU2l6ZSA9IE1hdGguY2VpbChNYXRoLnNxcnQobiAvIDIpKTtcclxuICAgIGNvbnN0IG9mZnNldCA9IDkwO1xyXG4gICAgbGV0IHggPSAzMCAtIHdpZHRoIC8gMjtcclxuICAgIGxldCB5ID0gLSgoZ3JpZFNpemUgLSAxKSAvIDIpICogb2Zmc2V0O1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGlkeCA9IE1hdGguZmxvb3IoaSAvIDIpO1xyXG4gICAgICBjb25zdCByb3cgPSBNYXRoLmZsb29yKGlkeCAvIGdyaWRTaXplKTtcclxuICAgICAgY29uc3QgY29sID0gaWR4ICUgZ3JpZFNpemU7XHJcblxyXG4gICAgICBpZiAoaSAlIDIgPT0gMCkge1xyXG4gICAgICAgIC8vIExIU1xyXG4gICAgICAgIGNvbnN0IGFnZW50ID0gYWdlbnRDb25zdHJ1Y3RvcihcclxuICAgICAgICAgIGksXHJcbiAgICAgICAgICBuZXcgVmVjdG9yMmYoeCArIChncmlkU2l6ZSAtIDEgLSBjb2wpICogb2Zmc2V0LCB5ICsgcm93ICogb2Zmc2V0KSxcclxuICAgICAgICAgIG5ldyBWZWN0b3IyZigteCAtIGNvbCAqIG9mZnNldCwgeSArIHJvdyAqIG9mZnNldCksXHJcbiAgICAgICAgICAyMFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgYWdlbnRzLnB1c2goYWdlbnQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIFJIU1xyXG4gICAgICAgIGNvbnN0IGFnZW50ID0gYWdlbnRDb25zdHJ1Y3RvcihcclxuICAgICAgICAgIGksXHJcbiAgICAgICAgICBuZXcgVmVjdG9yMmYoLXggLSAoZ3JpZFNpemUgLSAxIC0gY29sKSAqIG9mZnNldCwgeSArIHJvdyAqIG9mZnNldCksXHJcbiAgICAgICAgICBuZXcgVmVjdG9yMmYoeCArIGNvbCAqIG9mZnNldCwgeSArIHJvdyAqIG9mZnNldCksXHJcbiAgICAgICAgICAyMFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgYWdlbnRzLnB1c2goYWdlbnQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHsgYWdlbnRzOiBhZ2VudHMgfSBhcyBJQ29uZmlndXJhdGlvbjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIHBvaXNzb25EaXNrU2FtcGxlKFxyXG4gICAgeFJhbmdlOiBudW1iZXIsXHJcbiAgICB5UmFuZ2U6IG51bWJlcixcclxuICAgIG46IG51bWJlcixcclxuICAgIHRocmVzaG9sZDogbnVtYmVyXHJcbiAgKTogVmVjdG9yMmZbXSB7XHJcbiAgICBsZXQgc2FtcGxlczogVmVjdG9yMmZbXSA9IFtdO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgIGxldCByZXNhbXBsZSA9IHRydWU7XHJcbiAgICAgIGxldCBwb3M6IFZlY3RvcjJmO1xyXG5cclxuICAgICAgd2hpbGUgKHJlc2FtcGxlKSB7XHJcbiAgICAgICAgcmVzYW1wbGUgPSBmYWxzZTtcclxuICAgICAgICBwb3MgPSBuZXcgVmVjdG9yMmYoeFJhbmdlICogTWF0aC5yYW5kb20oKSwgeVJhbmdlICogTWF0aC5yYW5kb20oKSk7XHJcblxyXG4gICAgICAgIHNhbXBsZXMuZm9yRWFjaCgoc2FtcGxlKSA9PiB7XHJcbiAgICAgICAgICBpZiAocG9zLnN1YnRyYWN0KHNhbXBsZSkubWFnbml0dWRlU3FyZCgpIDwgdGhyZXNob2xkICoqIDIpIHtcclxuICAgICAgICAgICAgcmVzYW1wbGUgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzYW1wbGVzLnB1c2gocG9zKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2FtcGxlcztcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSUFnZW50Q29sbGVjdGlvbiB9IGZyb20gXCIuL0lBZ2VudENvbGxlY3Rpb25cIjtcclxuaW1wb3J0IHsgSUFnZW50IH0gZnJvbSBcIi4vSUFnZW50XCI7XHJcblxyXG5pbnRlcmZhY2UgTm9kZSB7XHJcbiAgYWdlbnQ6IElBZ2VudDtcclxuICBsZWZ0OiBOb2RlO1xyXG4gIHJpZ2h0OiBOb2RlO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQWdlbnRUcmVlIGltcGxlbWVudHMgSUFnZW50Q29sbGVjdGlvbiB7XHJcbiAgcHJpdmF0ZSBfYWdlbnRzOiBJQWdlbnRbXTtcclxuICBwcml2YXRlIF9yb290OiBOb2RlO1xyXG5cclxuICBpbml0KGFnZW50czogSUFnZW50W10pOiB2b2lkIHtcclxuICAgIHRoaXMuX2FnZW50cyA9IGFnZW50cztcclxuICAgIHRoaXMuX3Jvb3QgPSB0aGlzLmNvbnN0cnVjdFRyZWUodGhpcy5fYWdlbnRzLCB0cnVlKTtcclxuICB9XHJcblxyXG4gIGdldEFsbCgpOiBJQWdlbnRbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5fYWdlbnRzO1xyXG4gIH1cclxuXHJcbiAgZ2V0TmVpZ2hib3Vyc0luUmFuZ2VSZWN0aWxpbmVhcihhZ2VudDogSUFnZW50LCByYW5nZTogbnVtYmVyKTogSUFnZW50W10ge1xyXG4gICAgbGV0IG1pblggPSBhZ2VudC5nZXRQb3NpdGlvbigpLnggLSByYW5nZTtcclxuICAgIGxldCBtaW5ZID0gYWdlbnQuZ2V0UG9zaXRpb24oKS55IC0gcmFuZ2U7XHJcbiAgICBsZXQgbWF4WCA9IGFnZW50LmdldFBvc2l0aW9uKCkueCArIHJhbmdlO1xyXG4gICAgbGV0IG1heFkgPSBhZ2VudC5nZXRQb3NpdGlvbigpLnkgKyByYW5nZTtcclxuXHJcbiAgICBsZXQgY2FuZGlkYXRlcyA9IHRoaXMucmFuZ2VTZWFyY2godGhpcy5fcm9vdCwgbWluWCwgbWluWSwgbWF4WCwgbWF4WSwgdHJ1ZSk7XHJcbiAgICByZXR1cm4gY2FuZGlkYXRlcy5maWx0ZXIoKG90aGVyKSA9PiBvdGhlci5JZCAhPT0gYWdlbnQuSWQpO1xyXG4gIH1cclxuXHJcbiAgZ2V0TmVpZ2hib3Vyc0luUmFuZ2VFdWNsaWRlYW4oYWdlbnQ6IElBZ2VudCwgcmFuZ2U6IG51bWJlcik6IElBZ2VudFtdIHtcclxuICAgIGxldCBjYW5kaWRhdGVzID0gdGhpcy5nZXROZWlnaGJvdXJzSW5SYW5nZVJlY3RpbGluZWFyKGFnZW50LCByYW5nZSk7XHJcbiAgICByZXR1cm4gY2FuZGlkYXRlcy5maWx0ZXIoXHJcbiAgICAgIChvdGhlcikgPT5cclxuICAgICAgICBhZ2VudC5nZXRQb3NpdGlvbigpLnN1YnRyYWN0KG90aGVyLmdldFBvc2l0aW9uKCkpLm1hZ25pdHVkZVNxcmQoKSA8PVxyXG4gICAgICAgIHJhbmdlICoqIDJcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBmb3JFYWNoKGZ1bjogKGFnZW50OiBJQWdlbnQpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMuX2FnZW50cy5mb3JFYWNoKGZ1bik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNvbnN0cnVjdFRyZWUoYWdlbnRzOiBJQWdlbnRbXSwgeEF4aXM6IGJvb2xlYW4pOiBOb2RlIHtcclxuICAgIGlmIChhZ2VudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBtaWQgPSBNYXRoLmZsb29yKGFnZW50cy5sZW5ndGggLyAyKTtcclxuXHJcbiAgICBsZXQgc29ydGVkID0geEF4aXNcclxuICAgICAgPyBhZ2VudHMuc29ydCgoYSwgYikgPT4gYS5nZXRQb3NpdGlvbigpLnggLSBiLmdldFBvc2l0aW9uKCkueClcclxuICAgICAgOiBhZ2VudHMuc29ydCgoYSwgYikgPT4gYS5nZXRQb3NpdGlvbigpLnkgLSBiLmdldFBvc2l0aW9uKCkueSk7XHJcblxyXG4gICAgbGV0IGxlZnQgPSB0aGlzLmNvbnN0cnVjdFRyZWUoc29ydGVkLnNsaWNlKDAsIG1pZCksICF4QXhpcyk7XHJcbiAgICBsZXQgcmlnaHQgPSB0aGlzLmNvbnN0cnVjdFRyZWUoXHJcbiAgICAgIHNvcnRlZC5zbGljZShtaWQgKyAxLCBhZ2VudHMubGVuZ3RoKSxcclxuICAgICAgIXhBeGlzXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiB7IGFnZW50OiBhZ2VudHNbbWlkXSwgbGVmdDogbGVmdCwgcmlnaHQ6IHJpZ2h0IH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJhbmdlU2VhcmNoKFxyXG4gICAgcm9vdDogTm9kZSxcclxuICAgIG1pblg6IG51bWJlcixcclxuICAgIG1pblk6IG51bWJlcixcclxuICAgIG1heFg6IG51bWJlcixcclxuICAgIG1heFk6IG51bWJlcixcclxuICAgIHhBeGlzOiBib29sZWFuXHJcbiAgKTogSUFnZW50W10ge1xyXG4gICAgaWYgKHJvb3QgPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJlczogSUFnZW50W10gPSBbXTtcclxuICAgIGlmICh4QXhpcykge1xyXG4gICAgICAvLyBJZiB4IDw9IG1heFggbmVlZCB0byBjaGVjayByaWdodCBzdWJ0cmVlXHJcbiAgICAgIGlmIChyb290LmFnZW50LmdldFBvc2l0aW9uKCkueCA8PSBtYXhYKSB7XHJcbiAgICAgICAgcmVzID0gcmVzLmNvbmNhdChcclxuICAgICAgICAgIHRoaXMucmFuZ2VTZWFyY2gocm9vdC5yaWdodCwgbWluWCwgbWluWSwgbWF4WCwgbWF4WSwgIXhBeGlzKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIElmIHggPj0gbWluWCBuZWVkIHRvIGNoZWNrIGxlZnQgc3VidHJlZVxyXG4gICAgICBpZiAocm9vdC5hZ2VudC5nZXRQb3NpdGlvbigpLnggPj0gbWluWCkge1xyXG4gICAgICAgIHJlcyA9IHJlcy5jb25jYXQoXHJcbiAgICAgICAgICB0aGlzLnJhbmdlU2VhcmNoKHJvb3QubGVmdCwgbWluWCwgbWluWSwgbWF4WCwgbWF4WSwgIXhBeGlzKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIElmIHkgPD0gbWF4WSBuZWVkIHRvIGNoZWNrIHJpZ2h0IHN1YnRyZWVcclxuICAgICAgaWYgKHJvb3QuYWdlbnQuZ2V0UG9zaXRpb24oKS55IDw9IG1heFkpIHtcclxuICAgICAgICByZXMgPSByZXMuY29uY2F0KFxyXG4gICAgICAgICAgdGhpcy5yYW5nZVNlYXJjaChyb290LnJpZ2h0LCBtaW5YLCBtaW5ZLCBtYXhYLCBtYXhZLCAheEF4aXMpXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSWYgeSA+PSBtaW5ZIG5lZWQgdG8gY2hlY2sgbGVmdCBzdWJ0cmVlXHJcbiAgICAgIGlmIChyb290LmFnZW50LmdldFBvc2l0aW9uKCkueSA+PSBtaW5ZKSB7XHJcbiAgICAgICAgcmVzID0gcmVzLmNvbmNhdChcclxuICAgICAgICAgIHRoaXMucmFuZ2VTZWFyY2gocm9vdC5sZWZ0LCBtaW5YLCBtaW5ZLCBtYXhYLCBtYXhZLCAheEF4aXMpXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHRoZSBhZ2VudCBpcyBpbiByYW5nZSByYW5nZSBhZGQgdG8gdGhlIHJlc3VsdFxyXG4gICAgaWYgKFxyXG4gICAgICByb290LmFnZW50LmdldFBvc2l0aW9uKCkueCA+PSBtaW5YICYmXHJcbiAgICAgIHJvb3QuYWdlbnQuZ2V0UG9zaXRpb24oKS55ID49IG1pblkgJiZcclxuICAgICAgcm9vdC5hZ2VudC5nZXRQb3NpdGlvbigpLnggPD0gbWF4WCAmJlxyXG4gICAgICByb290LmFnZW50LmdldFBvc2l0aW9uKCkueSA8PSBtYXhZXHJcbiAgICApIHtcclxuICAgICAgcmVzLnB1c2gocm9vdC5hZ2VudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIENvbG91ciB7XHJcbiAgcjogbnVtYmVyO1xyXG4gIGc6IG51bWJlcjtcclxuICBiOiBudW1iZXI7XHJcblxyXG4gIHN0YXRpYyBXaGl0ZTogQ29sb3VyID0ge1xyXG4gICAgcjogMjU1LFxyXG4gICAgZzogMjU1LFxyXG4gICAgYjogMjU1LFxyXG4gIH07XHJcblxyXG4gIHN0YXRpYyBSZWQ6IENvbG91ciA9IHtcclxuICAgIHI6IDI1NSxcclxuICAgIGc6IDAsXHJcbiAgICBiOiAwLFxyXG4gIH07XHJcblxyXG4gIHN0YXRpYyBHcmVlbjogQ29sb3VyID0ge1xyXG4gICAgcjogMCxcclxuICAgIGc6IDI1NSxcclxuICAgIGI6IDAsXHJcbiAgfTtcclxuXHJcbiAgc3RhdGljIEZyb21Ic3YoaDogbnVtYmVyLCBzOiBudW1iZXIsIHY6IG51bWJlcik6IENvbG91ciB7XHJcbiAgICAvLyBhc3N1bWluZyBoc3YgdmFsdWVzIGluIHJhbmdlIDAtMVxyXG4gICAgaCAqPSA2O1xyXG5cclxuICAgIGNvbnN0IGZyYWN0ID0gaCAtIE1hdGguZmxvb3IoaCk7XHJcbiAgICBjb25zdCBQID0gdiAqICgxIC0gcyk7XHJcbiAgICBjb25zdCBRID0gdiAqICgxIC0gcyAqIGZyYWN0KTtcclxuICAgIGNvbnN0IFQgPSB2ICogKDEgLSBzICogKDEgLSBmcmFjdCkpO1xyXG5cclxuICAgIGlmICgwIDw9IGggJiYgaCA8IDEpIHtcclxuICAgICAgcmV0dXJuIHsgcjogdiAqIDI1NSwgZzogVCAqIDI1NSwgYjogUCAqIDI1NSB9O1xyXG4gICAgfSBlbHNlIGlmICgxIDw9IGggJiYgaCA8IDIpIHtcclxuICAgICAgcmV0dXJuIHsgcjogUSAqIDI1NSwgZzogdiAqIDI1NSwgYjogUCAqIDI1NSB9O1xyXG4gICAgfSBlbHNlIGlmICgyIDw9IGggJiYgaCA8IDMpIHtcclxuICAgICAgcmV0dXJuIHsgcjogUCAqIDI1NSwgZzogdiAqIDI1NSwgYjogVCAqIDI1NSB9O1xyXG4gICAgfSBlbHNlIGlmICgzIDw9IGggJiYgaCA8IDQpIHtcclxuICAgICAgcmV0dXJuIHsgcjogUCAqIDI1NSwgZzogUSAqIDI1NSwgYjogdiAqIDI1NSB9O1xyXG4gICAgfSBlbHNlIGlmICg0IDw9IGggJiYgaCA8IDUpIHtcclxuICAgICAgcmV0dXJuIHsgcjogVCAqIDI1NSwgZzogUCAqIDI1NSwgYjogdiAqIDI1NSB9O1xyXG4gICAgfSBlbHNlIGlmICg1IDw9IGggJiYgaCA8IDYpIHtcclxuICAgICAgcmV0dXJuIHsgcjogdiAqIDI1NSwgZzogUCAqIDI1NSwgYjogUSAqIDI1NSB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHsgcjogMCwgZzogMCwgYjogMCB9O1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb2xvdXIgfSBmcm9tIFwiLi4vQ29sb3VyXCI7XHJcbmltcG9ydCB7IElBZ2VudCB9IGZyb20gXCIuLi9JQWdlbnRcIjtcclxuaW1wb3J0IHsgVmVjdG9yMmYgfSBmcm9tIFwiLi4vVmVjdG9yMmZcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCYXNpY0FnZW50IGltcGxlbWVudHMgSUFnZW50IHtcclxuICBwdWJsaWMgcmVhZG9ubHkgSWQ6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgUmFkaXVzOiBudW1iZXI7XHJcblxyXG4gIHByaXZhdGUgX3Bvc2l0aW9uOiBWZWN0b3IyZjtcclxuICBwcml2YXRlIF9nb2FsUG9zaXRpb246IFZlY3RvcjJmO1xyXG4gIHByaXZhdGUgX2RpcmVjdGlvbjogVmVjdG9yMmY7XHJcblxyXG4gIHByaXZhdGUgX2lzRG9uZTogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBpZDogbnVtYmVyLFxyXG4gICAgc3RhcnRQb3NpdGlvbjogVmVjdG9yMmYsXHJcbiAgICBnb2FsUG9zaXRpb246IFZlY3RvcjJmLFxyXG4gICAgcmFkaXVzOiBudW1iZXJcclxuICApIHtcclxuICAgIHRoaXMuSWQgPSBpZDtcclxuICAgIHRoaXMuX3Bvc2l0aW9uID0gc3RhcnRQb3NpdGlvbjtcclxuICAgIHRoaXMuX2dvYWxQb3NpdGlvbiA9IGdvYWxQb3NpdGlvbjtcclxuICAgIHRoaXMuUmFkaXVzID0gcmFkaXVzO1xyXG4gICAgdGhpcy5fZGlyZWN0aW9uID0gbmV3IFZlY3RvcjJmKDAsIDApO1xyXG5cclxuICAgIHRoaXMuX2lzRG9uZSA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgZ2V0UG9zaXRpb24oKTogVmVjdG9yMmYge1xyXG4gICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGlyZWN0aW9uKCk6IFZlY3RvcjJmIHtcclxuICAgIHJldHVybiB0aGlzLl9kaXJlY3Rpb247XHJcbiAgfVxyXG5cclxuICBnZXRDb2xvdXIoKSB7XHJcbiAgICBpZiAodGhpcy5faXNEb25lKSB7XHJcbiAgICAgIHJldHVybiBDb2xvdXIuV2hpdGU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gQ29sb3VyLkdyZWVuO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGRlbHRhVDogbnVtYmVyLCBfYWdlbnRzOiBJQWdlbnRbXSk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX2lzRG9uZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGdvYWxEaXJlY3Rpb24gPSB0aGlzLl9nb2FsUG9zaXRpb24uc3VidHJhY3QodGhpcy5fcG9zaXRpb24pO1xyXG4gICAgbGV0IGdvYWxEaXN0YW5jZSA9IGdvYWxEaXJlY3Rpb24ubWFnbml0dWRlKCk7XHJcblxyXG4gICAgaWYgKGdvYWxEaXN0YW5jZSA+IChkZWx0YVQgKiA2MCkgLyAxMDAwKSB7XHJcbiAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IGdvYWxEaXJlY3Rpb24ubm9ybWFsaXNlKCk7XHJcbiAgICAgIHRoaXMuX3Bvc2l0aW9uID0gdGhpcy5fcG9zaXRpb24uYWRkKFxyXG4gICAgICAgIHRoaXMuX2RpcmVjdGlvbi5tdWx0aXBseSgoZGVsdGFUICogNjApIC8gMTAwMClcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX3Bvc2l0aW9uID0gdGhpcy5fZ29hbFBvc2l0aW9uO1xyXG4gICAgICB0aGlzLl9pc0RvbmUgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaXNEb25lKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzRG9uZTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29sb3VyIH0gZnJvbSBcIi4uL0NvbG91clwiO1xyXG5pbXBvcnQgeyBJQWdlbnQgfSBmcm9tIFwiLi4vSUFnZW50XCI7XHJcbmltcG9ydCB7IFZlY3RvcjJmIH0gZnJvbSBcIi4uL1ZlY3RvcjJmXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU3RvcEFnZW50IGltcGxlbWVudHMgSUFnZW50IHtcclxuICBwdWJsaWMgcmVhZG9ubHkgSWQ6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgUmFkaXVzOiBudW1iZXI7XHJcblxyXG4gIHByaXZhdGUgX3Bvc2l0aW9uOiBWZWN0b3IyZjtcclxuICBwcml2YXRlIF9nb2FsUG9zaXRpb246IFZlY3RvcjJmO1xyXG4gIHByaXZhdGUgX2RpcmVjdGlvbjogVmVjdG9yMmY7XHJcblxyXG4gIHByaXZhdGUgX2lzRG9uZTogYm9vbGVhbjtcclxuICBwcml2YXRlIF9pc1N0dWNrOiBib29sZWFuO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGlkOiBudW1iZXIsXHJcbiAgICBzdGFydFBvc2l0aW9uOiBWZWN0b3IyZixcclxuICAgIGdvYWxQb3NpdGlvbjogVmVjdG9yMmYsXHJcbiAgICByYWRpdXM6IG51bWJlclxyXG4gICkge1xyXG4gICAgdGhpcy5JZCA9IGlkO1xyXG4gICAgdGhpcy5fcG9zaXRpb24gPSBzdGFydFBvc2l0aW9uO1xyXG4gICAgdGhpcy5fZ29hbFBvc2l0aW9uID0gZ29hbFBvc2l0aW9uO1xyXG4gICAgdGhpcy5SYWRpdXMgPSByYWRpdXM7XHJcbiAgICB0aGlzLl9kaXJlY3Rpb24gPSBuZXcgVmVjdG9yMmYoMCwgMCk7XHJcblxyXG4gICAgdGhpcy5faXNEb25lID0gZmFsc2U7XHJcbiAgICB0aGlzLl9pc1N0dWNrID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBnZXRQb3NpdGlvbigpOiBWZWN0b3IyZiB7XHJcbiAgICByZXR1cm4gdGhpcy5fcG9zaXRpb247XHJcbiAgfVxyXG5cclxuICBnZXREaXJlY3Rpb24oKTogVmVjdG9yMmYge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RpcmVjdGlvbjtcclxuICB9XHJcblxyXG4gIGdldENvbG91cigpOiBDb2xvdXIge1xyXG4gICAgaWYgKHRoaXMuX2lzRG9uZSkge1xyXG4gICAgICByZXR1cm4gQ29sb3VyLldoaXRlO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLl9pc1N0dWNrKSB7XHJcbiAgICAgIHJldHVybiBDb2xvdXIuUmVkO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIENvbG91ci5HcmVlbjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZShkZWx0YVQ6IG51bWJlciwgYWdlbnRzOiBJQWdlbnRbXSk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX2lzRG9uZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGdvYWxEaXJlY3Rpb24gPSB0aGlzLl9nb2FsUG9zaXRpb24uc3VidHJhY3QodGhpcy5fcG9zaXRpb24pO1xyXG4gICAgbGV0IGdvYWxEaXN0YW5jZSA9IGdvYWxEaXJlY3Rpb24ubWFnbml0dWRlKCk7XHJcblxyXG4gICAgaWYgKGdvYWxEaXN0YW5jZSA+IChkZWx0YVQgKiA2MCkgLyAxMDAwKSB7XHJcbiAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IGdvYWxEaXJlY3Rpb24ubm9ybWFsaXNlKCk7XHJcbiAgICAgIGxldCBoZWFkaW5nID0gdGhpcy5fcG9zaXRpb24uYWRkKHRoaXMuX2RpcmVjdGlvbi5tdWx0aXBseSgyMCkpO1xyXG5cclxuICAgICAgdGhpcy5faXNTdHVjayA9IGZhbHNlO1xyXG4gICAgICBhZ2VudHMuZm9yRWFjaCgoYWdlbnQpID0+IHtcclxuICAgICAgICBpZiAoYWdlbnQuSWQgIT0gdGhpcy5JZCAmJiB0aGlzLmNvbGxpZGVzKGFnZW50LCBoZWFkaW5nKSkge1xyXG4gICAgICAgICAgdGhpcy5faXNTdHVjayA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmICghdGhpcy5faXNTdHVjaykge1xyXG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gdGhpcy5fcG9zaXRpb24uYWRkKFxyXG4gICAgICAgICAgdGhpcy5fZGlyZWN0aW9uLm11bHRpcGx5KChkZWx0YVQgKiA2MCkgLyAxMDAwKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX3Bvc2l0aW9uID0gdGhpcy5fZ29hbFBvc2l0aW9uO1xyXG4gICAgICB0aGlzLl9pc0RvbmUgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaXNEb25lKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzRG9uZTtcclxuICB9XHJcblxyXG4gIGNvbGxpZGVzKGFnZW50OiBJQWdlbnQsIHBvc2l0aW9uOiBWZWN0b3IyZik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgYWdlbnQuZ2V0UG9zaXRpb24oKS5zdWJ0cmFjdChwb3NpdGlvbikubWFnbml0dWRlKCkgPFxyXG4gICAgICBhZ2VudC5SYWRpdXMgKyB0aGlzLlJhZGl1c1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVmVjdG9yMmYgfSBmcm9tIFwiLi9WZWN0b3IyZlwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZlbG9jaXR5T2JzdGFjbGUge1xyXG4gIHZlcnRleDogVmVjdG9yMmY7XHJcbiAgdGFuZ2VudDE6IFZlY3RvcjJmO1xyXG4gIHRhbmdlbnQyOiBWZWN0b3IyZjtcclxuXHJcbiAgY29uc3RydWN0b3IodmVydGV4OiBWZWN0b3IyZiwgdGFuZ2VudDE6IFZlY3RvcjJmLCB0YW5nZW50MjogVmVjdG9yMmYpIHtcclxuICAgIHRoaXMudmVydGV4ID0gdmVydGV4O1xyXG4gICAgdGhpcy50YW5nZW50MSA9IHRhbmdlbnQxO1xyXG4gICAgdGhpcy50YW5nZW50MiA9IHRhbmdlbnQyO1xyXG4gIH1cclxuXHJcbiAgY29udGFpbnModmVsb2NpdHk6IFZlY3RvcjJmKTogYm9vbGVhbiB7XHJcbiAgICAvLyBGaXJzdCBoYWxmLXBsYW5lXHJcbiAgICBjb25zdCBkZXRlcm1pbmFudDEgPVxyXG4gICAgICAodGhpcy50YW5nZW50MS54IC0gdGhpcy52ZXJ0ZXgueCkgKiAodmVsb2NpdHkueSAtIHRoaXMudmVydGV4LnkpIC1cclxuICAgICAgKHRoaXMudGFuZ2VudDEueSAtIHRoaXMudmVydGV4LnkpICogKHZlbG9jaXR5LnggLSB0aGlzLnZlcnRleC54KTtcclxuXHJcbiAgICAvLyBTZWNvbmQgaGFsZi1wbGFuZVxyXG4gICAgY29uc3QgZGV0ZXJtaW5hbnQyID1cclxuICAgICAgKHRoaXMudGFuZ2VudDIueCAtIHRoaXMudmVydGV4LngpICogKHZlbG9jaXR5LnkgLSB0aGlzLnZlcnRleC55KSAtXHJcbiAgICAgICh0aGlzLnRhbmdlbnQyLnkgLSB0aGlzLnZlcnRleC55KSAqICh2ZWxvY2l0eS54IC0gdGhpcy52ZXJ0ZXgueCk7XHJcblxyXG4gICAgcmV0dXJuIGRldGVybWluYW50MSA+IDAgJiYgZGV0ZXJtaW5hbnQyIDwgMDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29sb3VyIH0gZnJvbSBcIi4uL0NvbG91clwiO1xyXG5pbXBvcnQgeyBJQWdlbnQgfSBmcm9tIFwiLi4vSUFnZW50XCI7XHJcbmltcG9ydCB7IFZlY3RvcjJmIH0gZnJvbSBcIi4uL1ZlY3RvcjJmXCI7XHJcbmltcG9ydCB7IFZlbG9jaXR5T2JzdGFjbGUgfSBmcm9tIFwiLi4vVmVsb2NpdHlPYnN0YWNsZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZPQWdlbnQgaW1wbGVtZW50cyBJQWdlbnQge1xyXG4gIFJhZGl1czogbnVtYmVyO1xyXG4gIElkOiBudW1iZXI7XHJcblxyXG4gIE1BWF9WRUxPQ0lUWSA9IDEuMDtcclxuICBNQVhfQUNDRUxFUkFUSU9OID0gMC41O1xyXG5cclxuICBwcml2YXRlIF9wb3NpdGlvbjogVmVjdG9yMmY7XHJcbiAgcHJpdmF0ZSBfZ29hbFBvc2l0aW9uOiBWZWN0b3IyZjtcclxuICBwcml2YXRlIF9kaXJlY3Rpb246IFZlY3RvcjJmO1xyXG5cclxuICBwcml2YXRlIF9pc0RvbmU6IGJvb2xlYW47XHJcbiAgcHJpdmF0ZSBfY29sb3VyOiBDb2xvdXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgaWQ6IG51bWJlcixcclxuICAgIHN0YXJ0UG9zaXRpb246IFZlY3RvcjJmLFxyXG4gICAgZ29hbFBvc2l0aW9uOiBWZWN0b3IyZixcclxuICAgIHJhZGl1czogbnVtYmVyXHJcbiAgKSB7XHJcbiAgICB0aGlzLklkID0gaWQ7XHJcbiAgICB0aGlzLl9wb3NpdGlvbiA9IHN0YXJ0UG9zaXRpb247XHJcbiAgICB0aGlzLl9nb2FsUG9zaXRpb24gPSBnb2FsUG9zaXRpb247XHJcbiAgICB0aGlzLlJhZGl1cyA9IHJhZGl1cztcclxuICAgIHRoaXMuX2RpcmVjdGlvbiA9IG5ldyBWZWN0b3IyZigwLCAwKTtcclxuXHJcbiAgICB0aGlzLl9pc0RvbmUgPSBmYWxzZTtcclxuICAgIHRoaXMuX2NvbG91ciA9IENvbG91ci5HcmVlbjtcclxuICB9XHJcblxyXG4gIGdldFBvc2l0aW9uKCk6IFZlY3RvcjJmIHtcclxuICAgIHJldHVybiB0aGlzLl9wb3NpdGlvbjtcclxuICB9XHJcblxyXG4gIGdldERpcmVjdGlvbigpOiBWZWN0b3IyZiB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGlyZWN0aW9uO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q29sb3VyKCk6IENvbG91ciB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29sb3VyO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKF9kZWx0YVQ6IG51bWJlciwgbmVpZ2hib3VyczogSUFnZW50W10pOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9pc0RvbmUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHNwZWVkID0gMC41O1xyXG4gICAgY29uc3QgcHJlZmVycmVkVmVsb2NpdHkgPSB0aGlzLmdldFByZWZlcnJlZFZlbG9jaXR5KHNwZWVkKTtcclxuICAgIGNvbnN0IGdvYWxEaXN0U3FyZCA9IHRoaXMuX2dvYWxQb3NpdGlvblxyXG4gICAgICAuc3VidHJhY3QodGhpcy5nZXRQb3NpdGlvbigpKVxyXG4gICAgICAubWFnbml0dWRlU3FyZCgpO1xyXG5cclxuICAgIGxldCBzYWZlID0gdHJ1ZTtcclxuICAgIGxldCBjb2xsaXNpb247XHJcbiAgICBsZXQgYWdlbnQ7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5laWdoYm91cnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgLy8gU2tpcCBhZ2VudHMgZnVydGhlciBhd2F5IHRoYW4gZ29hbFxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgbmVpZ2hib3Vyc1tpXVxyXG4gICAgICAgICAgLmdldFBvc2l0aW9uKClcclxuICAgICAgICAgIC5zdWJ0cmFjdCh0aGlzLmdldFBvc2l0aW9uKCkpXHJcbiAgICAgICAgICAubWFnbml0dWRlU3FyZCgpID4gZ29hbERpc3RTcXJkXHJcbiAgICAgICkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDaGVjayB3aGV0aGVyIHByZWZlcnJlZCB2ZWxvY2l0eSBpcyBzYWZlXHJcbiAgICAgIGNvbnN0IHZlbG9jaXR5T2JzdGFjbGUgPSB0aGlzLmdldFZlbG9jaXR5T2JzdGFjbGUobmVpZ2hib3Vyc1tpXSk7XHJcbiAgICAgIGlmIChcclxuICAgICAgICB2ZWxvY2l0eU9ic3RhY2xlICE9IG51bGwgJiZcclxuICAgICAgICB2ZWxvY2l0eU9ic3RhY2xlLmNvbnRhaW5zKHByZWZlcnJlZFZlbG9jaXR5KVxyXG4gICAgICApIHtcclxuICAgICAgICBzYWZlID0gZmFsc2U7XHJcbiAgICAgICAgY29sbGlzaW9uID0gdmVsb2NpdHlPYnN0YWNsZTtcclxuICAgICAgICBhZ2VudCA9IGk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiBwcmVmZXJyZWQgdmVsb2NpdHkgaXMgc2FmZSwgZ28gaW4gdGhhdCBkaXJlY3Rpb25cclxuICAgIGlmIChzYWZlKSB7XHJcbiAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IHByZWZlcnJlZFZlbG9jaXR5O1xyXG4gICAgICB0aGlzLl9wb3NpdGlvbiA9IHRoaXMuX3Bvc2l0aW9uLmFkZChwcmVmZXJyZWRWZWxvY2l0eSk7XHJcbiAgICAgIHRoaXMuX2NvbG91ciA9IENvbG91ci5HcmVlbjtcclxuICAgICAgdGhpcy5jaGVja0lmRG9uZSgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbGxpc2lvbiAhPSBudWxsKSB7XHJcbiAgICAgIC8vIEVsc2UsIGNvbnNpZGVyIGNsb3Nlc3QgcG9pbnQgb24gZmlyc3QgaGFsZi1wbGFuZVxyXG4gICAgICBjb25zdCBoYWxmUGxhbmUxID0gdGhpcy5nZXRDbG9zZXN0UG9pbnRPbkxpbmUoXHJcbiAgICAgICAgY29sbGlzaW9uLnZlcnRleCxcclxuICAgICAgICBjb2xsaXNpb24udGFuZ2VudDEsXHJcbiAgICAgICAgcHJlZmVycmVkVmVsb2NpdHlcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmIChoYWxmUGxhbmUxLm1hZ25pdHVkZSgpIDw9IHNwZWVkKSB7XHJcbiAgICAgICAgc2FmZSA9IHRydWU7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZWlnaGJvdXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBpZiAoaSAhPSBhZ2VudCkge1xyXG4gICAgICAgICAgICBjb25zdCB2ZWxvY2l0eU9ic3RhY2xlID0gdGhpcy5nZXRWZWxvY2l0eU9ic3RhY2xlKG5laWdoYm91cnNbaV0pO1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgdmVsb2NpdHlPYnN0YWNsZSAhPSBudWxsICYmXHJcbiAgICAgICAgICAgICAgdmVsb2NpdHlPYnN0YWNsZS5jb250YWlucyhoYWxmUGxhbmUxKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICBzYWZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzYWZlKSB7XHJcbiAgICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBoYWxmUGxhbmUxO1xyXG4gICAgICAgICAgdGhpcy5fcG9zaXRpb24gPSB0aGlzLl9wb3NpdGlvbi5hZGQoaGFsZlBsYW5lMSk7XHJcbiAgICAgICAgICB0aGlzLnNldENvbG91cihwcmVmZXJyZWRWZWxvY2l0eSk7XHJcbiAgICAgICAgICB0aGlzLmNoZWNrSWZEb25lKCk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBFbHNlLCBjb25zaWRlciBjbG9zZXN0IHBvaW50IG9uIHNlY29uZCBoYWxmLXBsYW5lXHJcbiAgICAgIGNvbnN0IGhhbGZQbGFuZTIgPSB0aGlzLmdldENsb3Nlc3RQb2ludE9uTGluZShcclxuICAgICAgICBjb2xsaXNpb24udmVydGV4LFxyXG4gICAgICAgIGNvbGxpc2lvbi50YW5nZW50MixcclxuICAgICAgICBwcmVmZXJyZWRWZWxvY2l0eVxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKGhhbGZQbGFuZTEubWFnbml0dWRlKCkgPD0gc3BlZWQpIHtcclxuICAgICAgICBzYWZlID0gdHJ1ZTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5laWdoYm91cnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGlmIChpICE9IGFnZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZlbG9jaXR5T2JzdGFjbGUgPSB0aGlzLmdldFZlbG9jaXR5T2JzdGFjbGUobmVpZ2hib3Vyc1tpXSk7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICB2ZWxvY2l0eU9ic3RhY2xlICE9IG51bGwgJiZcclxuICAgICAgICAgICAgICB2ZWxvY2l0eU9ic3RhY2xlLmNvbnRhaW5zKGhhbGZQbGFuZTIpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgIHNhZmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNhZmUpIHtcclxuICAgICAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IGhhbGZQbGFuZTI7XHJcbiAgICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IHRoaXMuX3Bvc2l0aW9uLmFkZChoYWxmUGxhbmUyKTtcclxuICAgICAgICAgIHRoaXMuc2V0Q29sb3VyKHByZWZlcnJlZFZlbG9jaXR5KTtcclxuICAgICAgICAgIHRoaXMuY2hlY2tJZkRvbmUoKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBFbHNlLCBzYW1wbGUgcmFuZG9tIHZlbG9jaXRpZXMgYW5kIHNlbGVjdCB0aGUgb25lIHdpdGggdGhlIGxlYXN0IHBlbmFsdHlcclxuICAgIGNvbnN0IHNhbXBsZXMgPSAxMDA7IC8vIG51bWJlciBvZiB2ZWxvY2l0aWVzIHRvIHRyeVxyXG4gICAgY29uc3QgdyA9IDEwMDsgLy8gcGFyYW1ldGVyIGZvciBwZW5hbHR5XHJcbiAgICBjb25zdCBnb2FsRGlzdCA9IE1hdGguc3FydChnb2FsRGlzdFNxcmQpO1xyXG4gICAgbGV0IG1pblBlbmFsdHkgPSBJbmZpbml0eTtcclxuICAgIGxldCBiZXN0VmVsb2NpdHkgPSBuZXcgVmVjdG9yMmYoMCwgMCk7XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzYW1wbGVzOyBpKyspIHtcclxuICAgICAgLy8gU2FtcGxlIHZlbG9jaXR5IGZyb20gZW50aXJlIGFsbG93ZWQgdmVsb2NpdHkgc3BhY2VcclxuICAgICAgY29uc3Qgc2FtcGxlID0gbmV3IFZlY3RvcjJmKDAsIDApLnNhbXBsZShzcGVlZCk7XHJcbiAgICAgIGxldCBtaW5UaW1lVG9Db2xsaXNpb24gPSBJbmZpbml0eTtcclxuXHJcbiAgICAgIC8vIEZpbmQgdGltZSB0byBmaXJzdCBjb2xsaXNpb25cclxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZWlnaGJvdXJzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgY29uc3QgYiA9IG5laWdoYm91cnNbal07XHJcbiAgICAgICAgY29uc3QgdmVsb2NpdHlPYnN0YWNsZSA9IHRoaXMuZ2V0VmVsb2NpdHlPYnN0YWNsZShiKTtcclxuXHJcbiAgICAgICAgaWYgKHZlbG9jaXR5T2JzdGFjbGUgPT0gbnVsbCB8fCB2ZWxvY2l0eU9ic3RhY2xlLmNvbnRhaW5zKHNhbXBsZSkpIHtcclxuICAgICAgICAgIGNvbnN0IHRpbWVUb0NvbGxpc2lvbiA9IHRoaXMuZ2V0Rmlyc3RSYXlDaXJjbGVJbnRlcnNlY3Rpb24oXHJcbiAgICAgICAgICAgIGIuZ2V0UG9zaXRpb24oKS5hZGQoYi5nZXREaXJlY3Rpb24oKSksXHJcbiAgICAgICAgICAgIHRoaXMuUmFkaXVzICsgYi5SYWRpdXMsXHJcbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uLFxyXG4gICAgICAgICAgICBzYW1wbGUuc3VidHJhY3QoYi5nZXREaXJlY3Rpb24oKSlcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgaWYgKHRpbWVUb0NvbGxpc2lvbiA8IG1pblRpbWVUb0NvbGxpc2lvbikge1xyXG4gICAgICAgICAgICBtaW5UaW1lVG9Db2xsaXNpb24gPSB0aW1lVG9Db2xsaXNpb247XHJcbiAgICAgICAgICAgIGlmIChtaW5UaW1lVG9Db2xsaXNpb24gPT0gMCkge1xyXG4gICAgICAgICAgICAgIHRoaXMuc2V0Q29sb3VyKHByZWZlcnJlZFZlbG9jaXR5KTtcclxuICAgICAgICAgICAgICB0aGlzLmNoZWNrSWZEb25lKCk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDYWxjdWxhdGUgcGVuYWx0eVxyXG4gICAgICBsZXQgcGVuYWx0eTtcclxuICAgICAgaWYgKG1pblRpbWVUb0NvbGxpc2lvbiA8IGdvYWxEaXN0KSB7XHJcbiAgICAgICAgcGVuYWx0eSA9XHJcbiAgICAgICAgICB3IC8gbWluVGltZVRvQ29sbGlzaW9uICtcclxuICAgICAgICAgIHByZWZlcnJlZFZlbG9jaXR5LnN1YnRyYWN0KHNhbXBsZSkubWFnbml0dWRlKCk7IC8vIFRTIGNvcnJlY3RseSBoYW5kbGVzIGRpdmlkZSBieSB6ZXJvIG9yIGluZmluaXR5XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcGVuYWx0eSA9IHByZWZlcnJlZFZlbG9jaXR5LnN1YnRyYWN0KHNhbXBsZSkubWFnbml0dWRlKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChwZW5hbHR5IDwgbWluUGVuYWx0eSkge1xyXG4gICAgICAgIG1pblBlbmFsdHkgPSBwZW5hbHR5O1xyXG4gICAgICAgIGJlc3RWZWxvY2l0eSA9IHNhbXBsZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2RpcmVjdGlvbiA9IGJlc3RWZWxvY2l0eTtcclxuICAgIHRoaXMuX3Bvc2l0aW9uID0gdGhpcy5fcG9zaXRpb24uYWRkKGJlc3RWZWxvY2l0eSk7XHJcbiAgICB0aGlzLnNldENvbG91cihwcmVmZXJyZWRWZWxvY2l0eSk7XHJcbiAgICB0aGlzLmNoZWNrSWZEb25lKCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBpc0RvbmUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5faXNEb25lO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRQcmVmZXJyZWRWZWxvY2l0eShtYXhTcGVlZDogbnVtYmVyKTogVmVjdG9yMmYge1xyXG4gICAgY29uc3QgZ29hbERpcmVjdGlvbiA9IHRoaXMuX2dvYWxQb3NpdGlvbi5zdWJ0cmFjdCh0aGlzLl9wb3NpdGlvbik7XHJcbiAgICBjb25zdCBnb2FsRGlzdGFuY2UgPSBnb2FsRGlyZWN0aW9uLm1hZ25pdHVkZSgpO1xyXG5cclxuICAgIGlmIChnb2FsRGlzdGFuY2UgPiBtYXhTcGVlZCkge1xyXG4gICAgICByZXR1cm4gZ29hbERpcmVjdGlvbi5kaXZpZGUoZ29hbERpc3RhbmNlIC8gbWF4U3BlZWQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGdvYWxEaXJlY3Rpb247XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldFZlbG9jaXR5T2JzdGFjbGUoYjogSUFnZW50KTogVmVsb2NpdHlPYnN0YWNsZSB8IG51bGwge1xyXG4gICAgY29uc3QgdmVsb2NpdHlCID0gYi5nZXREaXJlY3Rpb24oKTtcclxuXHJcbiAgICAvLyBUcmFuc2xhdGUgb3JpZ2luIHRvIHRoaXMgYWdlbnQncyBwb3NpdGlvblxyXG4gICAgY29uc3QgcG9zaXRpb25CID0gYi5nZXRQb3NpdGlvbigpLnN1YnRyYWN0KHRoaXMuX3Bvc2l0aW9uKTtcclxuXHJcbiAgICAvLyBGaW5kIE1pbmtvd3NraSBzdW0gb2YgYWdlbnRzXHJcbiAgICBjb25zdCBjZW50cmUgPSBwb3NpdGlvbkIuYWRkKHZlbG9jaXR5Qik7XHJcbiAgICBjb25zdCByYWRpdXMgPSBiLlJhZGl1cyArIHRoaXMuUmFkaXVzO1xyXG5cclxuICAgIC8vIENhbGN1bGF0ZSBhbmdsZXNcclxuICAgIGNvbnN0IGRpZmYgPSB2ZWxvY2l0eUIuc3VidHJhY3QoY2VudHJlKTtcclxuICAgIGNvbnN0IGRpc3QgPSBkaWZmLm1hZ25pdHVkZSgpO1xyXG4gICAgaWYgKGRpc3QgPCByYWRpdXMpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdGhldGEgPSBNYXRoLmFjb3MocmFkaXVzIC8gZGlzdCk7XHJcbiAgICBjb25zdCBwaGkgPSBNYXRoLmF0YW4yKGRpZmYueSwgZGlmZi54KTtcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgdGFuZ2VudCB2ZWN0b3JzXHJcbiAgICBjb25zdCBhbmdsZTEgPSBwaGkgKyB0aGV0YTtcclxuICAgIGNvbnN0IHRhbmdlbnQxID0gbmV3IFZlY3RvcjJmKFxyXG4gICAgICBjZW50cmUueCArIHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlMSksXHJcbiAgICAgIGNlbnRyZS55ICsgcmFkaXVzICogTWF0aC5zaW4oYW5nbGUxKVxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBhbmdsZTIgPSBwaGkgLSB0aGV0YTtcclxuICAgIGNvbnN0IHRhbmdlbnQyID0gbmV3IFZlY3RvcjJmKFxyXG4gICAgICBjZW50cmUueCArIHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlMiksXHJcbiAgICAgIGNlbnRyZS55ICsgcmFkaXVzICogTWF0aC5zaW4oYW5nbGUyKVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBSZXR1cm4gdmVsb2NpdHkgb2JzdGFjbGVcclxuICAgIHJldHVybiBuZXcgVmVsb2NpdHlPYnN0YWNsZSh2ZWxvY2l0eUIsIHRhbmdlbnQxLCB0YW5nZW50Mik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldENsb3Nlc3RQb2ludE9uTGluZShcclxuICAgIGxpbmVQb2ludDogVmVjdG9yMmYsXHJcbiAgICBsaW5lRGlyZWN0aW9uOiBWZWN0b3IyZixcclxuICAgIHBvaW50OiBWZWN0b3IyZlxyXG4gICk6IFZlY3RvcjJmIHtcclxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IGxpbmVEaXJlY3Rpb24ubm9ybWFsaXNlKCk7XHJcbiAgICBjb25zdCB2ZWN0b3IgPSBwb2ludC5zdWJ0cmFjdChsaW5lUG9pbnQpO1xyXG4gICAgY29uc3QgZGlzdGFuY2UgPSB2ZWN0b3IuZG90KGRpcmVjdGlvbik7XHJcbiAgICByZXR1cm4gbGluZVBvaW50LmFkZChkaXJlY3Rpb24ubXVsdGlwbHkoZGlzdGFuY2UpKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0Rmlyc3RSYXlDaXJjbGVJbnRlcnNlY3Rpb24oXHJcbiAgICBjZW50cmU6IFZlY3RvcjJmLFxyXG4gICAgcmFkaXVzOiBudW1iZXIsXHJcbiAgICBvcmlnaW46IFZlY3RvcjJmLFxyXG4gICAgZGlyZWN0aW9uOiBWZWN0b3IyZlxyXG4gICk6IG51bWJlciB7XHJcbiAgICBjb25zdCBkZWx0YSA9IG9yaWdpbi5zdWJ0cmFjdChjZW50cmUpO1xyXG5cclxuICAgIGNvbnN0IGEgPSBkaXJlY3Rpb24uZG90KGRpcmVjdGlvbik7XHJcbiAgICBjb25zdCBiID0gMiAqIGRpcmVjdGlvbi5kb3QoZGVsdGEpO1xyXG4gICAgY29uc3QgYyA9IGRlbHRhLmRvdChkZWx0YSkgLSByYWRpdXMgKiogMjtcclxuXHJcbiAgICBjb25zdCBkaXNjcmltID0gYiAqKiAyIC0gNCAqIGEgKiBjO1xyXG5cclxuICAgIGlmIChkaXNjcmltIDwgMCkge1xyXG4gICAgICAvLyBObyBpbnRlcnNlY3Rpb25cclxuICAgICAgcmV0dXJuIEluZmluaXR5O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRpc3RhbmNlID0gKCgtYiAtIE1hdGguc3FydChkaXNjcmltKSkgLyAyKSAqIGE7XHJcblxyXG4gICAgaWYgKGRpc3RhbmNlIDwgMCkge1xyXG4gICAgICAvLyBJbnRlcnNlY3Rpb24gYmVoaW5kXHJcbiAgICAgIHJldHVybiBJbmZpbml0eTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGlzdGFuY2U7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldENvbG91cihwcmVmZXJyZWRWZWxvY2l0eTogVmVjdG9yMmYpIHtcclxuICAgIGNvbnN0IHN0cmVzcyA9IHByZWZlcnJlZFZlbG9jaXR5LnN1YnRyYWN0KHRoaXMuX2RpcmVjdGlvbikubWFnbml0dWRlKCk7XHJcbiAgICB0aGlzLl9jb2xvdXIgPSBDb2xvdXIuRnJvbUhzdigoMSAtIHN0cmVzcykgLyAzLCAxLCAxKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2hlY2tJZkRvbmUoKSB7XHJcbiAgICBjb25zdCBmaW5pc2hUaHJlc2hvbGQgPSAxLjA7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICB0aGlzLl9wb3NpdGlvbi5zdWJ0cmFjdCh0aGlzLl9nb2FsUG9zaXRpb24pLm1hZ25pdHVkZVNxcmQoKSA8XHJcbiAgICAgIGZpbmlzaFRocmVzaG9sZFxyXG4gICAgKSB7XHJcbiAgICAgIHRoaXMuX2lzRG9uZSA9IHRydWU7XHJcbiAgICAgIHRoaXMuX3Bvc2l0aW9uID0gdGhpcy5fZ29hbFBvc2l0aW9uO1xyXG4gICAgICB0aGlzLl9kaXJlY3Rpb24gPSBuZXcgVmVjdG9yMmYoMCwgMCk7XHJcbiAgICAgIHRoaXMuX2NvbG91ciA9IENvbG91ci5XaGl0ZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29sb3VyIH0gZnJvbSBcIi4uL0NvbG91clwiO1xyXG5pbXBvcnQgeyBJQWdlbnQgfSBmcm9tIFwiLi4vSUFnZW50XCI7XHJcbmltcG9ydCB7IFZlY3RvcjJmIH0gZnJvbSBcIi4uL1ZlY3RvcjJmXCI7XHJcbmltcG9ydCB7IFZlbG9jaXR5T2JzdGFjbGUgfSBmcm9tIFwiLi4vVmVsb2NpdHlPYnN0YWNsZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJWT0FnZW50IGltcGxlbWVudHMgSUFnZW50IHtcclxuICBSYWRpdXM6IG51bWJlcjtcclxuICBJZDogbnVtYmVyO1xyXG5cclxuICBNQVhfVkVMT0NJVFkgPSAxLjA7XHJcbiAgTUFYX0FDQ0VMRVJBVElPTiA9IDAuNTtcclxuXHJcbiAgcHJpdmF0ZSBfcG9zaXRpb246IFZlY3RvcjJmO1xyXG4gIHByaXZhdGUgX2dvYWxQb3NpdGlvbjogVmVjdG9yMmY7XHJcbiAgcHJpdmF0ZSBfZGlyZWN0aW9uOiBWZWN0b3IyZjtcclxuXHJcbiAgcHJpdmF0ZSBfaXNEb25lOiBib29sZWFuO1xyXG4gIHByaXZhdGUgX2NvbG91cjogQ29sb3VyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGlkOiBudW1iZXIsXHJcbiAgICBzdGFydFBvc2l0aW9uOiBWZWN0b3IyZixcclxuICAgIGdvYWxQb3NpdGlvbjogVmVjdG9yMmYsXHJcbiAgICByYWRpdXM6IG51bWJlclxyXG4gICkge1xyXG4gICAgdGhpcy5JZCA9IGlkO1xyXG4gICAgdGhpcy5fcG9zaXRpb24gPSBzdGFydFBvc2l0aW9uO1xyXG4gICAgdGhpcy5fZ29hbFBvc2l0aW9uID0gZ29hbFBvc2l0aW9uO1xyXG4gICAgdGhpcy5SYWRpdXMgPSByYWRpdXM7XHJcbiAgICB0aGlzLl9kaXJlY3Rpb24gPSBuZXcgVmVjdG9yMmYoMCwgMCk7XHJcblxyXG4gICAgdGhpcy5faXNEb25lID0gZmFsc2U7XHJcbiAgICB0aGlzLl9jb2xvdXIgPSBDb2xvdXIuR3JlZW47XHJcbiAgfVxyXG5cclxuICBnZXRQb3NpdGlvbigpOiBWZWN0b3IyZiB7XHJcbiAgICByZXR1cm4gdGhpcy5fcG9zaXRpb247XHJcbiAgfVxyXG5cclxuICBnZXREaXJlY3Rpb24oKTogVmVjdG9yMmYge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RpcmVjdGlvbjtcclxuICB9XHJcblxyXG4gIGdldENvbG91cigpOiBDb2xvdXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NvbG91cjtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShfZGVsdGFUOiBudW1iZXIsIG5laWdoYm91cnM6IElBZ2VudFtdKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5faXNEb25lKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzcGVlZCA9IDAuNTtcclxuICAgIGNvbnN0IHByZWZlcnJlZFZlbG9jaXR5ID0gdGhpcy5nZXRQcmVmZXJyZWRWZWxvY2l0eShzcGVlZCk7XHJcbiAgICBjb25zdCBnb2FsRGlzdFNxcmQgPSB0aGlzLl9nb2FsUG9zaXRpb25cclxuICAgICAgLnN1YnRyYWN0KHRoaXMuZ2V0UG9zaXRpb24oKSlcclxuICAgICAgLm1hZ25pdHVkZVNxcmQoKTtcclxuXHJcbiAgICBsZXQgc2FmZSA9IHRydWU7XHJcbiAgICBsZXQgY29sbGlzaW9uO1xyXG4gICAgbGV0IGFnZW50O1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZWlnaGJvdXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIC8vIFNraXAgYWdlbnRzIGZ1cnRoZXIgYXdheSB0aGFuIGdvYWxcclxuICAgICAgaWYgKFxyXG4gICAgICAgIG5laWdoYm91cnNbaV1cclxuICAgICAgICAgIC5nZXRQb3NpdGlvbigpXHJcbiAgICAgICAgICAuc3VidHJhY3QodGhpcy5nZXRQb3NpdGlvbigpKVxyXG4gICAgICAgICAgLm1hZ25pdHVkZVNxcmQoKSA+IGdvYWxEaXN0U3FyZFxyXG4gICAgICApIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ2hlY2sgd2hldGhlciBwcmVmZXJyZWQgdmVsb2NpdHkgaXMgc2FmZVxyXG4gICAgICBjb25zdCB2ZWxvY2l0eU9ic3RhY2xlID0gdGhpcy5nZXRSZWNpcHJvY2FsVmVsb2NpdHlPYnN0YWNsZShcclxuICAgICAgICBuZWlnaGJvdXJzW2ldXHJcbiAgICAgICk7XHJcbiAgICAgIGlmIChcclxuICAgICAgICB2ZWxvY2l0eU9ic3RhY2xlICE9IG51bGwgJiZcclxuICAgICAgICB2ZWxvY2l0eU9ic3RhY2xlLmNvbnRhaW5zKHByZWZlcnJlZFZlbG9jaXR5KVxyXG4gICAgICApIHtcclxuICAgICAgICBzYWZlID0gZmFsc2U7XHJcbiAgICAgICAgY29sbGlzaW9uID0gdmVsb2NpdHlPYnN0YWNsZTtcclxuICAgICAgICBhZ2VudCA9IGk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiBwcmVmZXJyZWQgdmVsb2NpdHkgaXMgc2FmZSwgZ28gaW4gdGhhdCBkaXJlY3Rpb25cclxuICAgIGlmIChzYWZlKSB7XHJcbiAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IHByZWZlcnJlZFZlbG9jaXR5O1xyXG4gICAgICB0aGlzLl9wb3NpdGlvbiA9IHRoaXMuX3Bvc2l0aW9uLmFkZChwcmVmZXJyZWRWZWxvY2l0eSk7XHJcbiAgICAgIHRoaXMuX2NvbG91ciA9IENvbG91ci5HcmVlbjtcclxuICAgICAgdGhpcy5jaGVja0lmRG9uZSgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbGxpc2lvbiAhPSBudWxsKSB7XHJcbiAgICAgIC8vIEVsc2UsIGNvbnNpZGVyIGNsb3Nlc3QgcG9pbnQgb24gZmlyc3QgaGFsZi1wbGFuZVxyXG4gICAgICBjb25zdCBoYWxmUGxhbmUxID0gdGhpcy5nZXRDbG9zZXN0UG9pbnRPbkxpbmUoXHJcbiAgICAgICAgY29sbGlzaW9uLnZlcnRleCxcclxuICAgICAgICBjb2xsaXNpb24udGFuZ2VudDEsXHJcbiAgICAgICAgcHJlZmVycmVkVmVsb2NpdHlcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmIChoYWxmUGxhbmUxLm1hZ25pdHVkZSgpIDw9IHNwZWVkKSB7XHJcbiAgICAgICAgc2FmZSA9IHRydWU7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZWlnaGJvdXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBpZiAoaSAhPSBhZ2VudCkge1xyXG4gICAgICAgICAgICBjb25zdCB2ZWxvY2l0eU9ic3RhY2xlID0gdGhpcy5nZXRSZWNpcHJvY2FsVmVsb2NpdHlPYnN0YWNsZShcclxuICAgICAgICAgICAgICBuZWlnaGJvdXJzW2ldXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICB2ZWxvY2l0eU9ic3RhY2xlICE9IG51bGwgJiZcclxuICAgICAgICAgICAgICB2ZWxvY2l0eU9ic3RhY2xlLmNvbnRhaW5zKGhhbGZQbGFuZTEpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgIHNhZmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNhZmUpIHtcclxuICAgICAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IGhhbGZQbGFuZTE7XHJcbiAgICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IHRoaXMuX3Bvc2l0aW9uLmFkZChoYWxmUGxhbmUxKTtcclxuICAgICAgICAgIHRoaXMuc2V0Q29sb3VyKHByZWZlcnJlZFZlbG9jaXR5KTtcclxuICAgICAgICAgIHRoaXMuY2hlY2tJZkRvbmUoKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEVsc2UsIGNvbnNpZGVyIGNsb3Nlc3QgcG9pbnQgb24gc2Vjb25kIGhhbGYtcGxhbmVcclxuICAgICAgY29uc3QgaGFsZlBsYW5lMiA9IHRoaXMuZ2V0Q2xvc2VzdFBvaW50T25MaW5lKFxyXG4gICAgICAgIGNvbGxpc2lvbi52ZXJ0ZXgsXHJcbiAgICAgICAgY29sbGlzaW9uLnRhbmdlbnQyLFxyXG4gICAgICAgIHByZWZlcnJlZFZlbG9jaXR5XHJcbiAgICAgICk7XHJcblxyXG4gICAgICBpZiAoaGFsZlBsYW5lMS5tYWduaXR1ZGUoKSA8PSBzcGVlZCkge1xyXG4gICAgICAgIHNhZmUgPSB0cnVlO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmVpZ2hib3Vycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgaWYgKGkgIT0gYWdlbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgdmVsb2NpdHlPYnN0YWNsZSA9IHRoaXMuZ2V0UmVjaXByb2NhbFZlbG9jaXR5T2JzdGFjbGUoXHJcbiAgICAgICAgICAgICAgbmVpZ2hib3Vyc1tpXVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgdmVsb2NpdHlPYnN0YWNsZSAhPSBudWxsICYmXHJcbiAgICAgICAgICAgICAgdmVsb2NpdHlPYnN0YWNsZS5jb250YWlucyhoYWxmUGxhbmUyKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICBzYWZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzYWZlKSB7XHJcbiAgICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBoYWxmUGxhbmUyO1xyXG4gICAgICAgICAgdGhpcy5fcG9zaXRpb24gPSB0aGlzLl9wb3NpdGlvbi5hZGQoaGFsZlBsYW5lMik7XHJcbiAgICAgICAgICB0aGlzLnNldENvbG91cihwcmVmZXJyZWRWZWxvY2l0eSk7XHJcbiAgICAgICAgICB0aGlzLmNoZWNrSWZEb25lKCk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRWxzZSwgc2FtcGxlIHJhbmRvbSB2ZWxvY2l0aWVzIGFuZCBzZWxlY3QgdGhlIG9uZSB3aXRoIHRoZSBsZWFzdCBwZW5hbHR5XHJcbiAgICBjb25zdCBzYW1wbGVzID0gMTAwOyAvLyBudW1iZXIgb2YgdmVsb2NpdGllcyB0byB0cnlcclxuICAgIGNvbnN0IHcgPSAxMDA7IC8vIHBhcmFtZXRlciBmb3IgcGVuYWx0eVxyXG4gICAgY29uc3QgZ29hbERpc3QgPSBNYXRoLnNxcnQoZ29hbERpc3RTcXJkKTtcclxuICAgIGxldCBtaW5QZW5hbHR5ID0gSW5maW5pdHk7XHJcbiAgICBsZXQgYmVzdFZlbG9jaXR5ID0gbmV3IFZlY3RvcjJmKDAsIDApO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2FtcGxlczsgaSsrKSB7XHJcbiAgICAgIC8vIFNhbXBsZSB2ZWxvY2l0eSBmcm9tIGVudGlyZSBhbGxvd2VkIHZlbG9jaXR5IHNwYWNlXHJcbiAgICAgIGNvbnN0IHNhbXBsZSA9IG5ldyBWZWN0b3IyZigwLCAwKS5zYW1wbGUoc3BlZWQpO1xyXG4gICAgICBsZXQgbWluVGltZVRvQ29sbGlzaW9uID0gSW5maW5pdHk7XHJcblxyXG4gICAgICAvLyBGaW5kIHRpbWUgdG8gZmlyc3QgY29sbGlzaW9uXHJcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmVpZ2hib3Vycy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgIGNvbnN0IGIgPSBuZWlnaGJvdXJzW2pdO1xyXG4gICAgICAgIGNvbnN0IHZlbG9jaXR5T2JzdGFjbGUgPSB0aGlzLmdldFJlY2lwcm9jYWxWZWxvY2l0eU9ic3RhY2xlKGIpO1xyXG4gICAgICAgIGlmICh2ZWxvY2l0eU9ic3RhY2xlICE9IG51bGwgJiYgdmVsb2NpdHlPYnN0YWNsZS5jb250YWlucyhzYW1wbGUpKSB7XHJcbiAgICAgICAgICBjb25zdCB0aW1lVG9Db2xsaXNpb24gPSB0aGlzLmdldEZpcnN0UmF5Q2lyY2xlSW50ZXJzZWN0aW9uKFxyXG4gICAgICAgICAgICBiLmdldFBvc2l0aW9uKCkuYWRkKGIuZ2V0RGlyZWN0aW9uKCkpLFxyXG4gICAgICAgICAgICB0aGlzLlJhZGl1cyArIGIuUmFkaXVzLFxyXG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvbixcclxuICAgICAgICAgICAgc2FtcGxlXHJcbiAgICAgICAgICAgICAgLm11bHRpcGx5KDIpXHJcbiAgICAgICAgICAgICAgLnN1YnRyYWN0KHRoaXMuZ2V0RGlyZWN0aW9uKCkpXHJcbiAgICAgICAgICAgICAgLnN1YnRyYWN0KGIuZ2V0RGlyZWN0aW9uKCkpXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgIGlmICh0aW1lVG9Db2xsaXNpb24gPCBtaW5UaW1lVG9Db2xsaXNpb24pIHtcclxuICAgICAgICAgICAgbWluVGltZVRvQ29sbGlzaW9uID0gdGltZVRvQ29sbGlzaW9uO1xyXG4gICAgICAgICAgICBpZiAobWluVGltZVRvQ29sbGlzaW9uID09IDApIHtcclxuICAgICAgICAgICAgICB0aGlzLnNldENvbG91cihwcmVmZXJyZWRWZWxvY2l0eSk7XHJcbiAgICAgICAgICAgICAgdGhpcy5jaGVja0lmRG9uZSgpO1xyXG4gICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ2FsY3VsYXRlIHBlbmFsdHlcclxuICAgICAgbGV0IHBlbmFsdHk7XHJcbiAgICAgIGlmIChtaW5UaW1lVG9Db2xsaXNpb24gPCBnb2FsRGlzdCkge1xyXG4gICAgICAgIHBlbmFsdHkgPVxyXG4gICAgICAgICAgdyAvIG1pblRpbWVUb0NvbGxpc2lvbiArXHJcbiAgICAgICAgICBwcmVmZXJyZWRWZWxvY2l0eS5zdWJ0cmFjdChzYW1wbGUpLm1hZ25pdHVkZSgpOyAvLyBUUyBjb3JyZWN0bHkgaGFuZGxlcyBkaXZpZGUgYnkgemVybyBvciBpbmZpbml0eVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBlbmFsdHkgPSBwcmVmZXJyZWRWZWxvY2l0eS5zdWJ0cmFjdChzYW1wbGUpLm1hZ25pdHVkZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocGVuYWx0eSA8IG1pblBlbmFsdHkpIHtcclxuICAgICAgICBtaW5QZW5hbHR5ID0gcGVuYWx0eTtcclxuICAgICAgICBiZXN0VmVsb2NpdHkgPSBzYW1wbGU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9kaXJlY3Rpb24gPSBiZXN0VmVsb2NpdHk7XHJcbiAgICB0aGlzLl9wb3NpdGlvbiA9IHRoaXMuX3Bvc2l0aW9uLmFkZChiZXN0VmVsb2NpdHkpO1xyXG4gICAgdGhpcy5zZXRDb2xvdXIocHJlZmVycmVkVmVsb2NpdHkpO1xyXG4gICAgdGhpcy5jaGVja0lmRG9uZSgpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgaXNEb25lKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzRG9uZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0UHJlZmVycmVkVmVsb2NpdHkobWF4U3BlZWQ6IG51bWJlcik6IFZlY3RvcjJmIHtcclxuICAgIGNvbnN0IGdvYWxEaXJlY3Rpb24gPSB0aGlzLl9nb2FsUG9zaXRpb24uc3VidHJhY3QodGhpcy5fcG9zaXRpb24pO1xyXG4gICAgY29uc3QgZ29hbERpc3RhbmNlID0gZ29hbERpcmVjdGlvbi5tYWduaXR1ZGUoKTtcclxuXHJcbiAgICBpZiAoZ29hbERpc3RhbmNlID4gbWF4U3BlZWQpIHtcclxuICAgICAgcmV0dXJuIGdvYWxEaXJlY3Rpb24uZGl2aWRlKGdvYWxEaXN0YW5jZSAvIG1heFNwZWVkKTtcclxuICAgIH1cclxuICAgIHJldHVybiBnb2FsRGlyZWN0aW9uO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRSZWNpcHJvY2FsVmVsb2NpdHlPYnN0YWNsZShiOiBJQWdlbnQpOiBWZWxvY2l0eU9ic3RhY2xlIHwgbnVsbCB7XHJcbiAgICBjb25zdCB2ZWxvY2l0eUEgPSB0aGlzLmdldERpcmVjdGlvbigpO1xyXG4gICAgY29uc3QgdmVsb2NpdHlCID0gYi5nZXREaXJlY3Rpb24oKTtcclxuICAgIGNvbnN0IHZlcnRleCA9IHZlbG9jaXR5QS5hZGQodmVsb2NpdHlCKS5kaXZpZGUoMik7XHJcblxyXG4gICAgLy8gVHJhbnNsYXRlIG9yaWdpbiB0byB0aGlzIGFnZW50J3MgcG9zaXRpb25cclxuICAgIGNvbnN0IHBvc2l0aW9uQiA9IGIuZ2V0UG9zaXRpb24oKS5zdWJ0cmFjdCh0aGlzLl9wb3NpdGlvbik7XHJcblxyXG4gICAgLy8gRmluZCBNaW5rb3dza2kgc3VtIG9mIGFnZW50c1xyXG4gICAgY29uc3QgY2VudHJlID0gcG9zaXRpb25CLmFkZCh2ZWxvY2l0eUIpO1xyXG4gICAgY29uc3QgcmFkaXVzID0gYi5SYWRpdXMgKyB0aGlzLlJhZGl1cztcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgYW5nbGVzXHJcbiAgICBjb25zdCBkaWZmID0gdmVsb2NpdHlCLnN1YnRyYWN0KGNlbnRyZSk7XHJcbiAgICBjb25zdCBkaXN0ID0gZGlmZi5tYWduaXR1ZGUoKTtcclxuICAgIGlmIChkaXN0IDwgcmFkaXVzKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRoZXRhID0gTWF0aC5hY29zKHJhZGl1cyAvIGRpc3QpO1xyXG4gICAgY29uc3QgcGhpID0gTWF0aC5hdGFuMihkaWZmLnksIGRpZmYueCk7XHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIHRhbmdlbnQgdmVjdG9yc1xyXG4gICAgY29uc3QgYW5nbGUxID0gcGhpICsgdGhldGE7XHJcbiAgICBjb25zdCB0YW5nZW50MSA9IG5ldyBWZWN0b3IyZihcclxuICAgICAgY2VudHJlLnggKyByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZTEpLFxyXG4gICAgICBjZW50cmUueSArIHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlMSlcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgYW5nbGUyID0gcGhpIC0gdGhldGE7XHJcbiAgICBjb25zdCB0YW5nZW50MiA9IG5ldyBWZWN0b3IyZihcclxuICAgICAgY2VudHJlLnggKyByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZTIpLFxyXG4gICAgICBjZW50cmUueSArIHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlMilcclxuICAgICk7XHJcblxyXG4gICAgLy8gUmV0dXJuIHZlbG9jaXR5IG9ic3RhY2xlXHJcbiAgICByZXR1cm4gbmV3IFZlbG9jaXR5T2JzdGFjbGUodmVydGV4LCB0YW5nZW50MSwgdGFuZ2VudDIpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRDbG9zZXN0UG9pbnRPbkxpbmUoXHJcbiAgICBsaW5lUG9pbnQ6IFZlY3RvcjJmLFxyXG4gICAgbGluZURpcmVjdGlvbjogVmVjdG9yMmYsXHJcbiAgICBwb2ludDogVmVjdG9yMmZcclxuICApOiBWZWN0b3IyZiB7XHJcbiAgICBjb25zdCBkaXJlY3Rpb24gPSBsaW5lRGlyZWN0aW9uLm5vcm1hbGlzZSgpO1xyXG4gICAgY29uc3QgdmVjdG9yID0gcG9pbnQuc3VidHJhY3QobGluZVBvaW50KTtcclxuICAgIGNvbnN0IGRpc3RhbmNlID0gdmVjdG9yLmRvdChkaXJlY3Rpb24pO1xyXG4gICAgcmV0dXJuIGxpbmVQb2ludC5hZGQoZGlyZWN0aW9uLm11bHRpcGx5KGRpc3RhbmNlKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEZpcnN0UmF5Q2lyY2xlSW50ZXJzZWN0aW9uKFxyXG4gICAgY2VudHJlOiBWZWN0b3IyZixcclxuICAgIHJhZGl1czogbnVtYmVyLFxyXG4gICAgb3JpZ2luOiBWZWN0b3IyZixcclxuICAgIGRpcmVjdGlvbjogVmVjdG9yMmZcclxuICApOiBudW1iZXIge1xyXG4gICAgY29uc3QgZGVsdGEgPSBvcmlnaW4uc3VidHJhY3QoY2VudHJlKTtcclxuXHJcbiAgICBjb25zdCBhID0gZGlyZWN0aW9uLmRvdChkaXJlY3Rpb24pO1xyXG4gICAgY29uc3QgYiA9IDIgKiBkaXJlY3Rpb24uZG90KGRlbHRhKTtcclxuICAgIGNvbnN0IGMgPSBkZWx0YS5kb3QoZGVsdGEpIC0gcmFkaXVzICoqIDI7XHJcblxyXG4gICAgY29uc3QgZGlzY3JpbSA9IGIgKiogMiAtIDQgKiBhICogYztcclxuXHJcbiAgICBpZiAoZGlzY3JpbSA8IDApIHtcclxuICAgICAgLy8gTm8gaW50ZXJzZWN0aW9uXHJcbiAgICAgIHJldHVybiBJbmZpbml0eTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkaXN0YW5jZSA9ICgoLWIgLSBNYXRoLnNxcnQoZGlzY3JpbSkpIC8gMikgKiBhO1xyXG5cclxuICAgIGlmIChkaXN0YW5jZSA8IDApIHtcclxuICAgICAgLy8gSW50ZXJzZWN0aW9uIGJlaGluZFxyXG4gICAgICByZXR1cm4gSW5maW5pdHk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRpc3RhbmNlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRDb2xvdXIocHJlZmVycmVkVmVsb2NpdHk6IFZlY3RvcjJmKSB7XHJcbiAgICBjb25zdCBzdHJlc3MgPSBwcmVmZXJyZWRWZWxvY2l0eS5zdWJ0cmFjdCh0aGlzLl9kaXJlY3Rpb24pLm1hZ25pdHVkZSgpO1xyXG4gICAgdGhpcy5fY29sb3VyID0gQ29sb3VyLkZyb21Ic3YoKDEgLSBzdHJlc3MpIC8gMywgMSwgMSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrSWZEb25lKCkge1xyXG4gICAgY29uc3QgZmluaXNoVGhyZXNob2xkID0gMS4wO1xyXG5cclxuICAgIGlmIChcclxuICAgICAgdGhpcy5fcG9zaXRpb24uc3VidHJhY3QodGhpcy5fZ29hbFBvc2l0aW9uKS5tYWduaXR1ZGVTcXJkKCkgPFxyXG4gICAgICBmaW5pc2hUaHJlc2hvbGRcclxuICAgICkge1xyXG4gICAgICB0aGlzLl9pc0RvbmUgPSB0cnVlO1xyXG4gICAgICB0aGlzLl9wb3NpdGlvbiA9IHRoaXMuX2dvYWxQb3NpdGlvbjtcclxuICAgICAgdGhpcy5fZGlyZWN0aW9uID0gbmV3IFZlY3RvcjJmKDAsIDApO1xyXG4gICAgICB0aGlzLl9jb2xvdXIgPSBDb2xvdXIuV2hpdGU7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IENvbG91ciB9IGZyb20gXCIuLi9Db2xvdXJcIjtcclxuaW1wb3J0IHsgSUFnZW50IH0gZnJvbSBcIi4uL0lBZ2VudFwiO1xyXG5pbXBvcnQgeyBWZWN0b3IyZiB9IGZyb20gXCIuLi9WZWN0b3IyZlwiO1xyXG5pbXBvcnQgeyBWZWxvY2l0eU9ic3RhY2xlIH0gZnJvbSBcIi4uL1ZlbG9jaXR5T2JzdGFjbGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBIUlZPQWdlbnQgaW1wbGVtZW50cyBJQWdlbnQge1xyXG4gIFJhZGl1czogbnVtYmVyO1xyXG4gIElkOiBudW1iZXI7XHJcblxyXG4gIE1BWF9WRUxPQ0lUWSA9IDEuMDtcclxuICBNQVhfQUNDRUxFUkFUSU9OID0gMC41O1xyXG5cclxuICBwcml2YXRlIF9wb3NpdGlvbjogVmVjdG9yMmY7XHJcbiAgcHJpdmF0ZSBfZ29hbFBvc2l0aW9uOiBWZWN0b3IyZjtcclxuICBwcml2YXRlIF9kaXJlY3Rpb246IFZlY3RvcjJmO1xyXG5cclxuICBwcml2YXRlIF9pc0RvbmU6IGJvb2xlYW47XHJcbiAgcHJpdmF0ZSBfY29sb3VyOiBDb2xvdXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgaWQ6IG51bWJlcixcclxuICAgIHN0YXJ0UG9zaXRpb246IFZlY3RvcjJmLFxyXG4gICAgZ29hbFBvc2l0aW9uOiBWZWN0b3IyZixcclxuICAgIHJhZGl1czogbnVtYmVyXHJcbiAgKSB7XHJcbiAgICB0aGlzLklkID0gaWQ7XHJcbiAgICB0aGlzLl9wb3NpdGlvbiA9IHN0YXJ0UG9zaXRpb247XHJcbiAgICB0aGlzLl9nb2FsUG9zaXRpb24gPSBnb2FsUG9zaXRpb247XHJcbiAgICB0aGlzLlJhZGl1cyA9IHJhZGl1cztcclxuICAgIHRoaXMuX2RpcmVjdGlvbiA9IG5ldyBWZWN0b3IyZigwLCAwKTtcclxuXHJcbiAgICB0aGlzLl9pc0RvbmUgPSBmYWxzZTtcclxuICAgIHRoaXMuX2NvbG91ciA9IENvbG91ci5HcmVlbjtcclxuICB9XHJcblxyXG4gIGdldFBvc2l0aW9uKCk6IFZlY3RvcjJmIHtcclxuICAgIHJldHVybiB0aGlzLl9wb3NpdGlvbjtcclxuICB9XHJcblxyXG4gIGdldERpcmVjdGlvbigpOiBWZWN0b3IyZiB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGlyZWN0aW9uO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q29sb3VyKCk6IENvbG91ciB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29sb3VyO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKF9kZWx0YVQ6IG51bWJlciwgbmVpZ2hib3VyczogSUFnZW50W10pOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9pc0RvbmUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHNwZWVkID0gMC41O1xyXG4gICAgY29uc3QgcHJlZmVycmVkVmVsb2NpdHkgPSB0aGlzLmdldFByZWZlcnJlZFZlbG9jaXR5KHNwZWVkKTtcclxuICAgIGNvbnN0IGdvYWxEaXN0U3FyZCA9IHRoaXMuX2dvYWxQb3NpdGlvblxyXG4gICAgICAuc3VidHJhY3QodGhpcy5nZXRQb3NpdGlvbigpKVxyXG4gICAgICAubWFnbml0dWRlU3FyZCgpO1xyXG5cclxuICAgIGxldCBzYWZlID0gdHJ1ZTtcclxuICAgIGxldCBjb2xsaXNpb247XHJcbiAgICBsZXQgYWdlbnQ7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5laWdoYm91cnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgLy8gU2tpcCBhZ2VudHMgZnVydGhlciBhd2F5IHRoYW4gZ29hbFxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgbmVpZ2hib3Vyc1tpXVxyXG4gICAgICAgICAgLmdldFBvc2l0aW9uKClcclxuICAgICAgICAgIC5zdWJ0cmFjdCh0aGlzLmdldFBvc2l0aW9uKCkpXHJcbiAgICAgICAgICAubWFnbml0dWRlU3FyZCgpID4gZ29hbERpc3RTcXJkXHJcbiAgICAgICkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDaGVjayB3aGV0aGVyIHByZWZlcnJlZCB2ZWxvY2l0eSBpcyBzYWZlXHJcbiAgICAgIGNvbnN0IHZlbG9jaXR5T2JzdGFjbGUgPSB0aGlzLmdldEh5YnJpZFJlY2lwcm9jYWxWZWxvY2l0eU9ic3RhY2xlKFxyXG4gICAgICAgIG5laWdoYm91cnNbaV1cclxuICAgICAgKTtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHZlbG9jaXR5T2JzdGFjbGUgIT0gbnVsbCAmJlxyXG4gICAgICAgIHZlbG9jaXR5T2JzdGFjbGUuY29udGFpbnMocHJlZmVycmVkVmVsb2NpdHkpXHJcbiAgICAgICkge1xyXG4gICAgICAgIHNhZmUgPSBmYWxzZTtcclxuICAgICAgICBjb2xsaXNpb24gPSB2ZWxvY2l0eU9ic3RhY2xlO1xyXG4gICAgICAgIGFnZW50ID0gaTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHByZWZlcnJlZCB2ZWxvY2l0eSBpcyBzYWZlLCBnbyBpbiB0aGF0IGRpcmVjdGlvblxyXG4gICAgaWYgKHNhZmUpIHtcclxuICAgICAgdGhpcy5fZGlyZWN0aW9uID0gcHJlZmVycmVkVmVsb2NpdHk7XHJcbiAgICAgIHRoaXMuX3Bvc2l0aW9uID0gdGhpcy5fcG9zaXRpb24uYWRkKHByZWZlcnJlZFZlbG9jaXR5KTtcclxuICAgICAgdGhpcy5fY29sb3VyID0gQ29sb3VyLkdyZWVuO1xyXG4gICAgICB0aGlzLmNoZWNrSWZEb25lKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY29sbGlzaW9uICE9IG51bGwpIHtcclxuICAgICAgLy8gRWxzZSwgY29uc2lkZXIgY2xvc2VzdCBwb2ludCBvbiBmaXJzdCBoYWxmLXBsYW5lXHJcbiAgICAgIGNvbnN0IGhhbGZQbGFuZTEgPSB0aGlzLmdldENsb3Nlc3RQb2ludE9uTGluZShcclxuICAgICAgICBjb2xsaXNpb24udmVydGV4LFxyXG4gICAgICAgIGNvbGxpc2lvbi50YW5nZW50MSxcclxuICAgICAgICBwcmVmZXJyZWRWZWxvY2l0eVxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKGhhbGZQbGFuZTEubWFnbml0dWRlKCkgPD0gc3BlZWQpIHtcclxuICAgICAgICBzYWZlID0gdHJ1ZTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5laWdoYm91cnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGlmIChpICE9IGFnZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZlbG9jaXR5T2JzdGFjbGUgPSB0aGlzLmdldEh5YnJpZFJlY2lwcm9jYWxWZWxvY2l0eU9ic3RhY2xlKFxyXG4gICAgICAgICAgICAgIG5laWdoYm91cnNbaV1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgIHZlbG9jaXR5T2JzdGFjbGUgIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgIHZlbG9jaXR5T2JzdGFjbGUuY29udGFpbnMoaGFsZlBsYW5lMSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgc2FmZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2FmZSkge1xyXG4gICAgICAgICAgdGhpcy5fZGlyZWN0aW9uID0gaGFsZlBsYW5lMTtcclxuICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gdGhpcy5fcG9zaXRpb24uYWRkKGhhbGZQbGFuZTEpO1xyXG4gICAgICAgICAgdGhpcy5zZXRDb2xvdXIocHJlZmVycmVkVmVsb2NpdHkpO1xyXG4gICAgICAgICAgdGhpcy5jaGVja0lmRG9uZSgpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRWxzZSwgY29uc2lkZXIgY2xvc2VzdCBwb2ludCBvbiBzZWNvbmQgaGFsZi1wbGFuZVxyXG4gICAgICBjb25zdCBoYWxmUGxhbmUyID0gdGhpcy5nZXRDbG9zZXN0UG9pbnRPbkxpbmUoXHJcbiAgICAgICAgY29sbGlzaW9uLnZlcnRleCxcclxuICAgICAgICBjb2xsaXNpb24udGFuZ2VudDIsXHJcbiAgICAgICAgcHJlZmVycmVkVmVsb2NpdHlcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmIChoYWxmUGxhbmUxLm1hZ25pdHVkZSgpIDw9IHNwZWVkKSB7XHJcbiAgICAgICAgc2FmZSA9IHRydWU7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZWlnaGJvdXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBpZiAoaSAhPSBhZ2VudCkge1xyXG4gICAgICAgICAgICBjb25zdCB2ZWxvY2l0eU9ic3RhY2xlID0gdGhpcy5nZXRIeWJyaWRSZWNpcHJvY2FsVmVsb2NpdHlPYnN0YWNsZShcclxuICAgICAgICAgICAgICBuZWlnaGJvdXJzW2ldXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICB2ZWxvY2l0eU9ic3RhY2xlICE9IG51bGwgJiZcclxuICAgICAgICAgICAgICB2ZWxvY2l0eU9ic3RhY2xlLmNvbnRhaW5zKGhhbGZQbGFuZTIpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgIHNhZmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNhZmUpIHtcclxuICAgICAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IGhhbGZQbGFuZTI7XHJcbiAgICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IHRoaXMuX3Bvc2l0aW9uLmFkZChoYWxmUGxhbmUyKTtcclxuICAgICAgICAgIHRoaXMuc2V0Q29sb3VyKHByZWZlcnJlZFZlbG9jaXR5KTtcclxuICAgICAgICAgIHRoaXMuY2hlY2tJZkRvbmUoKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBFbHNlLCBzYW1wbGUgcmFuZG9tIHZlbG9jaXRpZXMgYW5kIHNlbGVjdCB0aGUgb25lIHdpdGggdGhlIGxlYXN0IHBlbmFsdHlcclxuICAgIGNvbnN0IHNhbXBsZXMgPSAxMDA7IC8vIG51bWJlciBvZiB2ZWxvY2l0aWVzIHRvIHRyeVxyXG4gICAgY29uc3QgdyA9IDEwMDsgLy8gcGFyYW1ldGVyIGZvciBwZW5hbHR5XHJcbiAgICBjb25zdCBnb2FsRGlzdCA9IE1hdGguc3FydChnb2FsRGlzdFNxcmQpO1xyXG4gICAgbGV0IG1pblBlbmFsdHkgPSBJbmZpbml0eTtcclxuICAgIGxldCBiZXN0VmVsb2NpdHkgPSBuZXcgVmVjdG9yMmYoMCwgMCk7XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzYW1wbGVzOyBpKyspIHtcclxuICAgICAgLy8gU2FtcGxlIHZlbG9jaXR5IGZyb20gZW50aXJlIGFsbG93ZWQgdmVsb2NpdHkgc3BhY2VcclxuICAgICAgY29uc3Qgc2FtcGxlID0gbmV3IFZlY3RvcjJmKDAsIDApLnNhbXBsZShzcGVlZCk7XHJcbiAgICAgIGxldCBtaW5UaW1lVG9Db2xsaXNpb24gPSBJbmZpbml0eTtcclxuXHJcbiAgICAgIC8vIEZpbmQgdGltZSB0byBmaXJzdCBjb2xsaXNpb25cclxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZWlnaGJvdXJzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgY29uc3QgYiA9IG5laWdoYm91cnNbal07XHJcbiAgICAgICAgY29uc3QgdmVsb2NpdHlPYnN0YWNsZSA9IHRoaXMuZ2V0SHlicmlkUmVjaXByb2NhbFZlbG9jaXR5T2JzdGFjbGUoYik7XHJcbiAgICAgICAgaWYgKHZlbG9jaXR5T2JzdGFjbGUgIT0gbnVsbCAmJiB2ZWxvY2l0eU9ic3RhY2xlLmNvbnRhaW5zKHNhbXBsZSkpIHtcclxuICAgICAgICAgIGNvbnN0IHRpbWVUb0NvbGxpc2lvbiA9IHRoaXMuZ2V0Rmlyc3RSYXlDaXJjbGVJbnRlcnNlY3Rpb24oXHJcbiAgICAgICAgICAgIGIuZ2V0UG9zaXRpb24oKS5hZGQoYi5nZXREaXJlY3Rpb24oKSksXHJcbiAgICAgICAgICAgIHRoaXMuUmFkaXVzICsgYi5SYWRpdXMsXHJcbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uLFxyXG4gICAgICAgICAgICBzYW1wbGVcclxuICAgICAgICAgICAgICAubXVsdGlwbHkoMilcclxuICAgICAgICAgICAgICAuc3VidHJhY3QodGhpcy5nZXREaXJlY3Rpb24oKSlcclxuICAgICAgICAgICAgICAuc3VidHJhY3QoYi5nZXREaXJlY3Rpb24oKSlcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgaWYgKHRpbWVUb0NvbGxpc2lvbiA8IG1pblRpbWVUb0NvbGxpc2lvbikge1xyXG4gICAgICAgICAgICBtaW5UaW1lVG9Db2xsaXNpb24gPSB0aW1lVG9Db2xsaXNpb247XHJcbiAgICAgICAgICAgIGlmIChtaW5UaW1lVG9Db2xsaXNpb24gPT0gMCkge1xyXG4gICAgICAgICAgICAgIHRoaXMuc2V0Q29sb3VyKHByZWZlcnJlZFZlbG9jaXR5KTtcclxuICAgICAgICAgICAgICB0aGlzLmNoZWNrSWZEb25lKCk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDYWxjdWxhdGUgcGVuYWx0eVxyXG4gICAgICBsZXQgcGVuYWx0eTtcclxuICAgICAgaWYgKG1pblRpbWVUb0NvbGxpc2lvbiA8IGdvYWxEaXN0KSB7XHJcbiAgICAgICAgcGVuYWx0eSA9XHJcbiAgICAgICAgICB3IC8gbWluVGltZVRvQ29sbGlzaW9uICtcclxuICAgICAgICAgIHByZWZlcnJlZFZlbG9jaXR5LnN1YnRyYWN0KHNhbXBsZSkubWFnbml0dWRlKCk7IC8vIFRTIGNvcnJlY3RseSBoYW5kbGVzIGRpdmlkZSBieSB6ZXJvIG9yIGluZmluaXR5XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcGVuYWx0eSA9IHByZWZlcnJlZFZlbG9jaXR5LnN1YnRyYWN0KHNhbXBsZSkubWFnbml0dWRlKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChwZW5hbHR5IDwgbWluUGVuYWx0eSkge1xyXG4gICAgICAgIG1pblBlbmFsdHkgPSBwZW5hbHR5O1xyXG4gICAgICAgIGJlc3RWZWxvY2l0eSA9IHNhbXBsZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2RpcmVjdGlvbiA9IGJlc3RWZWxvY2l0eTtcclxuICAgIHRoaXMuX3Bvc2l0aW9uID0gdGhpcy5fcG9zaXRpb24uYWRkKGJlc3RWZWxvY2l0eSk7XHJcbiAgICB0aGlzLnNldENvbG91cihwcmVmZXJyZWRWZWxvY2l0eSk7XHJcbiAgICB0aGlzLmNoZWNrSWZEb25lKCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBpc0RvbmUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5faXNEb25lO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRQcmVmZXJyZWRWZWxvY2l0eShtYXhTcGVlZDogbnVtYmVyKTogVmVjdG9yMmYge1xyXG4gICAgY29uc3QgZ29hbERpcmVjdGlvbiA9IHRoaXMuX2dvYWxQb3NpdGlvbi5zdWJ0cmFjdCh0aGlzLl9wb3NpdGlvbik7XHJcbiAgICBjb25zdCBnb2FsRGlzdGFuY2UgPSBnb2FsRGlyZWN0aW9uLm1hZ25pdHVkZSgpO1xyXG5cclxuICAgIGlmIChnb2FsRGlzdGFuY2UgPiBtYXhTcGVlZCkge1xyXG4gICAgICByZXR1cm4gZ29hbERpcmVjdGlvbi5kaXZpZGUoZ29hbERpc3RhbmNlIC8gbWF4U3BlZWQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGdvYWxEaXJlY3Rpb247XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEh5YnJpZFJlY2lwcm9jYWxWZWxvY2l0eU9ic3RhY2xlKFxyXG4gICAgYjogSUFnZW50XHJcbiAgKTogVmVsb2NpdHlPYnN0YWNsZSB8IG51bGwge1xyXG4gICAgY29uc3QgdmVsb2NpdHlBID0gdGhpcy5nZXREaXJlY3Rpb24oKTtcclxuICAgIGNvbnN0IHZlbG9jaXR5QiA9IGIuZ2V0RGlyZWN0aW9uKCk7XHJcblxyXG4gICAgLy8gR2V0IHJlc3BlY3RpdmUgdmVydGljZXNcclxuICAgIGNvbnN0IHZvVmVydGV4ID0gdmVsb2NpdHlCO1xyXG4gICAgY29uc3QgcnZvVmVydGV4ID0gdmVsb2NpdHlBLmFkZCh2ZWxvY2l0eUIpLmRpdmlkZSgyKTtcclxuXHJcbiAgICAvLyBUcmFuc2xhdGUgb3JpZ2luIHRvIHRoaXMgYWdlbnQncyBwb3NpdGlvblxyXG4gICAgY29uc3QgcG9zaXRpb25CID0gYi5nZXRQb3NpdGlvbigpLnN1YnRyYWN0KHRoaXMuX3Bvc2l0aW9uKTtcclxuXHJcbiAgICAvLyBGaW5kIE1pbmtvd3NraSBzdW0gb2YgYWdlbnRzXHJcbiAgICBjb25zdCBjZW50cmUgPSBwb3NpdGlvbkIuYWRkKHZlbG9jaXR5Qik7XHJcbiAgICBjb25zdCByYWRpdXMgPSBiLlJhZGl1cyArIHRoaXMuUmFkaXVzO1xyXG5cclxuICAgIC8vIENhbGN1bGF0ZSBhbmdsZXNcclxuICAgIGNvbnN0IGRpZmYgPSB2ZWxvY2l0eUIuc3VidHJhY3QoY2VudHJlKTtcclxuICAgIGNvbnN0IGRpc3QgPSBkaWZmLm1hZ25pdHVkZSgpO1xyXG4gICAgaWYgKGRpc3QgPCByYWRpdXMpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdGhldGEgPSBNYXRoLmFjb3MocmFkaXVzIC8gZGlzdCk7XHJcbiAgICBjb25zdCBwaGkgPSBNYXRoLmF0YW4yKGRpZmYueSwgZGlmZi54KTtcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgdGFuZ2VudCB2ZWN0b3JzXHJcbiAgICBjb25zdCBhbmdsZTEgPSBwaGkgKyB0aGV0YTtcclxuICAgIGNvbnN0IHRhbmdlbnQxID0gbmV3IFZlY3RvcjJmKFxyXG4gICAgICBjZW50cmUueCArIHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlMSksXHJcbiAgICAgIGNlbnRyZS55ICsgcmFkaXVzICogTWF0aC5zaW4oYW5nbGUxKVxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBhbmdsZTIgPSBwaGkgLSB0aGV0YTtcclxuICAgIGNvbnN0IHRhbmdlbnQyID0gbmV3IFZlY3RvcjJmKFxyXG4gICAgICBjZW50cmUueCArIHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlMiksXHJcbiAgICAgIGNlbnRyZS55ICsgcmFkaXVzICogTWF0aC5zaW4oYW5nbGUyKVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBDaGVjayB3aGljaCBzaWRlIHRvIHBhc3Mgb25cclxuICAgIGNvbnN0IHNpZGUgPVxyXG4gICAgICAocG9zaXRpb25CLnggLSB2ZWxvY2l0eUIueCkgKiAodmVsb2NpdHlBLnkgLSB2ZWxvY2l0eUIueSkgLVxyXG4gICAgICAocG9zaXRpb25CLnkgLSB2ZWxvY2l0eUIueSkgKiAodmVsb2NpdHlBLnggLSB2ZWxvY2l0eUIueCk7XHJcblxyXG4gICAgLy8gVE9ETzpcclxuICAgIC8vIENhbGN1bGF0ZSB2ZXJ0ZXggYXMgaW50ZXJzZWN0aW9uXHJcbiAgICAvLyBPbmUgZWRnZSBvcmlnaW4gYXQgVk9cclxuICAgIC8vIE90aGVyIGVkZ2Ugb3JpZ2luIGF0IFJWT1xyXG5cclxuICAgIGxldCB2ZXJ0ZXg7XHJcbiAgICBpZiAoc2lkZSA+IDApIHtcclxuICAgICAgLy8gXCJMZWZ0XCJcclxuICAgICAgdmVydGV4ID0gdGhpcy5nZXRMaW5lSW50ZXJzZWN0aW9uKFxyXG4gICAgICAgIHZvVmVydGV4LFxyXG4gICAgICAgIHRhbmdlbnQxLFxyXG4gICAgICAgIHJ2b1ZlcnRleCxcclxuICAgICAgICB0YW5nZW50MlxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gXCJSaWdodFwiXHJcbiAgICAgIHZlcnRleCA9IHRoaXMuZ2V0TGluZUludGVyc2VjdGlvbihcclxuICAgICAgICB2b1ZlcnRleCxcclxuICAgICAgICB0YW5nZW50MixcclxuICAgICAgICBydm9WZXJ0ZXgsXHJcbiAgICAgICAgdGFuZ2VudDFcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gaHlicmlkIHJlY2lwcmljb2wgdmVsb2NpdHkgb2JzdGFjbGVcclxuICAgIHJldHVybiBuZXcgVmVsb2NpdHlPYnN0YWNsZSh2ZXJ0ZXgsIHRhbmdlbnQxLCB0YW5nZW50Mik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldExpbmVJbnRlcnNlY3Rpb24oXHJcbiAgICBwb2ludDE6IFZlY3RvcjJmLFxyXG4gICAgZGlyZWN0aW9uMTogVmVjdG9yMmYsXHJcbiAgICBwb2ludDI6IFZlY3RvcjJmLFxyXG4gICAgZGlyZWN0aW9uMjogVmVjdG9yMmZcclxuICApOiBWZWN0b3IyZiB7XHJcbiAgICBjb25zdCBkaWZmID0gcG9pbnQyLnN1YnRyYWN0KHBvaW50MSk7XHJcbiAgICBjb25zdCBkZXQgPSBkaXJlY3Rpb24yLnggKiBkaXJlY3Rpb24xLnkgLSBkaXJlY3Rpb24yLnkgKiBkaXJlY3Rpb24xLng7XHJcbiAgICBjb25zdCB0ID0gKGRpZmYueSAqIGRpcmVjdGlvbjIueCAtIGRpZmYueSAqIGRpcmVjdGlvbjIueSkgLyBkZXQ7XHJcblxyXG4gICAgcmV0dXJuIHBvaW50MS5hZGQoZGlyZWN0aW9uMS5tdWx0aXBseSh0KSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldENsb3Nlc3RQb2ludE9uTGluZShcclxuICAgIGxpbmVQb2ludDogVmVjdG9yMmYsXHJcbiAgICBsaW5lRGlyZWN0aW9uOiBWZWN0b3IyZixcclxuICAgIHBvaW50OiBWZWN0b3IyZlxyXG4gICk6IFZlY3RvcjJmIHtcclxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IGxpbmVEaXJlY3Rpb24ubm9ybWFsaXNlKCk7XHJcbiAgICBjb25zdCB2ZWN0b3IgPSBwb2ludC5zdWJ0cmFjdChsaW5lUG9pbnQpO1xyXG4gICAgY29uc3QgZGlzdGFuY2UgPSB2ZWN0b3IuZG90KGRpcmVjdGlvbik7XHJcbiAgICByZXR1cm4gbGluZVBvaW50LmFkZChkaXJlY3Rpb24ubXVsdGlwbHkoZGlzdGFuY2UpKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0Rmlyc3RSYXlDaXJjbGVJbnRlcnNlY3Rpb24oXHJcbiAgICBjZW50cmU6IFZlY3RvcjJmLFxyXG4gICAgcmFkaXVzOiBudW1iZXIsXHJcbiAgICBvcmlnaW46IFZlY3RvcjJmLFxyXG4gICAgZGlyZWN0aW9uOiBWZWN0b3IyZlxyXG4gICk6IG51bWJlciB7XHJcbiAgICBjb25zdCBkZWx0YSA9IG9yaWdpbi5zdWJ0cmFjdChjZW50cmUpO1xyXG5cclxuICAgIGNvbnN0IGEgPSBkaXJlY3Rpb24uZG90KGRpcmVjdGlvbik7XHJcbiAgICBjb25zdCBiID0gMiAqIGRpcmVjdGlvbi5kb3QoZGVsdGEpO1xyXG4gICAgY29uc3QgYyA9IGRlbHRhLmRvdChkZWx0YSkgLSByYWRpdXMgKiogMjtcclxuXHJcbiAgICBjb25zdCBkaXNjcmltID0gYiAqKiAyIC0gNCAqIGEgKiBjO1xyXG5cclxuICAgIGlmIChkaXNjcmltIDwgMCkge1xyXG4gICAgICAvLyBObyBpbnRlcnNlY3Rpb25cclxuICAgICAgcmV0dXJuIEluZmluaXR5O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRpc3RhbmNlID0gKCgtYiAtIE1hdGguc3FydChkaXNjcmltKSkgLyAyKSAqIGE7XHJcblxyXG4gICAgaWYgKGRpc3RhbmNlIDwgMCkge1xyXG4gICAgICAvLyBJbnRlcnNlY3Rpb24gYmVoaW5kXHJcbiAgICAgIHJldHVybiBJbmZpbml0eTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGlzdGFuY2U7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldENvbG91cihwcmVmZXJyZWRWZWxvY2l0eTogVmVjdG9yMmYpIHtcclxuICAgIGNvbnN0IHN0cmVzcyA9IHByZWZlcnJlZFZlbG9jaXR5LnN1YnRyYWN0KHRoaXMuX2RpcmVjdGlvbikubWFnbml0dWRlKCk7XHJcbiAgICB0aGlzLl9jb2xvdXIgPSBDb2xvdXIuRnJvbUhzdigoMSAtIHN0cmVzcykgLyAzLCAxLCAxKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2hlY2tJZkRvbmUoKSB7XHJcbiAgICBjb25zdCBmaW5pc2hUaHJlc2hvbGQgPSAxLjA7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICB0aGlzLl9wb3NpdGlvbi5zdWJ0cmFjdCh0aGlzLl9nb2FsUG9zaXRpb24pLm1hZ25pdHVkZVNxcmQoKSA8XHJcbiAgICAgIGZpbmlzaFRocmVzaG9sZFxyXG4gICAgKSB7XHJcbiAgICAgIHRoaXMuX2lzRG9uZSA9IHRydWU7XHJcbiAgICAgIHRoaXMuX3Bvc2l0aW9uID0gdGhpcy5fZ29hbFBvc2l0aW9uO1xyXG4gICAgICB0aGlzLl9kaXJlY3Rpb24gPSBuZXcgVmVjdG9yMmYoMCwgMCk7XHJcbiAgICAgIHRoaXMuX2NvbG91ciA9IENvbG91ci5XaGl0ZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgU2ltdWxhdGlvbiB9IGZyb20gXCIuL1NpbXVsYXRpb25cIjtcclxuaW1wb3J0IHsgUmVuZGVyZXIyRCB9IGZyb20gXCIuL1JlbmRlcmVyMkRcIjtcclxuaW1wb3J0IHsgQ29uZmlndXJhdGlvbnMgfSBmcm9tIFwiLi9Db25maWd1cmF0aW9uc1wiO1xyXG5pbXBvcnQgeyBBZ2VudFRyZWUgfSBmcm9tIFwiLi9BZ2VudFRyZWVcIjtcclxuaW1wb3J0IHsgVmVjdG9yMmYgfSBmcm9tIFwiLi9WZWN0b3IyZlwiO1xyXG5pbXBvcnQgeyBCYXNpY0FnZW50IH0gZnJvbSBcIi4vYWdlbnRzL0Jhc2ljQWdlbnRcIjtcclxuaW1wb3J0IHsgU3RvcEFnZW50IH0gZnJvbSBcIi4vYWdlbnRzL1N0b3BBZ2VudFwiO1xyXG5pbXBvcnQgeyBWT0FnZW50IH0gZnJvbSBcIi4vYWdlbnRzL1ZPQWdlbnRcIjtcclxuaW1wb3J0IHsgUlZPQWdlbnQgfSBmcm9tIFwiLi9hZ2VudHMvUlZPQWdlbnRcIjtcclxuaW1wb3J0IHsgSFJWT0FnZW50IH0gZnJvbSBcIi4vYWdlbnRzL0hSVk9BZ2VudFwiO1xyXG5cclxuY29uc3QgY29uZmlnU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb25maWdcIikgYXMgSFRNTFNlbGVjdEVsZW1lbnQ7XHJcbmNvbnN0IGFnZW50VHlwZVNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gIFwiYWdlbnRUeXBlXCJcclxuKSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcclxuY29uc3QgbnVtYmVyT2ZBZ2VudHNJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gIFwibnVtYmVyT2ZBZ2VudHNcIlxyXG4pIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcblxyXG5jb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxuY29uc3QgZnJhbWVyYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmcmFtZXJhdGVcIikgYXMgSFRNTFBhcmFncmFwaEVsZW1lbnQ7XHJcbmNvbnN0IHBsYXlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXlCdXR0b25cIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbmNvbnN0IHN0ZXBCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0ZXBCdXR0b25cIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcblxyXG5jb25zdCByZW5kZXJlciA9IG5ldyBSZW5kZXJlcjJEKGNhbnZhcyk7XHJcbmNvbnN0IHNpbXVsYXRpb24gPSBuZXcgU2ltdWxhdGlvbihyZW5kZXJlciwgbmV3IEFnZW50VHJlZSgpKTtcclxudmFyIHBsYXkgPSBmYWxzZTtcclxuXHJcbi8vIGluaXRpYWxpc2Ugc2ltdWxhdGlvbiBhbmQgYmVnaW4gdXBkYXRlL3JlbmRlciBsb29wXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xyXG4gIHRoaXMucmVjb25maWd1cmUoKTtcclxuXHJcbiAgbGV0IGxhc3RSZW5kZXIgPSAwO1xyXG4gIGxldCBsYXN0RlBTID0gMDtcclxuICBsZXQgZnJhbWVzID0gMDtcclxuXHJcbiAgZnVuY3Rpb24gbG9vcCh0aW1lc3RhbXA6IG51bWJlcikge1xyXG4gICAgbGV0IGRlbHRhVCA9IHRpbWVzdGFtcCAtIGxhc3RSZW5kZXI7XHJcbiAgICBsYXN0UmVuZGVyID0gdGltZXN0YW1wO1xyXG5cclxuICAgIC8vIHVwZGF0ZVxyXG4gICAgaWYgKHBsYXkpIHtcclxuICAgICAgc2ltdWxhdGlvbi51cGRhdGUoZGVsdGFUKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyByZW5kZXJcclxuICAgIHNpbXVsYXRpb24uZHJhdygpO1xyXG4gICAgZnJhbWVzKys7XHJcblxyXG4gICAgLy8gcmVjYWxjdWxhdGUgZnJhbWVyYXRlIGV2ZXJ5IDI1MG1zXHJcbiAgICBpZiAodGltZXN0YW1wIC0gbGFzdEZQUyA+PSAyNTApIHtcclxuICAgICAgZnJhbWVyYXRlLnRleHRDb250ZW50ID0gYEZQUzogJHsoXHJcbiAgICAgICAgKDEwMDAgKiBmcmFtZXMpIC9cclxuICAgICAgICAodGltZXN0YW1wIC0gbGFzdEZQUylcclxuICAgICAgKS50b0ZpeGVkKDEpfWA7XHJcblxyXG4gICAgICBmcmFtZXMgPSAwO1xyXG4gICAgICBsYXN0RlBTID0gdGltZXN0YW1wO1xyXG4gICAgfVxyXG5cclxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XHJcbiAgfVxyXG5cclxuICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xyXG59XHJcblxyXG4vLyB0b2dnbGUgcGxheS9wYXVzZVxyXG5leHBvcnQgZnVuY3Rpb24gcGxheVBhdXNlKCkge1xyXG4gIHBsYXkgPSAhcGxheTtcclxuXHJcbiAgaWYgKHBsYXkpIHtcclxuICAgIHBsYXlCdXR0b24udGV4dENvbnRlbnQgPSBcIlBhdXNlXCI7XHJcbiAgICBzdGVwQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICB9IGVsc2Uge1xyXG4gICAgcGxheUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiUGxheVwiO1xyXG4gICAgc3RlcEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gIH1cclxufVxyXG5cclxuLy8gc3RlcCBzaW11bGF0aW9uIGJ5IDEgZnJhbWVcclxuZXhwb3J0IGZ1bmN0aW9uIHN0ZXAoKSB7XHJcbiAgc2ltdWxhdGlvbi51cGRhdGUoMTAwMCAvIDYwKTsgLy8gQXNzdW1lcyA2MEZQU1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVjb25maWd1cmUoKSB7XHJcbiAgaWYgKHBsYXkpIHtcclxuICAgIHRoaXMucGxheVBhdXNlKCk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBjb25maWcgPSBjb25maWdTZWxlY3QudmFsdWU7XHJcbiAgY29uc3QgYWdlbnRUeXBlID0gYWdlbnRUeXBlU2VsZWN0LnZhbHVlOyAvLyBUT0RPOiB3aXJlIHRoaXMgaW5cclxuICBjb25zdCBuID0gcGFyc2VJbnQobnVtYmVyT2ZBZ2VudHNJbnB1dC52YWx1ZSkgPz8gMDtcclxuXHJcbiAgLy8gU2VsZWN0IGFnZW50IGNvbnN0cnVjdG9yXHJcbiAgbGV0IGFnZW50Q29uc3RydWN0b3I7XHJcbiAgc3dpdGNoIChhZ2VudFR5cGUpIHtcclxuICAgIGNhc2UgXCJCYXNpY0FnZW50XCI6XHJcbiAgICAgIGFnZW50Q29uc3RydWN0b3IgPSAoXHJcbiAgICAgICAgaWQ6IG51bWJlcixcclxuICAgICAgICBwb3NpdGlvbjogVmVjdG9yMmYsXHJcbiAgICAgICAgZ29hbFBvc2l0aW9uOiBWZWN0b3IyZixcclxuICAgICAgICByYWRpdXM6IG51bWJlclxyXG4gICAgICApID0+IG5ldyBCYXNpY0FnZW50KGlkLCBwb3NpdGlvbiwgZ29hbFBvc2l0aW9uLCByYWRpdXMpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgXCJTdG9wQWdlbnRcIjpcclxuICAgICAgYWdlbnRDb25zdHJ1Y3RvciA9IChcclxuICAgICAgICBpZDogbnVtYmVyLFxyXG4gICAgICAgIHBvc2l0aW9uOiBWZWN0b3IyZixcclxuICAgICAgICBnb2FsUG9zaXRpb246IFZlY3RvcjJmLFxyXG4gICAgICAgIHJhZGl1czogbnVtYmVyXHJcbiAgICAgICkgPT4gbmV3IFN0b3BBZ2VudChpZCwgcG9zaXRpb24sIGdvYWxQb3NpdGlvbiwgcmFkaXVzKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIFwiVk9BZ2VudFwiOlxyXG4gICAgICBhZ2VudENvbnN0cnVjdG9yID0gKFxyXG4gICAgICAgIGlkOiBudW1iZXIsXHJcbiAgICAgICAgcG9zaXRpb246IFZlY3RvcjJmLFxyXG4gICAgICAgIGdvYWxQb3NpdGlvbjogVmVjdG9yMmYsXHJcbiAgICAgICAgcmFkaXVzOiBudW1iZXJcclxuICAgICAgKSA9PiBuZXcgVk9BZ2VudChpZCwgcG9zaXRpb24sIGdvYWxQb3NpdGlvbiwgcmFkaXVzKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIFwiUlZPQWdlbnRcIjpcclxuICAgICAgYWdlbnRDb25zdHJ1Y3RvciA9IChcclxuICAgICAgICBpZDogbnVtYmVyLFxyXG4gICAgICAgIHBvc2l0aW9uOiBWZWN0b3IyZixcclxuICAgICAgICBnb2FsUG9zaXRpb246IFZlY3RvcjJmLFxyXG4gICAgICAgIHJhZGl1czogbnVtYmVyXHJcbiAgICAgICkgPT4gbmV3IFJWT0FnZW50KGlkLCBwb3NpdGlvbiwgZ29hbFBvc2l0aW9uLCByYWRpdXMpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgXCJIUlZPQWdlbnRcIjpcclxuICAgICAgYWdlbnRDb25zdHJ1Y3RvciA9IChcclxuICAgICAgICBpZDogbnVtYmVyLFxyXG4gICAgICAgIHBvc2l0aW9uOiBWZWN0b3IyZixcclxuICAgICAgICBnb2FsUG9zaXRpb246IFZlY3RvcjJmLFxyXG4gICAgICAgIHJhZGl1czogbnVtYmVyXHJcbiAgICAgICkgPT4gbmV3IEhSVk9BZ2VudChpZCwgcG9zaXRpb24sIGdvYWxQb3NpdGlvbiwgcmFkaXVzKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OiB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkFnZW50IG5vdCBpbXBsZW1lbnRlZFwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFNlbGVjdCBjb25maWd1cmF0aW9uXHJcbiAgc3dpdGNoIChjb25maWcpIHtcclxuICAgIGNhc2UgXCJSYW5kb21Ub1JhbmRvbVwiOiB7XHJcbiAgICAgIHNpbXVsYXRpb24uaW5pdChcclxuICAgICAgICBDb25maWd1cmF0aW9ucy5SYW5kb21Ub1JhbmRvbShcclxuICAgICAgICAgIG4sXHJcbiAgICAgICAgICBjYW52YXMud2lkdGgsXHJcbiAgICAgICAgICBjYW52YXMuaGVpZ2h0LFxyXG4gICAgICAgICAgYWdlbnRDb25zdHJ1Y3RvclxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICBjYXNlIFwiUmFuZG9tVG9MaW5lXCI6IHtcclxuICAgICAgc2ltdWxhdGlvbi5pbml0KFxyXG4gICAgICAgIENvbmZpZ3VyYXRpb25zLlJhbmRvbVRvTGluZShcclxuICAgICAgICAgIG4sXHJcbiAgICAgICAgICBjYW52YXMud2lkdGgsXHJcbiAgICAgICAgICBjYW52YXMuaGVpZ2h0LFxyXG4gICAgICAgICAgYWdlbnRDb25zdHJ1Y3RvclxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICBjYXNlIFwiQ2lyY2xlVG9DaXJjbGVcIjoge1xyXG4gICAgICBzaW11bGF0aW9uLmluaXQoXHJcbiAgICAgICAgQ29uZmlndXJhdGlvbnMuQ2lyY2xlVG9DaXJjbGUoXHJcbiAgICAgICAgICBuLFxyXG4gICAgICAgICAgY2FudmFzLndpZHRoLFxyXG4gICAgICAgICAgY2FudmFzLmhlaWdodCxcclxuICAgICAgICAgIGFnZW50Q29uc3RydWN0b3JcclxuICAgICAgICApXHJcbiAgICAgICk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgY2FzZSBcIkdyaWRUb0dyaWRcIjoge1xyXG4gICAgICBzaW11bGF0aW9uLmluaXQoXHJcbiAgICAgICAgQ29uZmlndXJhdGlvbnMuR3JpZFRvR3JpZChcclxuICAgICAgICAgIG4sXHJcbiAgICAgICAgICBjYW52YXMud2lkdGgsXHJcbiAgICAgICAgICBjYW52YXMuaGVpZ2h0LFxyXG4gICAgICAgICAgYWdlbnRDb25zdHJ1Y3RvclxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICBkZWZhdWx0OiB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbmZpZ3VyYXRpb24gbm90IGltcGxlbWVudGVkXCIpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIG1vZHVsZSBleHBvcnRzIG11c3QgYmUgcmV0dXJuZWQgZnJvbSBydW50aW1lIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkXG4vLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbnJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyNSk7XG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyJdLCJzb3VyY2VSb290IjoiIn0=