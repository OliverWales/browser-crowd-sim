var CrowdSimulator;CrowdSimulator=(()=>{"use strict";var t={861:(t,i,e)=>{e.r(i),e.d(i,{init:()=>P,playPause:()=>w,reconfigure:()=>I,step:()=>D});var n=function(){function t(t,i){this._renderer=t,this._agents=i}return t.prototype.init=function(t){this._agents.init(t.agents)},t.prototype.update=function(t){var i=this;this._agents.forEach((function(e){e.update(t,i._agents.getNeighboursInRangeEuclidean(e,300))})),this._agents.init(this._agents.getAll())},t.prototype.draw=function(){this._renderer.clear(),this._renderer.drawAgents(this._agents)},t}(),o=function(){function t(t){var i=this;this.cameraDist=800,this.mouseDown=function(t){i.drag=!0,i.oldX=t.pageX,i.oldY=t.pageY},this.mouseUp=function(t){i.drag=!1,t.preventDefault()},this.mouseMove=function(t){if(!i.drag)return!1;i.xPan+=t.pageX-i.oldX,i.yPan+=t.pageY-i.oldY,i.oldX=t.pageX,i.oldY=t.pageY},this.mouseScroll=function(t){i.cameraDist+=t.deltaY,i.cameraDist<0&&(i.cameraDist=0),t.preventDefault(),console.log("Scroll")},this.canvas=t,this.context=this.canvas.getContext("2d"),this.xPan=this.canvas.width/2,this.yPan=this.canvas.height/2,this.canvas.addEventListener("mousedown",this.mouseDown,!1),this.canvas.addEventListener("mouseup",this.mouseUp,!1),this.canvas.addEventListener("mouseout",this.mouseUp,!1),this.canvas.addEventListener("mousemove",this.mouseMove,!1),this.canvas.addEventListener("wheel",this.mouseScroll,!1)}return t.prototype.clear=function(){this.context.setTransform(1,0,0,1,0,0),this.context.fillStyle="rgb(135, 194, 250)",this.context.fillRect(0,0,this.context.canvas.width,this.context.canvas.height)},t.prototype.drawAgents=function(t){var i=this,e=800/this.cameraDist;this.context.setTransform(1,0,0,1,0,0),this.context.translate(this.xPan,this.yPan),this.context.scale(e,e),this.context.fillStyle="rgb(51, 51, 51)",this.context.fillRect(.55*-this.context.canvas.width,.55*-this.context.canvas.height,1.1*this.context.canvas.width,1.1*this.context.canvas.height),t.forEach((function(t){i.drawAgent(t)}))},t.prototype.drawAgent=function(t){var i=t.getPosition(),e=t.getDirection(),n=t.getColour();this.context.beginPath(),this.context.strokeStyle="rgb("+n.r+", "+n.g+", "+n.b+")",this.context.lineWidth=2,this.context.arc(i.x,i.y,t.Radius,0,2*Math.PI);var o=e.magnitude();if(0!==o){this.context.moveTo(i.x,i.y);var s=i.add(e.divide(o).multiply(t.Radius));this.context.lineTo(s.x,s.y)}this.context.stroke()},t}(),s=function(){function t(){}return t.FromHsv=function(t,i,e){var n=(t*=6)-Math.floor(t),o=e*(1-i),s=e*(1-i*n),r=e*(1-i*(1-n));return 0<=t&&t<1?{r:255*e,g:255*r,b:255*o}:1<=t&&t<2?{r:255*s,g:255*e,b:255*o}:2<=t&&t<3?{r:255*o,g:255*e,b:255*r}:3<=t&&t<4?{r:255*o,g:255*s,b:255*e}:4<=t&&t<5?{r:255*r,g:255*o,b:255*e}:5<=t&&t<6?{r:255*e,g:255*o,b:255*s}:{r:0,g:0,b:0}},t.White={r:255,g:255,b:255},t.Red={r:255,g:0,b:0},t.Green={r:0,g:255,b:0},t}(),r=function(){function t(t,i){this.x=t,this.y=i}return t.prototype.copy=function(i){return new t(i.x,i.y)},t.prototype.add=function(i){return new t(this.x+i.x,this.y+i.y)},t.prototype.subtract=function(i){return new t(this.x-i.x,this.y-i.y)},t.prototype.multiply=function(i){return new t(this.x*i,this.y*i)},t.prototype.divide=function(i){return new t(this.x/i,this.y/i)},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.magnitudeSqrd=function(){return Math.pow(this.x,2)+Math.pow(this.y,2)},t.prototype.magnitude=function(){return Math.sqrt(this.magnitudeSqrd())},t.prototype.normalise=function(){var i=this.magnitude();return 0==i?new t(0,0):this.divide(i)},t.prototype.sample=function(i){var e=Math.sqrt(Math.random())*i,n=2*Math.PI*Math.random();return new t(this.x+e*Math.cos(n),this.y+e*Math.sin(n))},t}(),a=function(){function t(t,i,e,n){this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new r(0,0),this._isDone=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getColour=function(){return this._isDone?s.White:s.Green},t.prototype.update=function(t,i){if(!this._isDone){var e=this._goalPosition.subtract(this._position);e.magnitude()>60*t/1e3?(this._direction=e.normalise(),this._position=this._position.add(this._direction.multiply(60*t/1e3))):(this._position=this._goalPosition,this._isDone=!0)}},t.prototype.isDone=function(){return this._isDone},t}(),h=function(){function t(t,i,e,n){this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new r(0,0),this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getColour=function(){return this._isDone?s.White:this._isStuck?s.Red:s.Green},t.prototype.update=function(t,i){var e=this;if(!this._isDone){var n=this._goalPosition.subtract(this._position);if(n.magnitude()>60*t/1e3){this._direction=n.normalise();var o=this._position.add(this._direction.multiply(20));this._isStuck=!1,i.forEach((function(t){t.Id!=e.Id&&e.collides(t,o)&&(e._isStuck=!0)})),this._isStuck||(this._position=this._position.add(this._direction.multiply(60*t/1e3)))}else this._position=this._goalPosition,this._isDone=!0}},t.prototype.isDone=function(){return this._isDone},t.prototype.collides=function(t,i){return t.getPosition().subtract(i).magnitude()<t.Radius+this.Radius},t}(),u=function(){function t(){}return t.RandomToRandom=function(t,i,e,n){for(var o=[],s=this.poissonDiskSample(i,e,t,50),a=this.poissonDiskSample(i,e,t,50),h=new r(i/2,e/2),u=0;u<t;u++){var c=n(u,s[u].subtract(h),a[u].subtract(h),20);o.push(c)}return{agents:o}},t.RandomToLine=function(t,i,e,n){for(var o=[],s=this.poissonDiskSample(i,e,t,50),a=new r(i/2,e/2),h=0;h<t;h++){var u=n(h,s[h].subtract(a),new r(((h+1)/(t+1)-.5)*i,0),20);o.push(u)}return{agents:o}},t.CircleToCircle=function(t,i,e,n){for(var o=[],s=e/2-25,a=0;a<t;a++){var h=2*Math.PI*a/t,u=n(a,new r(s*Math.cos(h),s*Math.sin(h)),new r(s*Math.cos(h+Math.PI),s*Math.sin(h+Math.PI)),20);o.push(u)}return{agents:o}},t.GridToGrid=function(t,i,e,n){for(var o=[],s=Math.ceil(Math.sqrt(t/2)),a=90,h=30-i/2,u=-(s-1)/2*a,c=0;c<t;c++){var d=Math.floor(c/2),g=Math.floor(d/s),l=d%s;if(c%2==0){var p=n(c,new r(h+(s-1-l)*a,u+g*a),new r(-h-l*a,u+g*a),20);o.push(p)}else p=n(c,new r(-h-(s-1-l)*a,u+g*a),new r(h+l*a,u+g*a),20),o.push(p)}return{agents:o}},t.poissonDiskSample=function(t,i,e,n){for(var o=[],s=function(){for(var e,s=!0;s;)s=!1,e=new r(t*Math.random(),i*Math.random()),o.forEach((function(t){e.subtract(t).magnitudeSqrd()<Math.pow(n,2)&&(s=!0)}));o.push(e)},a=0;a<e;a++)s();return o},t}(),c=function(){function t(){}return t.prototype.init=function(t){this._agents=t,this._root=this.constructTree(this._agents,!0)},t.prototype.getAll=function(){return this._agents},t.prototype.getNeighboursInRangeRectilinear=function(t,i){var e=t.getPosition().x-i,n=t.getPosition().y-i,o=t.getPosition().x+i,s=t.getPosition().y+i;return this.rangeSearch(this._root,e,n,o,s,!0).filter((function(i){return i.Id!==t.Id}))},t.prototype.getNeighboursInRangeEuclidean=function(t,i){return this.getNeighboursInRangeRectilinear(t,i).filter((function(e){return t.getPosition().subtract(e.getPosition()).magnitudeSqrd()<=Math.pow(i,2)}))},t.prototype.forEach=function(t){this._agents.forEach(t)},t.prototype.constructTree=function(t,i){if(0===t.length)return null;var e=Math.floor(t.length/2),n=i?t.sort((function(t,i){return t.getPosition().x-i.getPosition().x})):t.sort((function(t,i){return t.getPosition().y-i.getPosition().y})),o=this.constructTree(n.slice(0,e),!i),s=this.constructTree(n.slice(e+1,t.length),!i);return{agent:t[e],left:o,right:s}},t.prototype.rangeSearch=function(t,i,e,n,o,s){if(null==t)return[];var r=[];return s?(t.agent.getPosition().x<=n&&(r=r.concat(this.rangeSearch(t.right,i,e,n,o,!s))),t.agent.getPosition().x>=i&&(r=r.concat(this.rangeSearch(t.left,i,e,n,o,!s)))):(t.agent.getPosition().y<=o&&(r=r.concat(this.rangeSearch(t.right,i,e,n,o,!s))),t.agent.getPosition().y>=e&&(r=r.concat(this.rangeSearch(t.left,i,e,n,o,!s)))),t.agent.getPosition().x>=i&&t.agent.getPosition().y>=e&&t.agent.getPosition().x<=n&&t.agent.getPosition().y<=o&&r.push(t.agent),r},t}(),d=function(){function t(t,i,e,n){this.MAX_VELOCITY=1,this.MAX_ACCELERATION=.5,this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new r(0,0),this._isDone=!1,this._colour=s.Green}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getColour=function(){return this._colour},t.prototype.update=function(t,i){if(!this._isDone){for(var e,n,o=.5,a=this.getPreferredVelocity(o),h=this._goalPosition.subtract(this.getPosition()).magnitudeSqrd(),u=!0,c=0;c<i.length;c++)if(!(i[c].getPosition().subtract(this.getPosition()).magnitudeSqrd()>h)&&null!=(m=this.getVelocityObstacle(i[c]))&&this.isInside(a,m)){u=!1,e=m,n=c;break}if(u)return this._direction=a,this._position=this._position.add(a),this._colour=s.Green,void this.checkIfDone();if(null!=e){var d=this.getClosestPointOnLine(e.vertex,e.tangent1,a);if(d.magnitude()<=o){for(u=!0,c=0;c<i.length;c++)if(c!=n&&null!=(m=this.getVelocityObstacle(i[c]))&&this.isInside(d,m)){u=!1;break}if(u)return this._direction=d,this._position=this._position.add(d),this.setColour(a),void this.checkIfDone()}var g=this.getClosestPointOnLine(e.vertex,e.tangent2,a);if(d.magnitude()<=o){for(u=!0,c=0;c<i.length;c++)if(c!=n&&null!=(m=this.getVelocityObstacle(i[c]))&&this.isInside(g,m)){u=!1;break}if(u)return this._direction=g,this._position=this._position.add(g),this.setColour(a),void this.checkIfDone()}}var l=Math.sqrt(h),p=1/0,f=new r(0,0);for(c=0;c<100;c++){for(var y=new r(0,0).sample(o),v=1/0,_=0;_<i.length;_++){var m,x=i[_];if(null==(m=this.getVelocityObstacle(x))||this.isInside(y,m)){var b=this.getFirstRayCircleIntersection(x.getPosition().add(x.getDirection()),this.Radius+x.Radius,this._position,y.subtract(x.getDirection()));if(b<v&&0==(v=b))return this.setColour(a),void this.checkIfDone()}}var P;(P=v<l?100/v+a.subtract(y).magnitude():a.subtract(y).magnitude())<p&&(p=P,f=y)}this._direction=f,this._position=this._position.add(f),this.setColour(a),this.checkIfDone()}},t.prototype.isDone=function(){return this._isDone},t.prototype.getPreferredVelocity=function(t){var i=this._goalPosition.subtract(this._position),e=i.magnitude();return e>t?i.divide(e/t):i},t.prototype.getVelocityObstacle=function(t){var i=t.getDirection(),e=t.getPosition().subtract(this._position).add(i),n=t.Radius+this.Radius,o=i.subtract(e),s=o.magnitude();if(s<n)return null;var a=Math.acos(n/s),h=Math.atan2(o.y,o.x),u=h+a,c=h-a;return{vertex:i,tangent1:new r(e.x+n*Math.cos(u),e.y+n*Math.sin(u)),tangent2:new r(e.x+n*Math.cos(c),e.y+n*Math.sin(c))}},t.prototype.isInside=function(t,i){var e=(i.tangent1.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent1.y-i.vertex.y)*(t.x-i.vertex.x),n=(i.tangent2.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent2.y-i.vertex.y)*(t.x-i.vertex.x);return e>0&&n<0},t.prototype.getClosestPointOnLine=function(t,i,e){var n=i.normalise(),o=e.subtract(t).dot(n);return t.add(n.multiply(o))},t.prototype.getFirstRayCircleIntersection=function(t,i,e,n){var o=e.subtract(t),s=n.dot(n),r=2*n.dot(o),a=o.dot(o)-Math.pow(i,2),h=Math.pow(r,2)-4*s*a;if(h<0)return 1/0;var u=(-r-Math.sqrt(h))/2*s;return u<0?1/0:u},t.prototype.setColour=function(t){var i=t.subtract(this._direction).magnitude();this._colour=s.FromHsv((1-i)/3,1,1)},t.prototype.checkIfDone=function(){this._position.subtract(this._goalPosition).magnitudeSqrd()<1&&(this._isDone=!0,this._position=this._goalPosition,this._direction=new r(0,0),this._colour=s.White)},t}(),g=function(){function t(t,i,e,n){this.MAX_VELOCITY=1,this.MAX_ACCELERATION=.5,this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new r(0,0),this._isDone=!1,this._colour=s.Green}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getColour=function(){return this._colour},t.prototype.update=function(t,i){if(!this._isDone){for(var e,n,o=.5,a=this.getPreferredVelocity(o),h=this._goalPosition.subtract(this.getPosition()).magnitudeSqrd(),u=!0,c=0;c<i.length;c++)if(!(i[c].getPosition().subtract(this.getPosition()).magnitudeSqrd()>h)&&null!=(m=this.getReciprocalVelocityObstacle(i[c]))&&this.isInside(a,m)){u=!1,e=m,n=c;break}if(u)return this._direction=a,this._position=this._position.add(a),this._colour=s.Green,void this.checkIfDone();if(null!=e){var d=this.getClosestPointOnLine(e.vertex,e.tangent1,a);if(d.magnitude()<=o){for(u=!0,c=0;c<i.length;c++)if(c!=n&&null!=(m=this.getReciprocalVelocityObstacle(i[c]))&&this.isInside(d,m)){u=!1;break}if(u)return this._direction=d,this._position=this._position.add(d),this.setColour(a),void this.checkIfDone()}var g=this.getClosestPointOnLine(e.vertex,e.tangent2,a);if(d.magnitude()<=o){for(u=!0,c=0;c<i.length;c++)if(c!=n&&null!=(m=this.getReciprocalVelocityObstacle(i[c]))&&this.isInside(g,m)){u=!1;break}if(u)return this._direction=g,this._position=this._position.add(g),this.setColour(a),void this.checkIfDone()}}var l=Math.sqrt(h),p=1/0,f=new r(0,0);for(c=0;c<100;c++){for(var y=new r(0,0).sample(o),v=1/0,_=0;_<i.length;_++){var m,x=i[_];if(null!=(m=this.getReciprocalVelocityObstacle(x))&&this.isInside(y,m)){var b=this.getFirstRayCircleIntersection(x.getPosition().add(x.getDirection()),this.Radius+x.Radius,this._position,y.multiply(2).subtract(this.getDirection()).subtract(x.getDirection()));if(b<v&&0==(v=b))return this.setColour(a),void this.checkIfDone()}}var P;(P=v<l?100/v+a.subtract(y).magnitude():a.subtract(y).magnitude())<p&&(p=P,f=y)}this._direction=f,this._position=this._position.add(f),this.setColour(a),this.checkIfDone()}},t.prototype.isDone=function(){return this._isDone},t.prototype.getPreferredVelocity=function(t){var i=this._goalPosition.subtract(this._position),e=i.magnitude();return e>t?i.divide(e/t):i},t.prototype.getReciprocalVelocityObstacle=function(t){var i=this.getDirection(),e=t.getDirection(),n=i.add(e).divide(2),o=t.getPosition().subtract(this._position).add(e),s=t.Radius+this.Radius,a=e.subtract(o),h=a.magnitude();if(h<s)return null;var u=Math.acos(s/h),c=Math.atan2(a.y,a.x),d=c+u,g=c-u;return{vertex:n,tangent1:new r(o.x+s*Math.cos(d),o.y+s*Math.sin(d)),tangent2:new r(o.x+s*Math.cos(g),o.y+s*Math.sin(g))}},t.prototype.isInside=function(t,i){var e=(i.tangent1.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent1.y-i.vertex.y)*(t.x-i.vertex.x),n=(i.tangent2.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent2.y-i.vertex.y)*(t.x-i.vertex.x);return e>0&&n<0},t.prototype.getClosestPointOnLine=function(t,i,e){var n=i.normalise(),o=e.subtract(t).dot(n);return t.add(n.multiply(o))},t.prototype.getFirstRayCircleIntersection=function(t,i,e,n){var o=e.subtract(t),s=n.dot(n),r=2*n.dot(o),a=o.dot(o)-Math.pow(i,2),h=Math.pow(r,2)-4*s*a;if(h<0)return 1/0;var u=(-r-Math.sqrt(h))/2*s;return u<0?1/0:u},t.prototype.setColour=function(t){var i=t.subtract(this._direction).magnitude();this._colour=s.FromHsv((1-i)/3,1,1)},t.prototype.checkIfDone=function(){this._position.subtract(this._goalPosition).magnitudeSqrd()<1&&(this._isDone=!0,this._position=this._goalPosition,this._direction=new r(0,0),this._colour=s.White)},t}(),l=document.getElementById("config"),p=document.getElementById("agentType"),f=document.getElementById("numberOfAgents"),y=document.getElementById("canvas"),v=document.getElementById("framerate"),_=document.getElementById("playButton"),m=document.getElementById("stepButton"),x=new n(new o(y),new c),b=!1;function P(){this.reconfigure();var t=0,i=0,e=0;window.requestAnimationFrame((function n(o){var s=o-t;t=o,b&&x.update(s),x.draw(),e++,o-i>=250&&(v.textContent="FPS: "+(1e3*e/(o-i)).toFixed(1),e=0,i=o),window.requestAnimationFrame(n)}))}function w(){(b=!b)?(_.textContent="Pause",m.disabled=!0):(_.textContent="Play",m.disabled=!1)}function D(){x.update(1e3/60)}function I(){var t;b&&this.playPause();var i,e=l.value,n=p.value,o=null!==(t=parseInt(f.value))&&void 0!==t?t:0;switch(n){case"BasicAgent":i=function(t,i,e,n){return new a(t,i,e,n)};break;case"StopAgent":i=function(t,i,e,n){return new h(t,i,e,n)};break;case"VOAgent":i=function(t,i,e,n){return new d(t,i,e,n)};break;case"RVOAgent":i=function(t,i,e,n){return new g(t,i,e,n)};break;default:throw new Error("Agent not implemented")}switch(e){case"RandomToRandom":x.init(u.RandomToRandom(o,y.width,y.height,i));break;case"RandomToLine":x.init(u.RandomToLine(o,y.width,y.height,i));break;case"CircleToCircle":x.init(u.CircleToCircle(o,y.width,y.height,i));break;case"GridToGrid":x.init(u.GridToGrid(o,y.width,y.height,i));break;default:throw new Error("Configuration not implemented")}}}},i={};function e(n){if(i[n])return i[n].exports;var o=i[n]={exports:{}};return t[n](o,o.exports,e),o.exports}return e.d=(t,i)=>{for(var n in i)e.o(i,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:i[n]})},e.o=(t,i)=>Object.prototype.hasOwnProperty.call(t,i),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e(861)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,