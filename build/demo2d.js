var CrowdSimulator;CrowdSimulator=(()=>{"use strict";var t={546:(t,i,e)=>{e.r(i),e.d(i,{init:()=>T,playPause:()=>E,reconfigure:()=>L,step:()=>G});var n,o=function(){function t(t,i){this._renderer=t,this._agents=i}return t.prototype.init=function(t){this._agents.init(t)},t.prototype.update=function(t){var i=this;this._agents.forEach((function(e){e.update(t,i._agents.getNeighboursInRangeEuclidean(e,300))})),this._agents.init(this._agents.getAll())},t.prototype.draw=function(){this._renderer.clear(),this._renderer.drawAgents(this._agents)},t}(),r=function(){function t(t){var i=this;this.cameraDist=800,this.mouseDown=function(t){i.drag=!0,i.oldX=t.pageX,i.oldY=t.pageY},this.mouseUp=function(t){i.drag=!1,t.preventDefault()},this.mouseMove=function(t){if(!i.drag)return!1;i.xPan+=t.pageX-i.oldX,i.yPan+=t.pageY-i.oldY,i.oldX=t.pageX,i.oldY=t.pageY},this.mouseScroll=function(t){i.cameraDist+=t.deltaY,i.cameraDist<0&&(i.cameraDist=0),t.preventDefault(),console.log("Scroll")},this.canvas=t,this.context=this.canvas.getContext("2d"),this.xPan=this.canvas.width/2,this.yPan=this.canvas.height/2,this.canvas.addEventListener("mousedown",this.mouseDown,!1),this.canvas.addEventListener("mouseup",this.mouseUp,!1),this.canvas.addEventListener("mouseout",this.mouseUp,!1),this.canvas.addEventListener("mousemove",this.mouseMove,!1),this.canvas.addEventListener("wheel",this.mouseScroll,!1)}return t.prototype.clear=function(){this.context.setTransform(1,0,0,1,0,0),this.context.fillStyle="rgb(135, 194, 250)",this.context.fillRect(0,0,this.context.canvas.width,this.context.canvas.height)},t.prototype.drawAgents=function(t){var i=this,e=800/this.cameraDist;this.context.setTransform(1,0,0,1,0,0),this.context.translate(this.xPan,this.yPan),this.context.scale(e,e),this.context.fillStyle="rgb(51, 51, 51)",this.context.fillRect(.55*-this.context.canvas.width,.55*-this.context.canvas.height,1.1*this.context.canvas.width,1.1*this.context.canvas.height),t.forEach((function(t){i.drawAgent(t)}))},t.prototype.drawAgent=function(t){var i=t.getPosition(),e=t.getDirection(),n=t.getColour();this.context.beginPath(),this.context.strokeStyle="rgb("+n.r+", "+n.g+", "+n.b+")",this.context.lineWidth=2,this.context.arc(i.x,i.y,t.Radius,0,2*Math.PI);var o=e.magnitude();if(0!==o){this.context.moveTo(i.x,i.y);var r=i.add(e.divide(o).multiply(t.Radius));this.context.lineTo(r.x,r.y)}this.context.stroke()},t}(),s=function(){function t(){}return t.prototype.init=function(t){this._agents=t,this._root=this.constructTree(this._agents,!0)},t.prototype.getAll=function(){return this._agents},t.prototype.getNeighboursInRangeRectilinear=function(t,i){var e=t.getPosition().x-i,n=t.getPosition().y-i,o=t.getPosition().x+i,r=t.getPosition().y+i;return this.rangeSearch(this._root,e,n,o,r,!0).filter((function(i){return i.Id!==t.Id}))},t.prototype.getNeighboursInRangeEuclidean=function(t,i){return this.getNeighboursInRangeRectilinear(t,i).filter((function(e){return t.getPosition().subtract(e.getPosition()).magnitudeSqrd()<=Math.pow(i,2)}))},t.prototype.forEach=function(t){this._agents.forEach(t)},t.prototype.constructTree=function(t,i){if(0===t.length)return null;var e=Math.floor(t.length/2),n=i?t.sort((function(t,i){return t.getPosition().x-i.getPosition().x})):t.sort((function(t,i){return t.getPosition().y-i.getPosition().y})),o=this.constructTree(n.slice(0,e),!i),r=this.constructTree(n.slice(e+1,t.length),!i);return{agent:t[e],left:o,right:r}},t.prototype.rangeSearch=function(t,i,e,n,o,r){if(null==t)return[];var s=[];return r?(t.agent.getPosition().x<=n&&(s=s.concat(this.rangeSearch(t.right,i,e,n,o,!r))),t.agent.getPosition().x>=i&&(s=s.concat(this.rangeSearch(t.left,i,e,n,o,!r)))):(t.agent.getPosition().y<=o&&(s=s.concat(this.rangeSearch(t.right,i,e,n,o,!r))),t.agent.getPosition().y>=e&&(s=s.concat(this.rangeSearch(t.left,i,e,n,o,!r)))),t.agent.getPosition().x>=i&&t.agent.getPosition().y>=e&&t.agent.getPosition().x<=n&&t.agent.getPosition().y<=o&&s.push(t.agent),s},t}(),a=function(){function t(t,i){this.x=t,this.y=i}return t.prototype.copy=function(i){return new t(i.x,i.y)},t.prototype.add=function(i){return new t(this.x+i.x,this.y+i.y)},t.prototype.subtract=function(i){return new t(this.x-i.x,this.y-i.y)},t.prototype.multiply=function(i){return new t(this.x*i,this.y*i)},t.prototype.divide=function(i){return new t(this.x/i,this.y/i)},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.magnitudeSqrd=function(){return Math.pow(this.x,2)+Math.pow(this.y,2)},t.prototype.magnitude=function(){return Math.sqrt(this.magnitudeSqrd())},t.prototype.normalise=function(){var i=this.magnitude();return 0==i?new t(0,0):this.divide(i)},t.prototype.sample=function(i){var e=Math.sqrt(Math.random())*i,n=2*Math.PI*Math.random();return new t(this.x+e*Math.cos(n),this.y+e*Math.sin(n))},t}(),c=function(){function t(t,i,e){this.Id=t,this.Radius=20,this._position=i,this._direction=new a(0,0),this._getPreferredVelocity=e,this._isDone=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.isDone=function(){return this._isDone},t}(),u=function(){function t(){}return t.FromHsv=function(t,i,e){var n=(t*=6)-Math.floor(t),o=e*(1-i),r=e*(1-i*n),s=e*(1-i*(1-n));return 0<=t&&t<1?{r:255*e,g:255*s,b:255*o}:1<=t&&t<2?{r:255*r,g:255*e,b:255*o}:2<=t&&t<3?{r:255*o,g:255*e,b:255*s}:3<=t&&t<4?{r:255*o,g:255*r,b:255*e}:4<=t&&t<5?{r:255*s,g:255*o,b:255*e}:5<=t&&t<6?{r:255*e,g:255*o,b:255*r}:{r:0,g:0,b:0}},t.White={r:255,g:255,b:255},t.Red={r:255,g:0,b:0},t.Green={r:0,g:255,b:0},t}(),h=(n=function(t,i){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,i){t.__proto__=i}||function(t,i){for(var e in i)Object.prototype.hasOwnProperty.call(i,e)&&(t[e]=i[e])})(t,i)},function(t,i){function e(){this.constructor=t}n(t,i),t.prototype=null===i?Object.create(i):(e.prototype=i.prototype,new e)}),l=function(t){function i(){return null!==t&&t.apply(this,arguments)||this}return h(i,t),i.prototype.getColour=function(){return this._isDone?u.White:u.Green},i.prototype.update=function(t,i){if(!this._isDone){var e=this._getPreferredVelocity(this._position);e.magnitude(),0!=e.x||0!=e.y?(this._direction=e,this._position=this._position.add(e.multiply(60*t/1e3))):this._isDone=!0}},i}(c),d=function(){var t=function(i,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,i){t.__proto__=i}||function(t,i){for(var e in i)Object.prototype.hasOwnProperty.call(i,e)&&(t[e]=i[e])})(i,e)};return function(i,e){function n(){this.constructor=i}t(i,e),i.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}(),p=function(t){function i(i,e,n){var o=t.call(this,i,e,n)||this;return o._isStuck=!1,o}return d(i,t),i.prototype.getColour=function(){return this._isDone?u.White:this._isStuck?u.Red:u.Green},i.prototype.update=function(t,i){if(!this._isDone){var e=this._getPreferredVelocity(this._position);if(0!=e.x||0!=e.y){this._direction=e.normalise();var n=this._position.add(this._direction.multiply(20));this._isStuck=!1;for(var o=0;o<i.length;o++)if(this.collides(i[o],n))return void(this._isStuck=!0);this._direction=e,this._position=this._position.add(this._direction.multiply(60*t/1e3))}else this._isDone=!0}},i.prototype.collides=function(t,i){return t.getPosition().subtract(i).magnitudeSqrd()<(t.Radius+this.Radius)*(t.Radius+this.Radius)},i}(c),f=function(){function t(){}return t.getClosestPointOnLine=function(t,i,e){var n=i.normalise(),o=e.subtract(t).dot(n);return t.add(n.multiply(o))},t.getFirstRayCircleIntersection=function(t,i,e,n){var o=e.subtract(t),r=n.dot(n),s=2*n.dot(o),a=o.dot(o)-Math.pow(i,2),c=Math.pow(s,2)-4*r*a;if(c<0)return 1/0;var u=(-s-Math.sqrt(c))/2*r;return u<0?1/0:u},t.getLineLineIntersection=function(t,i,e,n){var o=e.subtract(t),r=n.x*i.y-n.y*i.x,s=(o.y*n.x-o.y*n.y)/r;return t.add(i.multiply(s))},t}(),g=function(){function t(t,i,e){this.vertex=t,this.tangent1=i,this.tangent2=e}return t.prototype.contains=function(t){var i=(this.tangent1.x-this.vertex.x)*(t.y-this.vertex.y)-(this.tangent1.y-this.vertex.y)*(t.x-this.vertex.x),e=(this.tangent2.x-this.vertex.x)*(t.y-this.vertex.y)-(this.tangent2.y-this.vertex.y)*(t.x-this.vertex.x);return i>0&&e<0},t}(),y=function(){var t=function(i,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,i){t.__proto__=i}||function(t,i){for(var e in i)Object.prototype.hasOwnProperty.call(i,e)&&(t[e]=i[e])})(i,e)};return function(i,e){function n(){this.constructor=i}t(i,e),i.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}(),_=function(t){function i(i,e,n){var o=t.call(this,i,e,n)||this;return o._colour=u.Green,o}return y(i,t),i.prototype.getColour=function(){return this._colour},i.prototype.update=function(t,i){if(!this._isDone){var e=this._getPreferredVelocity(this._position);if(0==e.x&&0==e.y)return this._isDone=!0,this._direction=new a(0,0),void(this._colour=u.White);for(var n,o,r=!0,s=0;s<i.length;s++)if(null!=(m=this.getVelocityObstacle(i[s]))&&m.contains(e)){r=!1,n=m,o=s;break}if(r)return this._direction=e,this._position=this._position.add(this._direction.multiply(60*t/1e3)),void(this._colour=u.Green);if(null!=n){var c=f.getClosestPointOnLine(n.vertex,n.tangent1,e),h=f.getClosestPointOnLine(n.vertex,n.tangent2,e),l=!0,d=!0;for(s=0;s<i.length;s++)s!=o&&(null!=(m=this.getVelocityObstacle(i[s]))&&m.contains(c)&&(l=!1),null!=m&&m.contains(c)&&(d=!1));if(l&&d?c.subtract(e).magnitudeSqrd()<h.subtract(e).magnitudeSqrd()?this._direction=c:this._direction=h:l?this._direction=c:d&&(this._direction=h),l||d)return this._position=this._position.add(this._direction.multiply(60*t/1e3)),void this.setColour(e)}var p=1/0,g=new a(0,0);for(s=0;s<100;s++){for(var y=new a(0,0).sample(1),_=1/0,v=0;v<i.length;v++){var m,x=i[v];if(null==(m=this.getVelocityObstacle(x))||m.contains(y)){var b=f.getFirstRayCircleIntersection(x.getPosition().add(x.getDirection()),this.Radius+x.Radius,this._position,y.subtract(x.getDirection()));b<_&&(_=b)}}var w=100/_+e.subtract(y).magnitude();w<p&&(p=w,g=y)}this._direction=g,this._position=this._position.add(this._direction.multiply(60*t/1e3)),this.setColour(e)}},i.prototype.getVelocityObstacle=function(t){var i=t.getDirection(),e=t.getPosition().subtract(this._position).add(i),n=t.Radius+this.Radius,o=i.subtract(e),r=o.magnitude();if(r<n)return null;var s=Math.acos(n/r),c=Math.atan2(o.y,o.x),u=c+s,h=new a(e.x+n*Math.cos(u),e.y+n*Math.sin(u)),l=c-s,d=new a(e.x+n*Math.cos(l),e.y+n*Math.sin(l));return new g(i,h,d)},i.prototype.setColour=function(t){var i=t.subtract(this._direction).magnitude();this._colour=u.FromHsv((1-i)/3,1,1)},i}(c),v=function(){var t=function(i,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,i){t.__proto__=i}||function(t,i){for(var e in i)Object.prototype.hasOwnProperty.call(i,e)&&(t[e]=i[e])})(i,e)};return function(i,e){function n(){this.constructor=i}t(i,e),i.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}(),m=function(t){function i(i,e,n){var o=t.call(this,i,e,n)||this;return o._colour=u.Green,o}return v(i,t),i.prototype.getColour=function(){return this._colour},i.prototype.update=function(t,i){if(!this._isDone){var e=this._getPreferredVelocity(this._position);if(0==e.x&&0==e.y)return this._isDone=!0,this._direction=new a(0,0),void(this._colour=u.White);for(var n,o,r=!0,s=0;s<i.length;s++)if(null!=(m=this.getReciprocalVelocityObstacle(i[s]))&&m.contains(e)){r=!1,n=m,o=s;break}if(r)return this._direction=e,this._position=this._position.add(this._direction.multiply(60*t/1e3)),void(this._colour=u.Green);if(null!=n){var c=f.getClosestPointOnLine(n.vertex,n.tangent1,e),h=f.getClosestPointOnLine(n.vertex,n.tangent2,e),l=!0,d=!0;for(s=0;s<i.length;s++)s!=o&&(null!=(m=this.getReciprocalVelocityObstacle(i[s]))&&m.contains(c)&&(l=!1),null!=m&&m.contains(c)&&(d=!1));if(l&&d?c.subtract(e).magnitudeSqrd()<h.subtract(e).magnitudeSqrd()?this._direction=c:this._direction=h:l?this._direction=c:d&&(this._direction=h),l||d)return this._position=this._position.add(this._direction.multiply(60*t/1e3)),void this.setColour(e)}var p=1/0,g=new a(0,0);for(s=0;s<100;s++){for(var y=new a(0,0).sample(1),_=1/0,v=0;v<i.length;v++){var m,x=i[v];if(null==(m=this.getReciprocalVelocityObstacle(x))||m.contains(y)){var b=f.getFirstRayCircleIntersection(x.getPosition().add(x.getDirection()),this.Radius+x.Radius,this._position,y.subtract(x.getDirection()));b<_&&(_=b)}}var w=100/_+e.subtract(y).magnitude();w<p&&(p=w,g=y)}this._direction=g,this._position=this._position.add(this._direction.multiply(60*t/1e3)),this.setColour(e)}},i.prototype.getReciprocalVelocityObstacle=function(t){var i=this.getDirection(),e=t.getDirection(),n=i.add(e).divide(2),o=t.getPosition().subtract(this._position).add(e),r=t.Radius+this.Radius,s=e.subtract(o),c=s.magnitude();if(c<r)return null;var u=Math.acos(r/c),h=Math.atan2(s.y,s.x),l=h+u,d=new a(o.x+r*Math.cos(l),o.y+r*Math.sin(l)),p=h-u,f=new a(o.x+r*Math.cos(p),o.y+r*Math.sin(p));return new g(n,d,f)},i.prototype.setColour=function(t){var i=t.subtract(this._direction).magnitude();this._colour=u.FromHsv((1-i)/3,1,1)},i}(c),x=function(){var t=function(i,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,i){t.__proto__=i}||function(t,i){for(var e in i)Object.prototype.hasOwnProperty.call(i,e)&&(t[e]=i[e])})(i,e)};return function(i,e){function n(){this.constructor=i}t(i,e),i.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}(),b=function(t){function i(i,e,n){var o=t.call(this,i,e,n)||this;return o._colour=u.Green,o}return x(i,t),i.prototype.getColour=function(){return this._colour},i.prototype.update=function(t,i){if(!this._isDone){var e=this._getPreferredVelocity(this._position);if(0==e.x&&0==e.y)return this._isDone=!0,this._direction=new a(0,0),void(this._colour=u.White);for(var n,o,r=!0,s=0;s<i.length;s++)if(null!=(m=this.getHybridReciprocalVelocityObstacle(i[s]))&&m.contains(e)){r=!1,n=m,o=s;break}if(r)return this._direction=e,this._position=this._position.add(this._direction.multiply(60*t/1e3)),void(this._colour=u.Green);if(null!=n){var c=f.getClosestPointOnLine(n.vertex,n.tangent1,e),h=f.getClosestPointOnLine(n.vertex,n.tangent2,e),l=!0,d=!0;for(s=0;s<i.length;s++)s!=o&&(null!=(m=this.getHybridReciprocalVelocityObstacle(i[s]))&&m.contains(c)&&(l=!1),null!=m&&m.contains(c)&&(d=!1));if(l&&d?c.subtract(e).magnitudeSqrd()<h.subtract(e).magnitudeSqrd()?this._direction=c:this._direction=h:l?this._direction=c:d&&(this._direction=h),l||d)return this._position=this._position.add(this._direction.multiply(60*t/1e3)),void this.setColour(e)}var p=1/0,g=new a(0,0);for(s=0;s<100;s++){for(var y=new a(0,0).sample(1),_=1/0,v=0;v<i.length;v++){var m,x=i[v];if(null==(m=this.getHybridReciprocalVelocityObstacle(x))||m.contains(y)){var b=f.getFirstRayCircleIntersection(x.getPosition().add(x.getDirection()),this.Radius+x.Radius,this._position,y.subtract(x.getDirection()));b<_&&(_=b)}}var w=100/_+e.subtract(y).magnitude();w<p&&(p=w,g=y)}this._direction=g,this._position=this._position.add(this._direction.multiply(60*t/1e3)),this.setColour(e)}},i.prototype.getHybridReciprocalVelocityObstacle=function(t){var i=this.getDirection(),e=t.getDirection(),n=e,o=i.add(e).divide(2),r=t.getPosition().subtract(this._position),s=r.add(e),c=t.Radius+this.Radius,u=e.subtract(s),h=u.magnitude();if(h<c)return null;var l,d=Math.acos(c/h),p=Math.atan2(u.y,u.x),y=p+d,_=new a(s.x+c*Math.cos(y),s.y+c*Math.sin(y)),v=p-d,m=new a(s.x+c*Math.cos(v),s.y+c*Math.sin(v));return l=(r.x-e.x)*(i.y-e.y)-(r.y-e.y)*(i.x-e.x)>0?f.getLineLineIntersection(n,_,o,m):f.getLineLineIntersection(n,m,o,_),new g(l,_,m)},i.prototype.setColour=function(t){var i=t.subtract(this._direction).magnitude();this._colour=u.FromHsv((1-i)/3,1,1)},i}(c),w=function(){function t(){}return t.getAgent=function(t,i,e,n){switch(t){case"BasicAgent":return new l(i,e,n);case"StopAgent":return new p(i,e,n);case"VOAgent":return new _(i,e,n);case"RVOAgent":return new m(i,e,n);case"HRVOAgent":return new b(i,e,n);default:throw new Error('Unknown agent type "'+t+'"')}},t}(),P=function(){function t(){}return t.getConfiguration=function(t,i,e,n,o){switch(t){case"RandomToRandom":return this.RandomToRandom(i,e,n,o);case"RandomToLine":return this.RandomToLine(i,e,n,o);case"CircleToCircle":return this.CircleToCircle(i,e,n,o);case"GridToGrid":return this.GridToGrid(i,e,n,o);default:throw new Error('Unknown configuration type "'+t+'"')}},t.RandomToRandom=function(t,i,e,n){for(var o=[],r=this.poissonDiskSample(i,e,n,50).map((function(t){return t.subtract(new a(i/2,e/2))})),s=this.poissonDiskSample(i,e,n,50).map((function(t){return t.subtract(new a(i/2,e/2))})),c=0;c<n;c++){var u=w.getAgent(t,c,r[c],this.preferredVelocityFromGoalPosition(s[c]));o.push(u)}return o},t.RandomToLine=function(t,i,e,n){for(var o=[],r=this.poissonDiskSample(i,e,n,50).map((function(t){return t.subtract(new a(i/2,e/2))})),s=0;s<n;s++){var c=w.getAgent(t,s,r[s],this.preferredVelocityFromGoalPosition(new a(((s+1)/(n+1)-.5)*i,0)));o.push(c)}return o},t.CircleToCircle=function(t,i,e,n){for(var o=[],r=e/2-25,s=0;s<n;s++){var c=2*Math.PI*s/n,u=w.getAgent(t,s,new a(r*Math.cos(c),r*Math.sin(c)),this.preferredVelocityFromGoalPosition(new a(r*Math.cos(c+Math.PI),r*Math.sin(c+Math.PI))));o.push(u)}return o},t.GridToGrid=function(t,i,e,n){for(var o=[],r=Math.ceil(Math.sqrt(n/2)),s=90,c=30-i/2,u=-(r-1)/2*s,h=0;h<n;h++){var l=Math.floor(h/2),d=Math.floor(l/r),p=l%r;if(h%2==0){var f=w.getAgent(t,h,new a(c+(r-1-p)*s,u+d*s),this.preferredVelocityFromGoalPosition(new a(-c-p*s,u+d*s)));o.push(f)}else f=w.getAgent(t,h,new a(-c-(r-1-p)*s,u+d*s),this.preferredVelocityFromGoalPosition(new a(c+p*s,u+d*s))),o.push(f)}return o},t.preferredVelocityFromGoalPosition=function(t){return function(i){var e=t.subtract(i);return e.magnitudeSqrd()<1?e:e.normalise()}},t.poissonDiskSample=function(t,i,e,n){for(var o=[],r=function(){for(var e,r=!0;r;)r=!1,e=new a(t*Math.random(),i*Math.random()),o.forEach((function(t){e.subtract(t).magnitudeSqrd()<Math.pow(n,2)&&(r=!0)}));o.push(e)},s=0;s<e;s++)r();return o},t}(),O=document.getElementById("config"),M=document.getElementById("agentType"),R=document.getElementById("numberOfAgents"),D=document.getElementById("canvas"),S=document.getElementById("framerate"),C=document.getElementById("playButton"),I=document.getElementById("stepButton"),V=new o(new r(D),new s),A=!1;function T(){this.reconfigure();var t=0,i=0,e=0;window.requestAnimationFrame((function n(o){var r=o-t;t=o,A&&V.update(r),V.draw(),e++,o-i>=250&&(S.textContent="FPS: "+(1e3*e/(o-i)).toFixed(1),e=0,i=o),window.requestAnimationFrame(n)}))}function E(){(A=!A)?(C.textContent="Pause",I.disabled=!0):(C.textContent="Play",I.disabled=!1)}function G(){V.update(1e3/60)}function L(){var t;A&&this.playPause();var i=O.value,e=M.value,n=null!==(t=parseInt(R.value))&&void 0!==t?t:0;V.init(P.getConfiguration(i,e,D.width,D.height,n))}}},i={};function e(n){if(i[n])return i[n].exports;var o=i[n]={exports:{}};return t[n](o,o.exports,e),o.exports}return e.d=(t,i)=>{for(var n in i)e.o(i,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:i[n]})},e.o=(t,i)=>Object.prototype.hasOwnProperty.call(t,i),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e(546)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,