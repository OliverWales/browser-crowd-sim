var CrowdSimulator;CrowdSimulator=(()=>{"use strict";var t={615:(t,i,e)=>{e.r(i),e.d(i,{init:()=>P,playPause:()=>b,reconfigure:()=>I,step:()=>w});var n=function(){function t(t,i){this._renderer=t,this._agents=i}return t.prototype.init=function(t){this._agents.init(t.agents)},t.prototype.update=function(t){var i=this;this._agents.forEach((function(e){e.update(t,i._agents.getNeighboursInRangeEuclidean(e,300))})),this._agents.init(this._agents.getAll())},t.prototype.draw=function(){this._renderer.clear(),this._renderer.drawAgents(this._agents)},t}(),o=function(){function t(t){this._context=t.getContext("2d")}return t.prototype.clear=function(){this._context.fillStyle="white",this._context.fillRect(0,0,this._context.canvas.width,this._context.canvas.height)},t.prototype.drawAgents=function(t){var i=this;t.forEach((function(t){i.drawAgent(t)}))},t.prototype.drawAgent=function(t){var i=t.getPosition(),e=t.getDirection();this._context.beginPath(),t.getIsDone()?this._context.strokeStyle="#00FF00":t.getIsStuck()?this._context.strokeStyle="#FF0000":this._context.strokeStyle="#000000",this._context.arc(i.x,i.y,t.Radius,0,2*Math.PI);var n=e.magnitude();if(0!==n){this._context.moveTo(i.x,i.y);var o=i.add(e.divide(n).multiply(t.Radius));this._context.lineTo(o.x,o.y)}this._context.stroke()},t}(),r=function(){function t(t,i){this.x=t,this.y=i}return t.prototype.copy=function(i){return new t(i.x,i.y)},t.prototype.add=function(i){return new t(this.x+i.x,this.y+i.y)},t.prototype.subtract=function(i){return new t(this.x-i.x,this.y-i.y)},t.prototype.multiply=function(i){return new t(this.x*i,this.y*i)},t.prototype.divide=function(i){return new t(this.x/i,this.y/i)},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.magnitudeSqrd=function(){return Math.pow(this.x,2)+Math.pow(this.y,2)},t.prototype.magnitude=function(){return Math.sqrt(this.magnitudeSqrd())},t.prototype.normalise=function(){var i=this.magnitude();return 0==i?new t(0,0):this.divide(i)},t.prototype.sample=function(i){var e=Math.sqrt(Math.random())*i,n=2*Math.PI*Math.random();return new t(this.x+e*Math.cos(n),this.y+e*Math.sin(n))},t}(),s=function(){function t(t,i,e,n){this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new r(0,0),this._isDone=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return!1},t.prototype.update=function(t,i){if(!this._isDone){var e=this._goalPosition.subtract(this._position);e.magnitude()>60*t/1e3?(this._direction=e.normalise(),this._position=this._position.add(this._direction.multiply(60*t/1e3))):(this._position=this._goalPosition,this._isDone=!0)}},t}(),a=function(){function t(t,i,e,n){this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new r(0,0),this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){var e=this;if(!this._isDone){var n=this._goalPosition.subtract(this._position);if(n.magnitude()>60*t/1e3){this._direction=n.normalise();var o=this._position.add(this._direction.multiply(20));this._isStuck=!1,i.forEach((function(t){t.Id!=e.Id&&e.collides(t,o)&&(e._isStuck=!0)})),this._isStuck||(this._position=this._position.add(this._direction.multiply(60*t/1e3)))}else this._position=this._goalPosition,this._isDone=!0}},t.prototype.collides=function(t,i){return t.getPosition().subtract(i).magnitude()<t.Radius+this.Radius},t}(),u=function(){function t(){}return t.RandomToRandom=function(t,i,e,n){for(var o=[],r=this.poissonDiskSample(i,e,t,50),s=this.poissonDiskSample(i,e,t,50),a=0;a<t;a++){var u=n(a,r[a],s[a],20);o.push(u)}return{agents:o}},t.RandomToLine=function(t,i,e,n){for(var o=[],s=this.poissonDiskSample(i,e,t,50),a=0;a<t;a++){var u=n(a,s[a],new r((a+1)/(t+1)*i,e/2),20);o.push(u)}return{agents:o}},t.CircleToCircle=function(t,i,e,n){for(var o=[],s=i/2,a=e/2,u=e/2-25,c=0;c<t;c++){var h=2*Math.PI*c/t,d=n(c,new r(s+u*Math.cos(h),a+u*Math.sin(h)),new r(s+u*Math.cos(h+Math.PI),a+u*Math.sin(h+Math.PI)),20);o.push(d)}return{agents:o}},t.GridToGrid=function(t,i,e,n){for(var o=[],s=Math.ceil(t/8),a=i-50-90*(s-1),u=e/2-135,c=0,h=0;h<s;h++){for(var d=0;d<4;d++){var g=new r(50+90*h,u+90*d),p=new r(a+90*h,u+90*d);if(o.push(n(c,g,p,20)),++c>=t)break;if(o.push(n(c,p,g,20)),++c>=t)break}if(c>=t)break}return{agents:o}},t.poissonDiskSample=function(t,i,e,n){for(var o=[],s=function(){for(var e,s=!0;s;)s=!1,e=new r(t*Math.random(),i*Math.random()),o.forEach((function(t){e.subtract(t).magnitudeSqrd()<Math.pow(n,2)&&(s=!0)}));o.push(e)},a=0;a<e;a++)s();return o},t}(),c=function(){function t(){}return t.prototype.init=function(t){this._agents=t,this._root=this.constructTree(this._agents,!0)},t.prototype.getAll=function(){return this._agents},t.prototype.getNeighboursInRangeRectilinear=function(t,i){var e=t.getPosition().x-i,n=t.getPosition().y-i,o=t.getPosition().x+i,r=t.getPosition().y+i;return this.rangeSearch(this._root,e,n,o,r,!0).filter((function(i){return i.Id!==t.Id}))},t.prototype.getNeighboursInRangeEuclidean=function(t,i){return this.getNeighboursInRangeRectilinear(t,i).filter((function(e){return t.getPosition().subtract(e.getPosition()).magnitudeSqrd()<=Math.pow(i,2)}))},t.prototype.forEach=function(t){this._agents.forEach(t)},t.prototype.constructTree=function(t,i){if(0===t.length)return null;var e=Math.floor(t.length/2),n=i?t.sort((function(t,i){return t.getPosition().x-i.getPosition().x})):t.sort((function(t,i){return t.getPosition().y-i.getPosition().y})),o=this.constructTree(n.slice(0,e),!i),r=this.constructTree(n.slice(e+1,t.length),!i);return{agent:t[e],left:o,right:r}},t.prototype.rangeSearch=function(t,i,e,n,o,r){if(null==t)return[];var s=[];return r?(t.agent.getPosition().x<=n&&(s=s.concat(this.rangeSearch(t.right,i,e,n,o,!r))),t.agent.getPosition().x>=i&&(s=s.concat(this.rangeSearch(t.left,i,e,n,o,!r)))):(t.agent.getPosition().y<=o&&(s=s.concat(this.rangeSearch(t.right,i,e,n,o,!r))),t.agent.getPosition().y>=e&&(s=s.concat(this.rangeSearch(t.left,i,e,n,o,!r)))),t.agent.getPosition().x>=i&&t.agent.getPosition().y>=e&&t.agent.getPosition().x<=n&&t.agent.getPosition().y<=o&&s.push(t.agent),s},t}(),h=function(){function t(t,i,e,n){this.MAX_VELOCITY=1,this.MAX_ACCELERATION=.5,this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new r(0,0),this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){if(!this._isDone){var e=.5,n=this.getPreferredVelocity(e),o=this._goalPosition.subtract(this.getPosition()).magnitudeSqrd();this._isStuck=!1;for(var s,a,u=!0,c=0;c<i.length;c++)if(!(i[c].getPosition().subtract(this.getPosition()).magnitudeSqrd()>o)&&null!=(v=this.getVelocityObstacle(i[c]))&&this.isInside(n,v)){u=!1,s=v,a=c;break}if(u)return this._direction=n,this._position=this._position.add(n),void this.checkIfDone();if(null!=s){var h=this.getClosestPointOnLine(s.vertex,s.tangent1,n);if(h.magnitude()<=e){for(u=!0,c=0;c<i.length;c++)if(c!=a&&null!=(v=this.getVelocityObstacle(i[c]))&&this.isInside(h,v)){u=!1;break}if(u)return this._direction=h,this._position=this._position.add(h),void this.checkIfDone()}var d=this.getClosestPointOnLine(s.vertex,s.tangent2,n);if(h.magnitude()<=e){for(u=!0,c=0;c<i.length;c++)if(c!=a&&null!=(v=this.getVelocityObstacle(i[c]))&&this.isInside(d,v)){u=!1;break}if(u)return this._direction=d,this._position=this._position.add(d),void this.checkIfDone()}}var g=Math.sqrt(o),p=1/0,f=new r(0,0);for(c=0;c<100;c++){for(var l=new r(0,0).sample(e),y=1/0,_=0;_<i.length;_++){var v,m=i[_];if(null==(v=this.getVelocityObstacle(m))||this.isInside(l,v)){var x=this.getFirstRayCircleIntersection(m.getPosition().add(m.getDirection()),this.Radius+m.Radius,this._position,l.subtract(m.getDirection()));if(x<y&&0==(y=x))return void this.checkIfDone()}}var P;(P=y<g?100/y+n.subtract(l).magnitude():n.subtract(l).magnitude())<p&&(p=P,f=l)}0==f.magnitude()&&(this._isStuck=!0),this._direction=f,this._position=this._position.add(f),this.checkIfDone()}},t.prototype.getPreferredVelocity=function(t){var i=this._goalPosition.subtract(this._position),e=i.magnitude();return e>t?i.divide(e/t):i},t.prototype.getVelocityObstacle=function(t){var i=t.getDirection(),e=t.getPosition().subtract(this._position).add(i),n=t.Radius+this.Radius,o=i.subtract(e),s=o.magnitude();if(s<n)return null;var a=Math.acos(n/s),u=Math.atan2(o.y,o.x),c=u+a,h=u-a;return{vertex:i,tangent1:new r(e.x+n*Math.cos(c),e.y+n*Math.sin(c)),tangent2:new r(e.x+n*Math.cos(h),e.y+n*Math.sin(h))}},t.prototype.isInside=function(t,i){var e=(i.tangent1.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent1.y-i.vertex.y)*(t.x-i.vertex.x),n=(i.tangent2.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent2.y-i.vertex.y)*(t.x-i.vertex.x);return e>0&&n<0},t.prototype.getClosestPointOnLine=function(t,i,e){var n=i.normalise(),o=e.subtract(t).dot(n);return t.add(n.multiply(o))},t.prototype.getFirstRayCircleIntersection=function(t,i,e,n){var o=e.subtract(t),r=n.dot(n),s=2*n.dot(o),a=o.dot(o)-Math.pow(i,2),u=Math.pow(s,2)-4*r*a;if(u<0)return 1/0;var c=(-s-Math.sqrt(u))/2*r;return c<0?1/0:c},t.prototype.checkIfDone=function(){this._position.subtract(this._goalPosition).magnitudeSqrd()<1&&(this._isDone=!0,this._position=this._goalPosition,this._direction=new r(0,0))},t}(),d=function(){function t(t,i,e,n){this.MAX_VELOCITY=1,this.MAX_ACCELERATION=.5,this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new r(0,0),this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){if(!this._isDone){var e=.5,n=this.getPreferredVelocity(e),o=this._goalPosition.subtract(this.getPosition()).magnitudeSqrd();this._isStuck=!1;for(var s,a,u=!0,c=0;c<i.length;c++)if(!(i[c].getPosition().subtract(this.getPosition()).magnitudeSqrd()>o)&&null!=(v=this.getReciprocalVelocityObstacle(i[c]))&&this.isInside(n,v)){u=!1,s=v,a=c;break}if(u)return this._direction=n,this._position=this._position.add(n),void this.checkIfDone();if(null!=s){var h=this.getClosestPointOnLine(s.vertex,s.tangent1,n);if(h.magnitude()<=e){for(u=!0,c=0;c<i.length;c++)if(c!=a&&null!=(v=this.getReciprocalVelocityObstacle(i[c]))&&this.isInside(h,v)){u=!1;break}if(u)return this._direction=h,this._position=this._position.add(h),void this.checkIfDone()}var d=this.getClosestPointOnLine(s.vertex,s.tangent2,n);if(h.magnitude()<=e){for(u=!0,c=0;c<i.length;c++)if(c!=a&&null!=(v=this.getReciprocalVelocityObstacle(i[c]))&&this.isInside(d,v)){u=!1;break}if(u)return this._direction=d,this._position=this._position.add(d),void this.checkIfDone()}}var g=Math.sqrt(o),p=1/0,f=new r(0,0);for(c=0;c<100;c++){for(var l=new r(0,0).sample(e),y=1/0,_=0;_<i.length;_++){var v,m=i[_];if(null!=(v=this.getReciprocalVelocityObstacle(m))&&this.isInside(l,v)){var x=this.getFirstRayCircleIntersection(m.getPosition().add(m.getDirection()),this.Radius+m.Radius,this._position,l.multiply(2).subtract(this.getDirection()).subtract(m.getDirection()));if(x<y&&0==(y=x))return void this.checkIfDone()}}var P;(P=y<g?100/y+n.subtract(l).magnitude():n.subtract(l).magnitude())<p&&(p=P,f=l)}0==f.magnitude()&&(this._isStuck=!0),this._direction=f,this._position=this._position.add(f),this.checkIfDone()}},t.prototype.getPreferredVelocity=function(t){var i=this._goalPosition.subtract(this._position),e=i.magnitude();return e>t?i.divide(e/t):i},t.prototype.getReciprocalVelocityObstacle=function(t){var i=this.getDirection(),e=t.getDirection(),n=i.add(e).divide(2),o=t.getPosition().subtract(this._position).add(e),s=t.Radius+this.Radius,a=e.subtract(o),u=a.magnitude();if(u<s)return null;var c=Math.acos(s/u),h=Math.atan2(a.y,a.x),d=h+c,g=h-c;return{vertex:n,tangent1:new r(o.x+s*Math.cos(d),o.y+s*Math.sin(d)),tangent2:new r(o.x+s*Math.cos(g),o.y+s*Math.sin(g))}},t.prototype.isInside=function(t,i){var e=(i.tangent1.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent1.y-i.vertex.y)*(t.x-i.vertex.x),n=(i.tangent2.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent2.y-i.vertex.y)*(t.x-i.vertex.x);return e>0&&n<0},t.prototype.getClosestPointOnLine=function(t,i,e){var n=i.normalise(),o=e.subtract(t).dot(n);return t.add(n.multiply(o))},t.prototype.getFirstRayCircleIntersection=function(t,i,e,n){var o=e.subtract(t),r=n.dot(n),s=2*n.dot(o),a=o.dot(o)-Math.pow(i,2),u=Math.pow(s,2)-4*r*a;if(u<0)return 1/0;var c=(-s-Math.sqrt(u))/2*r;return c<0?1/0:c},t.prototype.checkIfDone=function(){this._position.subtract(this._goalPosition).magnitudeSqrd()<1&&(this._isDone=!0,this._position=this._goalPosition,this._direction=new r(0,0))},t}(),g=document.getElementById("config"),p=document.getElementById("agentType"),f=document.getElementById("numberOfAgents"),l=document.getElementById("canvas"),y=document.getElementById("framerate"),_=document.getElementById("playButton"),v=document.getElementById("stepButton"),m=new n(new o(l),new c),x=!1;function P(){this.reconfigure();var t=0,i=0,e=0;window.requestAnimationFrame((function n(o){var r=o-t;t=o,x&&m.update(r),m.draw(),e++,o-i>=250&&(y.textContent="FPS: "+(1e3*e/(o-i)).toFixed(1),e=0,i=o),window.requestAnimationFrame(n)}))}function b(){(x=!x)?(_.textContent="Pause",v.disabled=!0):(_.textContent="Play",v.disabled=!1)}function w(){m.update(1e3/60)}function I(){var t;x&&this.playPause();var i,e=g.value,n=p.value,o=null!==(t=parseInt(f.value))&&void 0!==t?t:0;switch(n){case"BasicAgent":i=function(t,i,e,n){return new s(t,i,e,n)};break;case"StopAgent":i=function(t,i,e,n){return new a(t,i,e,n)};break;case"VOAgent":i=function(t,i,e,n){return new h(t,i,e,n)};break;case"RVOAgent":i=function(t,i,e,n){return new d(t,i,e,n)};break;default:throw new Error("Agent not implemented")}switch(e){case"RandomToRandom":m.init(u.RandomToRandom(o,l.width,l.height,i));break;case"RandomToLine":m.init(u.RandomToLine(o,l.width,l.height,i));break;case"CircleToCircle":m.init(u.CircleToCircle(o,l.width,l.height,i));break;case"GridToGrid":m.init(u.GridToGrid(o,l.width,l.height,i));break;default:throw new Error("Configuration not implemented")}}}},i={};function e(n){if(i[n])return i[n].exports;var o=i[n]={exports:{}};return t[n](o,o.exports,e),o.exports}return e.d=(t,i)=>{for(var n in i)e.o(i,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:i[n]})},e.o=(t,i)=>Object.prototype.hasOwnProperty.call(t,i),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e(615)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,