var CrowdSimulator;CrowdSimulator=(()=>{"use strict";var t={546:(t,n,e)=>{e.r(n),e.d(n,{init:()=>E,playPause:()=>j,reconfigure:()=>q,step:()=>V});var i,o=function(){function t(t,n){this._renderer=t,this._agents=n}return t.prototype.init=function(t){this._agents.init(t)},t.prototype.update=function(t){var n=this;this._agents.forEach((function(e){e.update(t,n._agents.getNeighboursInRangeEuclidean(e,400))})),this._agents.init(this._agents.getAll())},t.prototype.draw=function(){this._renderer.clear(),this._renderer.drawAgents(this._agents)},t}(),r=function(){function t(t){var n=this;this.cameraDist=800,this.mouseDown=function(t){n.drag=!0,n.oldX=t.pageX,n.oldY=t.pageY},this.mouseUp=function(t){n.drag=!1,t.preventDefault()},this.mouseMove=function(t){if(!n.drag)return!1;n.xPan+=t.pageX-n.oldX,n.yPan+=t.pageY-n.oldY,n.oldX=t.pageX,n.oldY=t.pageY},this.mouseScroll=function(t){n.cameraDist+=t.deltaY,n.cameraDist<0&&(n.cameraDist=0),t.preventDefault(),console.log("Scroll")},this.canvas=t,this.context=this.canvas.getContext("2d"),this.xPan=this.canvas.width/2,this.yPan=this.canvas.height/2,this.canvas.addEventListener("mousedown",this.mouseDown,!1),this.canvas.addEventListener("mouseup",this.mouseUp,!1),this.canvas.addEventListener("mouseout",this.mouseUp,!1),this.canvas.addEventListener("mousemove",this.mouseMove,!1),this.canvas.addEventListener("wheel",this.mouseScroll,!1)}return t.prototype.clear=function(){this.context.setTransform(1,0,0,1,0,0),this.context.fillStyle="rgb(135, 194, 250)",this.context.fillRect(0,0,this.context.canvas.width,this.context.canvas.height)},t.prototype.drawAgents=function(t){var n=this,e=800/this.cameraDist;this.context.setTransform(1,0,0,1,0,0),this.context.translate(this.xPan,this.yPan),this.context.scale(e,e),this.context.fillStyle="rgb(51, 51, 51)",this.context.fillRect(.55*-this.context.canvas.width,.55*-this.context.canvas.height,1.1*this.context.canvas.width,1.1*this.context.canvas.height),t.forEach((function(t){n.drawAgent(t)}))},t.prototype.drawAgent=function(t){var n=t.getPosition(),e=t.getDirection(),i=t.getColour();this.context.beginPath(),this.context.strokeStyle="rgb("+i.r+", "+i.g+", "+i.b+")",this.context.lineWidth=2,this.context.arc(n.x,n.y,t.Radius,0,2*Math.PI);var o=e.magnitude();if(0!==o){this.context.moveTo(n.x,n.y);var r=n.add(e.divide(o).multiply(t.Radius));this.context.lineTo(r.x,r.y)}this.context.stroke()},t}(),s=function(){function t(){}return t.prototype.init=function(t){this._agents=t,this._root=this.constructTree(this._agents,!0)},t.prototype.getAll=function(){return this._agents},t.prototype.getNeighboursInRangeRectilinear=function(t,n){var e=t.getPosition().x-n,i=t.getPosition().y-n,o=t.getPosition().x+n,r=t.getPosition().y+n;return this.rangeSearch(this._root,e,i,o,r,!0).filter((function(n){return n.Id!==t.Id}))},t.prototype.getNeighboursInRangeEuclidean=function(t,n){return this.getNeighboursInRangeRectilinear(t,n).filter((function(e){return t.getPosition().subtract(e.getPosition()).magnitudeSqrd()<=Math.pow(n,2)}))},t.prototype.forEach=function(t){this._agents.forEach(t)},t.prototype.constructTree=function(t,n){if(0===t.length)return null;var e=Math.floor(t.length/2),i=n?t.sort((function(t,n){return t.getPosition().x-n.getPosition().x})):t.sort((function(t,n){return t.getPosition().y-n.getPosition().y})),o=this.constructTree(i.slice(0,e),!n),r=this.constructTree(i.slice(e+1,t.length),!n);return{agent:t[e],left:o,right:r}},t.prototype.rangeSearch=function(t,n,e,i,o,r){if(null==t)return[];var s=[];return r?(t.agent.getPosition().x<=i&&(s=s.concat(this.rangeSearch(t.right,n,e,i,o,!r))),t.agent.getPosition().x>=n&&(s=s.concat(this.rangeSearch(t.left,n,e,i,o,!r)))):(t.agent.getPosition().y<=o&&(s=s.concat(this.rangeSearch(t.right,n,e,i,o,!r))),t.agent.getPosition().y>=e&&(s=s.concat(this.rangeSearch(t.left,n,e,i,o,!r)))),t.agent.getPosition().x>=n&&t.agent.getPosition().y>=e&&t.agent.getPosition().x<=i&&t.agent.getPosition().y<=o&&s.push(t.agent),s},t}(),a=function(){function t(t,n){this.x=t,this.y=n}return t.prototype.copy=function(n){return new t(n.x,n.y)},t.prototype.add=function(n){return new t(this.x+n.x,this.y+n.y)},t.prototype.subtract=function(n){return new t(this.x-n.x,this.y-n.y)},t.prototype.multiply=function(n){return new t(this.x*n,this.y*n)},t.prototype.divide=function(n){return new t(this.x/n,this.y/n)},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.magnitudeSqrd=function(){return Math.pow(this.x,2)+Math.pow(this.y,2)},t.prototype.magnitude=function(){return Math.sqrt(this.magnitudeSqrd())},t.prototype.normalise=function(){var n=this.magnitude();return 0==n?new t(0,0):this.divide(n)},t.prototype.sample=function(n){var e=Math.sqrt(Math.random())*n,i=2*Math.PI*Math.random();return new t(this.x+e*Math.cos(i),this.y+e*Math.sin(i))},t}(),u=function(){function t(t,n,e){this.Id=t,this.Radius=20,this._position=n,this._direction=new a(0,0),this._getPreferredVelocity=e,this._isDone=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.isDone=function(){return this._isDone},t}(),c=function(){function t(){}return t.FromHsv=function(t,n,e){var i=(t*=6)-Math.floor(t),o=e*(1-n),r=e*(1-n*i),s=e*(1-n*(1-i));return 0<=t&&t<1?{r:255*e,g:255*s,b:255*o}:1<=t&&t<2?{r:255*r,g:255*e,b:255*o}:2<=t&&t<3?{r:255*o,g:255*e,b:255*s}:3<=t&&t<4?{r:255*o,g:255*r,b:255*e}:4<=t&&t<5?{r:255*s,g:255*o,b:255*e}:5<=t&&t<6?{r:255*e,g:255*o,b:255*r}:{r:0,g:0,b:0}},t.White={r:255,g:255,b:255},t.Red={r:255,g:0,b:0},t.Green={r:0,g:255,b:0},t}(),h=(i=function(t,n){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}i(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),p=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return h(n,t),n.prototype.getColour=function(){return this._isDone?c.White:c.Green},n.prototype.update=function(t,n){if(!this._isDone){var e=this._getPreferredVelocity(this._position),i=60*t/4e3;e.magnitudeSqrd()<.1?this._isDone=!0:(this._direction=e,this._position=this._position.add(e.multiply(i)))}},n}(u),l=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){function i(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}}(),d=function(t){function n(n,e,i){var o=t.call(this,n,e,i)||this;return o._isStuck=!1,o}return l(n,t),n.prototype.getColour=function(){return this._isDone?c.White:this._isStuck?c.Red:c.Green},n.prototype.update=function(t,n){if(!this._isDone){var e=this._getPreferredVelocity(this._position),i=60*t/4e3;if(e.magnitudeSqrd()<.1)this._isDone=!0;else{this._direction=e.normalise();var o=this._position.add(this._direction.multiply(25));this._isStuck=!1;for(var r=0;r<n.length;r++)if(this.collides(n[r],o))return void(this._isStuck=!0);this._direction=e,this._position=this._position.add(this._direction.multiply(i))}}},n.prototype.collides=function(t,n){return t.getPosition().subtract(n).magnitudeSqrd()<(t.Radius+this.Radius)*(t.Radius+this.Radius)},n}(u),f=function(){function t(){}return t.getClosestPointOnLine=function(t,n,e){var i=n.normalise(),o=e.subtract(t).dot(i);return t.add(i.multiply(o))},t.getFirstRayCircleIntersection=function(t,n,e,i){var o=e.subtract(t),r=i.dot(i),s=2*i.dot(o),a=o.dot(o)-Math.pow(n,2),u=Math.pow(s,2)-4*r*a;if(u<0)return 1/0;var c=(-s-Math.sqrt(u))/2*r;return c<0?1/0:c},t.getLineLineIntersection=function(t,n,e,i){var o=e.subtract(t),r=i.x*n.y-i.y*n.x,s=(o.y*i.x-o.y*i.y)/r;return t.add(n.multiply(s))},t}(),g=function(){function t(t,n,e){this.vertex=t,this.tangent1=n,this.tangent2=e}return t.prototype.contains=function(t){var n=(this.tangent1.x-this.vertex.x)*(t.y-this.vertex.y)-(this.tangent1.y-this.vertex.y)*(t.x-this.vertex.x),e=(this.tangent2.x-this.vertex.x)*(t.y-this.vertex.y)-(this.tangent2.y-this.vertex.y)*(t.x-this.vertex.x);return n>0&&e<0},t}(),y=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){function i(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}}(),v=function(t){function n(n,e,i){var o=t.call(this,n,e,i)||this;return o._colour=c.Green,o}return y(n,t),n.prototype.getColour=function(){return this._colour},n.prototype.update=function(t,n){if(!this._isDone){var e=this._getPreferredVelocity(this._position),i=60*t/4e3;if(e.magnitudeSqrd()<.1)return this._isDone=!0,this._direction=new a(0,0),void(this._colour=c.White);for(var o,r,s=!0,u=0;u<n.length;u++)if(null!=(x=this.getVelocityObstacle(n[u]))&&x.contains(e)){s=!1,o=x,r=u;break}if(s)return this._direction=e,this._position=this._position.add(this._direction.multiply(i)),void(this._colour=c.Green);if(null!=o){var h=f.getClosestPointOnLine(o.vertex,o.tangent1,e),p=f.getClosestPointOnLine(o.vertex,o.tangent2,e),l=!0,d=!0;for(u=0;u<n.length;u++)u!=r&&(null!=(x=this.getVelocityObstacle(n[u]))&&x.contains(h)&&(l=!1),null!=x&&x.contains(h)&&(d=!1));if(l&&d?h.subtract(e).magnitudeSqrd()<p.subtract(e).magnitudeSqrd()?this._direction=h:this._direction=p:l?this._direction=h:d&&(this._direction=p),l||d)return this._position=this._position.add(this._direction.multiply(i)),void this.setColour(e)}var g=1/0,y=new a(0,0);for(u=0;u<100;u++){for(var v=new a(0,0).sample(1),_=1/0,m=0;m<n.length;m++){var x,w=n[m];if(null==(x=this.getVelocityObstacle(w))||x.contains(v)){var b=f.getFirstRayCircleIntersection(w.getPosition().add(w.getDirection()),this.Radius+w.Radius,this._position,v.subtract(w.getDirection()));b<_&&(_=b)}}var P=100/_+e.subtract(v).magnitude();P<g&&(g=P,y=v)}this._direction=y,this._position=this._position.add(this._direction.multiply(i)),this.setColour(e)}},n.prototype.getVelocityObstacle=function(t){var n=t.getDirection(),e=t.getPosition().subtract(this._position).add(n),i=t.Radius+this.Radius,o=n.subtract(e),r=o.magnitude();if(r<i)return null;var s=Math.acos(i/r),u=Math.atan2(o.y,o.x),c=u+s,h=new a(e.x+i*Math.cos(c),e.y+i*Math.sin(c)),p=u-s,l=new a(e.x+i*Math.cos(p),e.y+i*Math.sin(p));return new g(n,h,l)},n.prototype.setColour=function(t){var n=t.subtract(this._direction).magnitude(),e=n>1?0:(1-n)/3;this._colour=c.FromHsv(e,1,1)},n}(u),_=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){function i(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}}(),m=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return _(n,t),n.prototype.getVelocityObstacle=function(t){var n=this.getDirection(),e=t.getDirection(),i=n.add(e).divide(2),o=t.getPosition().subtract(this._position).add(e),r=t.Radius+this.Radius,s=e.subtract(o),u=s.magnitude();if(u<r)return null;var c=Math.acos(r/u),h=Math.atan2(s.y,s.x),p=h+c,l=new a(o.x+r*Math.cos(p),o.y+r*Math.sin(p)),d=h-c,f=new a(o.x+r*Math.cos(d),o.y+r*Math.sin(d));return new g(i,l,f)},n}(v),x=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){function i(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}}(),w=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return x(n,t),n.prototype.getVelocityObstacle=function(t){var n=this.getDirection(),e=t.getDirection(),i=e,o=n.add(e).divide(2),r=t.getPosition().subtract(this._position),s=r.add(e),u=t.Radius+this.Radius,c=e.subtract(s),h=c.magnitude();if(h<u)return null;var p,l=Math.acos(u/h),d=Math.atan2(c.y,c.x),y=d+l,v=new a(s.x+u*Math.cos(y),s.y+u*Math.sin(y)),_=d-l,m=new a(s.x+u*Math.cos(_),s.y+u*Math.sin(_));return p=(r.x-e.x)*(n.y-e.y)-(r.y-e.y)*(n.x-e.x)>0?f.getLineLineIntersection(i,v,o,m):f.getLineLineIntersection(i,m,o,v),new g(p,v,m)},n}(v),b=function(){function t(){}return t.getAgent=function(t,n,e,i){switch(t){case"BasicAgent":return new p(n,e,i);case"StopAgent":return new d(n,e,i);case"VOAgent":return new v(n,e,i);case"RVOAgent":return new m(n,e,i);case"HRVOAgent":return new w(n,e,i);default:throw new Error('Unknown agent type "'+t+'"')}},t}(),P=function(){function t(){}return t.getConfiguration=function(t,n,e,i,o){switch(t){case"RandomToRandom":return this.RandomToRandom(n,e,i,o);case"RandomToLine":return this.RandomToLine(n,e,i,o);case"CircleToCircle":return this.CircleToCircle(n,e,i,o);case"GridToGrid":return this.GridToGrid(n,e,i,o);default:throw new Error('Unknown configuration type "'+t+'"')}},t.RandomToRandom=function(t,n,e,i){for(var o=[],r=this.poissonDiskSample(n,e,i,50).map((function(t){return t.subtract(new a(n/2,e/2))})),s=this.poissonDiskSample(n,e,i,50).map((function(t){return t.subtract(new a(n/2,e/2))})),u=0;u<i;u++){var c=b.getAgent(t,u,r[u],this.preferredVelocityFromGoalPosition(s[u]));o.push(c)}return o},t.RandomToLine=function(t,n,e,i){for(var o=[],r=this.poissonDiskSample(n,e,i,50).map((function(t){return t.subtract(new a(n/2,e/2))})),s=0;s<i;s++){var u=b.getAgent(t,s,r[s],this.preferredVelocityFromGoalPosition(new a(((s+1)/(i+1)-.5)*n,0)));o.push(u)}return o},t.CircleToCircle=function(t,n,e,i){for(var o=[],r=e/2-25,s=0;s<i;s++){var u=2*Math.PI*s/i,c=b.getAgent(t,s,new a(r*Math.cos(u),r*Math.sin(u)),this.preferredVelocityFromGoalPosition(new a(r*Math.cos(u+Math.PI),r*Math.sin(u+Math.PI))));o.push(c)}return o},t.GridToGrid=function(t,n,e,i){for(var o=[],r=Math.ceil(Math.sqrt(i/2)),s=90,u=30-n/2,c=-(r-1)/2*s,h=0;h<i;h++){var p=Math.floor(h/2),l=Math.floor(p/r),d=p%r;if(h%2==0){var f=b.getAgent(t,h,new a(u+(r-1-d)*s,c+l*s),this.preferredVelocityFromGoalPosition(new a(-u-d*s,c+l*s)));o.push(f)}else f=b.getAgent(t,h,new a(-u-(r-1-d)*s,c+l*s),this.preferredVelocityFromGoalPosition(new a(u+d*s,c+l*s))),o.push(f)}return o},t.preferredVelocityFromGoalPosition=function(t){return function(n){var e=t.subtract(n);return e.magnitudeSqrd()<1?e:e.normalise()}},t.poissonDiskSample=function(t,n,e,i){for(var o=[],r=function(){for(var e,r=!0;r;)r=!1,e=new a(t*Math.random(),n*Math.random()),o.forEach((function(t){e.subtract(t).magnitudeSqrd()<Math.pow(i,2)&&(r=!0)}));o.push(e)},s=0;s<e;s++)r();return o},t}(),M=document.getElementById("config"),O=document.getElementById("agentType"),S=document.getElementById("numberOfAgents"),R=document.getElementById("canvas"),D=document.getElementById("framerate"),C=document.getElementById("playButton"),A=document.getElementById("stepButton"),I=new o(new r(R),new s),T=!1;function E(){this.reconfigure();var t=0,n=0,e=0;window.requestAnimationFrame((function i(o){var r=o-t;t=o,T&&I.update(r),I.draw(),e++,o-n>=250&&(D.textContent="FPS: "+(1e3*e/(o-n)).toFixed(1),e=0,n=o),window.requestAnimationFrame(i)}))}function j(){(T=!T)?(C.textContent="Pause",A.disabled=!0):(C.textContent="Play",A.disabled=!1)}function V(){I.update(1e3/60)}function q(){var t;T&&this.playPause();var n=M.value,e=O.value,i=null!==(t=parseInt(S.value))&&void 0!==t?t:0;I.init(P.getConfiguration(n,e,R.width,R.height,i))}}},n={};function e(i){if(n[i])return n[i].exports;var o=n[i]={exports:{}};return t[i](o,o.exports,e),o.exports}return e.d=(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e(546)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,