var CrowdSimulator;CrowdSimulator=(()=>{"use strict";var t={237:(t,i,e)=>{e.r(i),e.d(i,{init:()=>I,playPause:()=>w,reconfigure:()=>S,step:()=>R});var n=function(){function t(t,i){this._renderer=t,this._agents=i}return t.prototype.init=function(t){this._agents.init(t.agents)},t.prototype.update=function(t){var i=this;this._agents.forEach((function(e){e.update(t,i._agents.getNeighboursInRangeEuclidean(e,300))})),this._agents.init(this._agents.getAll())},t.prototype.draw=function(){this._renderer.clear(),this._renderer.drawAgents(this._agents)},t}(),o=["precision mediump float;","attribute vec2 position;","attribute float radius;","uniform float width;","uniform float height;","void main()","{","  gl_Position = vec4(2.0 * position.x / width - 1.0,","                     2.0 * position.y / height - 1.0,","                     0.0, 1.0);","  gl_PointSize = 2.0 * radius;","}"].join("\n"),r=["precision mediump float;","void main()","{","  float dist = distance( gl_PointCoord, vec2(0.5) );","  if (dist > 0.5) discard;","  gl_FragColor = vec4(1, 0, 0, 1);","}"].join("\n"),s=function(){function t(t){if(this.gl=t.getContext("webgl"),this.gl){var i=this.gl.createShader(this.gl.VERTEX_SHADER),e=this.gl.createShader(this.gl.FRAGMENT_SHADER);this.gl.shaderSource(i,o),this.gl.shaderSource(e,r),this.gl.compileShader(i),this.gl.getShaderParameter(i,this.gl.COMPILE_STATUS)?(this.gl.compileShader(e),this.gl.getShaderParameter(e,this.gl.COMPILE_STATUS)?(this.program=this.gl.createProgram(),this.gl.attachShader(this.program,i),this.gl.attachShader(this.program,e),this.gl.linkProgram(this.program),this.gl.getProgramParameter(this.program,this.gl.LINK_STATUS)?(this.gl.validateProgram(this.program),this.gl.getProgramParameter(this.program,this.gl.VALIDATE_STATUS)?(this.positionAttribute=this.gl.getAttribLocation(this.program,"position"),this.radiusAttribute=this.gl.getAttribLocation(this.program,"radius"),this.widthUniform=this.gl.getUniformLocation(this.program,"width"),this.heightUniform=this.gl.getUniformLocation(this.program,"height"),this.VBO=this.gl.createBuffer()):console.error("ERROR validating program",this.gl.getProgramInfoLog(this.program))):console.error("ERROR linking program",this.gl.getProgramInfoLog(this.program))):console.error("ERROR compiling fragment shader",this.gl.getShaderInfoLog(e))):console.error("ERROR compiling vertex shader",this.gl.getShaderInfoLog(i))}else console.error("WebGL not supported")}return t.prototype.clear=function(){this.gl.clearColor(1,1,1,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT)},t.prototype.drawAgents=function(t){var i=[];t.forEach((function(t){var e=t.getPosition();i.push(e.x),i.push(e.y),i.push(t.Radius)})),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.VBO),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(i),this.gl.STATIC_DRAW),this.gl.vertexAttribPointer(this.positionAttribute,2,this.gl.FLOAT,!1,3*Float32Array.BYTES_PER_ELEMENT,0),this.gl.enableVertexAttribArray(this.positionAttribute),this.gl.vertexAttribPointer(this.radiusAttribute,1,this.gl.FLOAT,!1,3*Float32Array.BYTES_PER_ELEMENT,2*Float32Array.BYTES_PER_ELEMENT),this.gl.enableVertexAttribArray(this.radiusAttribute),this.gl.useProgram(this.program),this.gl.uniform1f(this.widthUniform,this.gl.canvas.width),this.gl.uniform1f(this.heightUniform,this.gl.canvas.height),this.gl.drawArrays(this.gl.POINTS,0,i.length/3)},t}(),a=function(){function t(t,i){this.x=t,this.y=i}return t.prototype.copy=function(i){return new t(i.x,i.y)},t.prototype.add=function(i){return new t(this.x+i.x,this.y+i.y)},t.prototype.subtract=function(i){return new t(this.x-i.x,this.y-i.y)},t.prototype.multiply=function(i){return new t(this.x*i,this.y*i)},t.prototype.divide=function(i){return new t(this.x/i,this.y/i)},t.prototype.dot=function(t){return this.x*t.x+this.y*t.y},t.prototype.magnitudeSqrd=function(){return Math.pow(this.x,2)+Math.pow(this.y,2)},t.prototype.magnitude=function(){return Math.sqrt(this.magnitudeSqrd())},t.prototype.normalise=function(){var i=this.magnitude();return 0==i?new t(0,0):this.divide(i)},t.prototype.sample=function(i){var e=Math.sqrt(Math.random())*i,n=2*Math.PI*Math.random();return new t(this.x+e*Math.cos(n),this.y+e*Math.sin(n))},t}(),h=function(){function t(t,i,e,n){this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new a(0,0),this._isDone=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return!1},t.prototype.update=function(t,i){if(!this._isDone){var e=this._goalPosition.subtract(this._position);e.magnitude()>60*t/1e3?(this._direction=e.normalise(),this._position=this._position.add(this._direction.multiply(60*t/1e3))):(this._position=this._goalPosition,this._isDone=!0)}},t}(),u=function(){function t(t,i,e,n){this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new a(0,0),this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){var e=this;if(!this._isDone){var n=this._goalPosition.subtract(this._position);if(n.magnitude()>60*t/1e3){this._direction=n.normalise();var o=this._position.add(this._direction.multiply(20));this._isStuck=!1,i.forEach((function(t){t.Id!=e.Id&&e.collides(t,o)&&(e._isStuck=!0)})),this._isStuck||(this._position=this._position.add(this._direction.multiply(60*t/1e3)))}else this._position=this._goalPosition,this._isDone=!0}},t.prototype.collides=function(t,i){return t.getPosition().subtract(i).magnitude()<t.Radius+this.Radius},t}(),c=function(){function t(){}return t.RandomToRandom=function(t,i,e,n){for(var o=[],r=this.poissonDiskSample(i,e,t,50),s=this.poissonDiskSample(i,e,t,50),a=0;a<t;a++){var h=n(a,r[a],s[a],20);o.push(h)}return{agents:o}},t.RandomToLine=function(t,i,e,n){for(var o=[],r=this.poissonDiskSample(i,e,t,50),s=0;s<t;s++){var h=n(s,r[s],new a((s+1)/(t+1)*i,e/2),20);o.push(h)}return{agents:o}},t.CircleToCircle=function(t,i,e,n){for(var o=[],r=i/2,s=e/2,h=e/2-25,u=0;u<t;u++){var c=2*Math.PI*u/t,g=n(u,new a(r+h*Math.cos(c),s+h*Math.sin(c)),new a(r+h*Math.cos(c+Math.PI),s+h*Math.sin(c+Math.PI)),20);o.push(g)}return{agents:o}},t.GridToGrid=function(t,i,e,n){for(var o=[],r=Math.ceil(t/8),s=i-50-90*(r-1),h=e/2-135,u=0,c=0;c<r;c++){for(var g=0;g<4;g++){var d=new a(50+90*c,h+90*g),l=new a(s+90*c,h+90*g);if(o.push(n(u,d,l,20)),++u>=t)break;if(o.push(n(u,l,d,20)),++u>=t)break}if(u>=t)break}return{agents:o}},t.poissonDiskSample=function(t,i,e,n){for(var o=[],r=function(){for(var e,r=!0;r;)r=!1,e=new a(t*Math.random(),i*Math.random()),o.forEach((function(t){e.subtract(t).magnitudeSqrd()<Math.pow(n,2)&&(r=!0)}));o.push(e)},s=0;s<e;s++)r();return o},t}(),g=function(){function t(){}return t.prototype.init=function(t){this._agents=t,this._root=this.constructTree(this._agents,!0)},t.prototype.getAll=function(){return this._agents},t.prototype.getNeighboursInRangeRectilinear=function(t,i){var e=t.getPosition().x-i,n=t.getPosition().y-i,o=t.getPosition().x+i,r=t.getPosition().y+i;return this.rangeSearch(this._root,e,n,o,r,!0).filter((function(i){return i.Id!==t.Id}))},t.prototype.getNeighboursInRangeEuclidean=function(t,i){return this.getNeighboursInRangeRectilinear(t,i).filter((function(e){return t.getPosition().subtract(e.getPosition()).magnitudeSqrd()<=Math.pow(i,2)}))},t.prototype.forEach=function(t){this._agents.forEach(t)},t.prototype.constructTree=function(t,i){if(0===t.length)return null;var e=Math.floor(t.length/2),n=i?t.sort((function(t,i){return t.getPosition().x-i.getPosition().x})):t.sort((function(t,i){return t.getPosition().y-i.getPosition().y})),o=this.constructTree(n.slice(0,e),!i),r=this.constructTree(n.slice(e+1,t.length),!i);return{agent:t[e],left:o,right:r}},t.prototype.rangeSearch=function(t,i,e,n,o,r){if(null==t)return[];var s=[];return r?(t.agent.getPosition().x<=n&&(s=s.concat(this.rangeSearch(t.right,i,e,n,o,!r))),t.agent.getPosition().x>=i&&(s=s.concat(this.rangeSearch(t.left,i,e,n,o,!r)))):(t.agent.getPosition().y<=o&&(s=s.concat(this.rangeSearch(t.right,i,e,n,o,!r))),t.agent.getPosition().y>=e&&(s=s.concat(this.rangeSearch(t.left,i,e,n,o,!r)))),t.agent.getPosition().x>=i&&t.agent.getPosition().y>=e&&t.agent.getPosition().x<=n&&t.agent.getPosition().y<=o&&s.push(t.agent),s},t}(),d=function(){function t(t,i,e,n){this.MAX_VELOCITY=1,this.MAX_ACCELERATION=.5,this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new a(0,0),this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){if(!this._isDone){this._isStuck=!1;for(var e,n,o=.5,r=this.getPreferredVelocity(o),s=!0,h=0;h<i.length;h++)if(null!=(_=this.getVelocityObstacle(i[h]))&&this.isInside(r,_)){s=!1,e=_,n=h;break}if(s)return this._direction=r,this._position=this._position.add(r),void this.checkIfDone();if(null!=e){var u=this.getClosestPointOnLine(e.vertex,e.tangent1,r);if(u.magnitude()<=o){for(s=!0,h=0;h<i.length;h++)if(h!=n&&null!=(_=this.getVelocityObstacle(i[h]))&&this.isInside(u,_)){s=!1;break}if(s)return this._direction=u,this._position=this._position.add(u),void this.checkIfDone()}var c=this.getClosestPointOnLine(e.vertex,e.tangent2,r);if(u.magnitude()<=o){for(s=!0,h=0;h<i.length;h++)if(h!=n&&null!=(_=this.getVelocityObstacle(i[h]))&&this.isInside(c,_)){s=!1;break}if(s)return this._direction=c,this._position=this._position.add(c),void this.checkIfDone()}}var g=1/0,d=new a(0,0);for(h=0;h<100;h++){for(var l=new a(0,0).sample(o),p=1/0,f=0;f<i.length;f++){var _,y=i[f];if(null==(_=this.getVelocityObstacle(y))||this.isInside(l,_)){var m=this.getFirstRayCircleIntersection(y.getPosition().add(y.getDirection()),this.Radius+y.Radius,this._position,l.subtract(y.getDirection()));if(m<p&&0==(p=m))return void this.checkIfDone()}}var v=100/p+r.subtract(l).magnitude();v<g&&(g=v,d=l)}0==d.magnitude()&&(this._isStuck=!0),this._direction=d,this._position=this._position.add(d),this.checkIfDone()}},t.prototype.getPreferredVelocity=function(t){var i=this._goalPosition.subtract(this._position),e=i.magnitude();return e>t?i.divide(e/t):i},t.prototype.getVelocityObstacle=function(t){var i=t.getDirection(),e=t.getPosition().subtract(this._position).add(i),n=t.Radius+this.Radius,o=i.subtract(e),r=o.magnitude();if(r<n)return null;var s=Math.acos(n/r),h=Math.atan2(o.y,o.x),u=h+s,c=h-s;return{vertex:i,tangent1:new a(e.x+n*Math.cos(u),e.y+n*Math.sin(u)),tangent2:new a(e.x+n*Math.cos(c),e.y+n*Math.sin(c))}},t.prototype.isInside=function(t,i){var e=(i.tangent1.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent1.y-i.vertex.y)*(t.x-i.vertex.x),n=(i.tangent2.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent2.y-i.vertex.y)*(t.x-i.vertex.x);return e>0&&n<0},t.prototype.getClosestPointOnLine=function(t,i,e){var n=i.normalise(),o=e.subtract(t).dot(n);return t.add(n.multiply(o))},t.prototype.getFirstRayCircleIntersection=function(t,i,e,n){var o=e.subtract(t),r=n.dot(n),s=2*n.dot(o),a=o.dot(o)-Math.pow(i,2),h=Math.pow(s,2)-4*r*a;if(h<0)return 1/0;var u=(-s-Math.sqrt(h))/2*r;return u<0?1/0:u},t.prototype.checkIfDone=function(){this._position.subtract(this._goalPosition).magnitudeSqrd()<1&&(this._isDone=!0,this._position=this._goalPosition,this._direction=new a(0,0))},t}(),l=function(){function t(t,i,e,n){this.MAX_VELOCITY=1,this.MAX_ACCELERATION=.5,this.Id=t,this._position=i,this._goalPosition=e,this.Radius=n,this._direction=new a(0,0),this._isDone=!1,this._isStuck=!1}return t.prototype.getPosition=function(){return this._position},t.prototype.getDirection=function(){return this._direction},t.prototype.getIsDone=function(){return this._isDone},t.prototype.getIsStuck=function(){return this._isStuck},t.prototype.update=function(t,i){if(!this._isDone){this._isStuck=!1;for(var e,n,o=.5,r=this.getPreferredVelocity(o),s=!0,h=0;h<i.length;h++)if(null!=(_=this.getReciprocalVelocityObstacle(i[h]))&&this.isInside(r,_)){s=!1,e=_,n=h;break}if(s)return this._direction=r,this._position=this._position.add(r),void this.checkIfDone();if(null!=e){var u=this.getClosestPointOnLine(e.vertex,e.tangent1,r);if(u.magnitude()<=o){for(s=!0,h=0;h<i.length;h++)if(h!=n&&null!=(_=this.getReciprocalVelocityObstacle(i[h]))&&this.isInside(u,_)){s=!1;break}if(s)return this._direction=u,this._position=this._position.add(u),void this.checkIfDone()}var c=this.getClosestPointOnLine(e.vertex,e.tangent2,r);if(u.magnitude()<=o){for(s=!0,h=0;h<i.length;h++)if(h!=n&&null!=(_=this.getReciprocalVelocityObstacle(i[h]))&&this.isInside(c,_)){s=!1;break}if(s)return this._direction=c,this._position=this._position.add(c),void this.checkIfDone()}}var g=1/0,d=new a(0,0);for(h=0;h<100;h++){for(var l=new a(0,0).sample(o),p=1/0,f=0;f<i.length;f++){var _,y=i[f];if(null!=(_=this.getReciprocalVelocityObstacle(y))&&this.isInside(l,_)){var m=this.getFirstRayCircleIntersection(y.getPosition().add(y.getDirection()),this.Radius+y.Radius,this._position,l.multiply(2).subtract(this.getDirection()).subtract(y.getDirection()));if(m<p&&0==(p=m))return void this.checkIfDone()}}var v=100/p+r.subtract(l).magnitude();v<g&&(g=v,d=l)}0==d.magnitude()&&(this._isStuck=!0),this._direction=d,this._position=this._position.add(d),this.checkIfDone()}},t.prototype.getPreferredVelocity=function(t){var i=this._goalPosition.subtract(this._position),e=i.magnitude();return e>t?i.divide(e/t):i},t.prototype.getReciprocalVelocityObstacle=function(t){var i=this.getDirection(),e=t.getDirection(),n=i.add(e).divide(2),o=t.getPosition().subtract(this._position).add(e),r=t.Radius+this.Radius,s=e.subtract(o),h=s.magnitude();if(h<r)return null;var u=Math.acos(r/h),c=Math.atan2(s.y,s.x),g=c+u,d=c-u;return{vertex:n,tangent1:new a(o.x+r*Math.cos(g),o.y+r*Math.sin(g)),tangent2:new a(o.x+r*Math.cos(d),o.y+r*Math.sin(d))}},t.prototype.isInside=function(t,i){var e=(i.tangent1.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent1.y-i.vertex.y)*(t.x-i.vertex.x),n=(i.tangent2.x-i.vertex.x)*(t.y-i.vertex.y)-(i.tangent2.y-i.vertex.y)*(t.x-i.vertex.x);return e>0&&n<0},t.prototype.getClosestPointOnLine=function(t,i,e){var n=i.normalise(),o=e.subtract(t).dot(n);return t.add(n.multiply(o))},t.prototype.getFirstRayCircleIntersection=function(t,i,e,n){var o=e.subtract(t),r=n.dot(n),s=2*n.dot(o),a=o.dot(o)-Math.pow(i,2),h=Math.pow(s,2)-4*r*a;if(h<0)return 1/0;var u=(-s-Math.sqrt(h))/2*r;return u<0?1/0:u},t.prototype.checkIfDone=function(){this._position.subtract(this._goalPosition).magnitudeSqrd()<1&&(this._isDone=!0,this._position=this._goalPosition,this._direction=new a(0,0))},t}(),p=document.getElementById("config"),f=document.getElementById("agentType"),_=document.getElementById("numberOfAgents"),y=document.getElementById("canvas"),m=document.getElementById("framerate"),v=document.getElementById("playButton"),P=document.getElementById("stepButton"),b=new n(new s(y),new g),x=!1;function I(){this.reconfigure();var t=0,i=0,e=0;window.requestAnimationFrame((function n(o){var r=o-t;t=o,x&&b.update(r),b.draw(),e++,o-i>=250&&(m.textContent="FPS: "+(1e3*e/(o-i)).toFixed(1),e=0,i=o),window.requestAnimationFrame(n)}))}function w(){(x=!x)?(v.textContent="Pause",P.disabled=!0):(v.textContent="Play",P.disabled=!1)}function R(){b.update(1e3/60)}function S(){var t;x&&this.playPause();var i,e=p.value,n=f.value,o=null!==(t=parseInt(_.value))&&void 0!==t?t:0;switch(n){case"BasicAgent":i=function(t,i,e,n){return new h(t,i,e,n)};break;case"StopAgent":i=function(t,i,e,n){return new u(t,i,e,n)};break;case"VOAgent":i=function(t,i,e,n){return new d(t,i,e,n)};break;case"RVOAgent":i=function(t,i,e,n){return new l(t,i,e,n)};break;default:throw new Error("Agent not implemented")}switch(e){case"RandomToRandom":b.init(c.RandomToRandom(o,y.width,y.height,i));break;case"RandomToLine":b.init(c.RandomToLine(o,y.width,y.height,i));break;case"CircleToCircle":b.init(c.CircleToCircle(o,y.width,y.height,i));break;case"GridToGrid":b.init(c.GridToGrid(o,y.width,y.height,i));break;default:throw new Error("Configuration not implemented")}}}},i={};function e(n){if(i[n])return i[n].exports;var o=i[n]={exports:{}};return t[n](o,o.exports,e),o.exports}return e.d=(t,i)=>{for(var n in i)e.o(i,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:i[n]})},e.o=(t,i)=>Object.prototype.hasOwnProperty.call(t,i),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e(237)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,